<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>帅羊羊的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://shuaiyy.cn/"/>
  <updated>2017-10-19T08:12:28.525Z</updated>
  <id>http://shuaiyy.cn/</id>
  
  <author>
    <name>Shuai yy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://shuaiyy.cn/2017/11/07/%E6%8A%80%E6%9C%AF/PyQt5%20%E4%BD%BF%E7%94%A8pyinstaller%E6%89%93%E5%8C%85PyQt5%E7%A8%8B%E5%BA%8F/"/>
    <id>http://shuaiyy.cn/2017/11/07/技术/PyQt5 使用pyinstaller打包PyQt5程序/</id>
    <published>2017-11-07T09:40:41.286Z</published>
    <updated>2017-10-19T08:12:28.525Z</updated>
    
    <content type="html"><![CDATA[<p>使用pyinstaller打包PyQt5程序</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用pyinstaller打包PyQt5程序&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://shuaiyy.cn/2017/11/07/%E6%8A%80%E6%9C%AF/Python%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>http://shuaiyy.cn/2017/11/07/技术/Python多线程/</id>
    <published>2017-11-07T06:57:42.355Z</published>
    <updated>2017-11-07T06:57:42.465Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python多线程"><a href="#Python多线程" class="headerlink" title="Python多线程"></a>Python多线程</h2><h3 id="网络编程基础"><a href="#网络编程基础" class="headerlink" title="网络编程基础"></a>网络编程基础</h3><h4 id="TCP-UDP协议的特点"><a href="#TCP-UDP协议的特点" class="headerlink" title="TCP/UDP协议的特点"></a>TCP/UDP协议的特点</h4><h4 id="套接字"><a href="#套接字" class="headerlink" title="套接字"></a>套接字</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Python多线程&quot;&gt;&lt;a href=&quot;#Python多线程&quot; class=&quot;headerlink&quot; title=&quot;Python多线程&quot;&gt;&lt;/a&gt;Python多线程&lt;/h2&gt;&lt;h3 id=&quot;网络编程基础&quot;&gt;&lt;a href=&quot;#网络编程基础&quot; class=&quot;head
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Gevent 源码分析</title>
    <link href="http://shuaiyy.cn/2017/11/05/%E6%8A%80%E6%9C%AF/Gevent%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://shuaiyy.cn/2017/11/05/技术/Gevent 源码分析/</id>
    <published>2017-11-04T16:00:00.000Z</published>
    <updated>2017-11-07T09:13:58.170Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Gevent-源码分析"><a href="#Gevent-源码分析" class="headerlink" title="Gevent 源码分析"></a>Gevent 源码分析</h2><blockquote><p>gevent包括2个重要的部分，libev和greenlet。</p><p>libev实现事件循环， watcher(叶子，事件监控处理)，ev_run(主干，事件循环引擎)，ev_loop(watcher管理)。</p><p>greenlet提供对协程的完整支持，用于执行异步任务。</p></blockquote><ul><li><p>源码分析工具：pycharm </p><p><code>ctrl + B</code> 跳转到对象声明的源码位置， <code>ctrl + alt + 箭头</code> 前进或后退</p><p>选择右侧导航栏的Structure窗口，可以快速的查看类的属性和方法。</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171106/d3Dcl4dJB4.png?imageslim" alt="mark"></p></li><li><p>下载gevent源码</p><p>从github上下载源码</p></li><li><p>源码目录结构</p><p>doc：项目文档</p><p>examples：简单的使用示例</p><p>benchmarks：压力测试</p><p>src：源代码所在目录</p></li></ul><p><code>__init__.py</code></p><ul><li><p><code>__all__</code>属性由列表构成，它规定了模块的所有可见方法，会使属性列表之外的成员全部私有化。</p><p>  只有在执行语句 <code>from module import *</code> 时，<code>__all__</code>属性才会起作用。此时所有枚举的成员被import，而其他成员被私有化。</p><p>   它不仅在第一时间展现了模块的内容大纲，而且也更清晰的提供了外部访问接口。</p></li><li><p><code>__dependencies_for_freezing()</code> ，为打包工具如py2exe等指明hidden-import</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">__version__ = <span class="string">'1.3.0.dev0'</span></div><div class="line"></div><div class="line"></div><div class="line">__all__ = [<span class="string">'get_hub'</span>, <span class="string">'Greenlet'</span>, <span class="string">'GreenletExit'</span>, <span class="string">'spawn'</span>, <span class="string">'spawn_later'</span>,</div><div class="line">           <span class="string">'spawn_raw'</span>, <span class="string">'iwait'</span>, <span class="string">'wait'</span>, <span class="string">'killall'</span>, <span class="string">'Timeout'</span>, <span class="string">'with_timeout'</span>,</div><div class="line">           <span class="string">'getcurrent'</span>, <span class="string">'sleep'</span>, <span class="string">'idle'</span>, <span class="string">'kill'</span>, <span class="string">'signal'</span>, <span class="string">'fork'</span>, <span class="string">'reinit'</span>]</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">if</span> sys.platform == <span class="string">'win32'</span>:</div><div class="line">    <span class="comment"># trigger WSAStartup call</span></div><div class="line">    <span class="keyword">import</span> socket  <span class="comment"># pylint:disable=unused-import,useless-suppression</span></div><div class="line">    <span class="keyword">del</span> socket</div><div class="line"></div><div class="line"><span class="keyword">from</span> gevent.hub <span class="keyword">import</span> get_hub, iwait, wait</div><div class="line"><span class="keyword">from</span> gevent.greenlet <span class="keyword">import</span> Greenlet, joinall, killall</div><div class="line">joinall = joinall <span class="comment"># export for pylint</span></div><div class="line">spawn = Greenlet.spawn</div><div class="line">spawn_later = Greenlet.spawn_later</div><div class="line"></div><div class="line"><span class="keyword">from</span> gevent.timeout <span class="keyword">import</span> Timeout, with_timeout</div><div class="line"><span class="keyword">from</span> gevent.hub <span class="keyword">import</span> getcurrent, GreenletExit, spawn_raw, sleep, idle, kill, reinit</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="keyword">from</span> gevent.os <span class="keyword">import</span> fork</div><div class="line"><span class="keyword">except</span> ImportError:</div><div class="line">    __all__.remove(<span class="string">'fork'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">from</span> gevent.hub <span class="keyword">import</span> signal <span class="keyword">as</span> _signal_class</div><div class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> signal <span class="keyword">as</span> _signal_module</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__dependencies_for_freezing</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># pylint:disable=unused-variable</span></div><div class="line">    <span class="keyword">from</span> gevent <span class="keyword">import</span> core</div><div class="line">    <span class="keyword">from</span> gevent <span class="keyword">import</span> resolver_thread</div><div class="line">    <span class="keyword">from</span> gevent <span class="keyword">import</span> resolver_ares</div><div class="line">    <span class="keyword">from</span> gevent <span class="keyword">import</span> socket <span class="keyword">as</span> _socket</div><div class="line">    <span class="keyword">from</span> gevent <span class="keyword">import</span> threadpool</div><div class="line">    <span class="keyword">from</span> gevent <span class="keyword">import</span> thread</div><div class="line">    <span class="keyword">from</span> gevent <span class="keyword">import</span> threading</div><div class="line">    <span class="keyword">from</span> gevent <span class="keyword">import</span> select</div><div class="line">    <span class="keyword">from</span> gevent <span class="keyword">import</span> subprocess</div><div class="line">    <span class="keyword">import</span> pprint</div><div class="line">    <span class="keyword">import</span> traceback</div><div class="line">    <span class="keyword">import</span> signal <span class="keyword">as</span> _signal</div><div class="line"></div><div class="line"><span class="keyword">del</span> __dependencies_for_freezing</div></pre></td></tr></table></figure><h3 id="libev原理"><a href="#libev原理" class="headerlink" title="libev原理"></a>libev原理</h3><p><a href="http://www.cnblogs.com/Huayuan/archive/2013/05/03/3058578.html" target="_blank" rel="external">libev源码解读</a></p><p>Reactor模式</p><p><strong>工作流程</strong>：</p><ol><li>获取ev_loop实例，它代表了一个事件循环，也是代码的主要组织者。</li><li>创建和初始化watcher，并绑定到loop实例。libev中定义了一系列的watcher（如io，timer），每类watcher负责一类特定的事件。当loop中检测到感兴趣的事件发生，便会通知相关的watcher。</li><li>启动事件循环，ev_run函数。事件循环启动后，当前线程/进程将会被阻塞，直到循环被终止。</li><li>当watcher监听的事件发生时，wathcher被放入就绪状态队列，等待调用（执行watcher的回调函数）。</li></ol><p><strong>watcher对象</strong>：</p><p>watcher是Reactor中的Event Handler。一方面，它向事件循环提供了统一的调用接口，监听事件;另一方面，它是外部代码的注入口，维护着具体的watcher信息，如：绑定的回调函数，watcher的优先级，是否激活等。</p><ul><li>active: 表示当前watcher是否被激活。</li><li>pending: 表示当前watcher有事件就绪，等待处理。</li><li>priority: 是当前watcher的优先级；</li><li>data: 附加数据指针，用来在watcher中携带额外所需的数据；</li><li>cb：是事件触发后的回调函数定义。</li></ul><p><strong>ev_loop对象</strong>:</p><p>ev_loop则是一个Reactor的角色，是事件循环的上下文环境，就像一根竹签，把前面的watcher实例像糖葫芦一样串起来。ev_loop实现对watcher的管理，维护watcher就绪队列，触发watcher执行。</p><p><strong>ev_run</strong>：</p><p>执行事件循环的的引擎，即Reactor模式中的select方法。通过向ev_run函数传递一个ev_loop实例，便可以开启一个事件循环。</p><p>ev_run实际上是一个巨大的do-while循环，期间会检查loop中注册的各种watcher的事件。如果有事件就绪，则触发相应的watcher。这个循环会一直持续到ev_break被调用或者无active的watcher为止。当然，也可以通过传递EVRUN_NOWAIT或EVRUN_ONCE等flag来控制循环的阻塞行为。</p><h3 id="gevent-core"><a href="#gevent-core" class="headerlink" title="gevent core"></a>gevent core</h3><blockquote><p>由于gevent封装的libev是c语言实现的事件循环框架，因此了解libev的工作原理是非常重要的。</p></blockquote><ol><li><p><code>core.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> gevent.libev <span class="keyword">import</span> corecext <span class="keyword">as</span> _core</div><div class="line"><span class="comment"># CFFI/PyPy</span></div><div class="line"><span class="keyword">from</span> gevent.libev <span class="keyword">import</span> corecffi <span class="keyword">as</span> _core</div></pre></td></tr></table></figure><p>从gevent.libev中导入<code>_core</code>,分python版和pypy版本。</p></li><li><p><code>gevent.libev corecext.ppyx</code> </p><p>gevent封装了libev。libev是c实现的高效事件循环框架，其核心为ev_run,主要要做了五件事情：</p><ol><li>更新更改的FD事件</li><li>进行必要的sleep</li><li>backend_poll收集pending的IO事件</li><li>收集pending的timer事件</li><li>调用所有pending的事件</li></ol><p><code>corecext.ppyx</code>是cython写的，看不懂</p><p>corecext.ppyx用Cython实现loop类，编译时会转换为gevent.core.c-&gt;gevent.core.so，对libev的结构体和接口进行封装，比如时间循环loop，回调callback，观察者watcher</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, object flags=None, object default=None, size_t ptr=<span class="number">0</span>)</span>:</span></div><div class="line">        cdef unsigned int c_flags</div><div class="line">        cdef object old_handler = <span class="keyword">None</span></div><div class="line">        libev.ev_prepare_init(&amp;self._prepare, &lt;void*&gt;gevent_run_callbacks)</div><div class="line"><span class="comment">#ifdef _WIN32</span></div><div class="line">        libev.ev_timer_init(&amp;self._periodic_signal_checker, &lt;void*&gt;gevent_periodic_signal_check, <span class="number">0.3</span>, <span class="number">0.3</span>)</div><div class="line"><span class="comment">#endif</span></div><div class="line">        libev.ev_timer_init(&amp;self._timer0, &lt;void*&gt;gevent_noop, <span class="number">0.0</span>, <span class="number">0.0</span>)</div><div class="line"><span class="comment"># ........................</span></div><div class="line">            libev.ev_prepare_start(self._ptr, &amp;self._prepare)</div><div class="line">            libev.ev_unref(self._ptr)</div><div class="line">        self._callbacks = []</div><div class="line"></div><div class="line"><span class="comment"># ........</span></div><div class="line">cdef public class loop [object PyGeventLoopObject, type PyGeventLoop_Type]:</div><div class="line">  <span class="comment"># loop对象的实现</span></div><div class="line">  </div><div class="line">cdef public class watcher [object PyGeventWatcherObject, type PyGeventWatcher_Type]:</div><div class="line">  </div><div class="line">cdef public class io(watcher) [object PyGeventIOObject, type PyGeventIO_Type]:</div><div class="line">  </div><div class="line">cdef public class timer(watcher) [object PyGeventTimerObject, type PyGeventTimer_Type]:</div><div class="line">  </div><div class="line">cdef _run_callbacks(self):</div><div class="line">        cdef callback cb</div><div class="line">        cdef object callbacks</div><div class="line">        cdef int count = <span class="number">1000</span></div><div class="line">        libev.ev_timer_stop(self._ptr, &amp;self._timer0)</div><div class="line">        <span class="keyword">while</span> self._callbacks <span class="keyword">and</span> count &gt; <span class="number">0</span>:</div><div class="line">            callbacks = self._callbacks</div><div class="line">            self._callbacks = []</div><div class="line">            <span class="keyword">for</span> cb <span class="keyword">in</span> callbacks:</div><div class="line">                libev.ev_unref(self._ptr)</div><div class="line">                gevent_call(self, cb)</div><div class="line">                count -= <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> self._callbacks:</div><div class="line">            libev.ev_timer_start(self._ptr, &amp;self._timer0)</div><div class="line">            </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, nowait=False, once=False)</span>:</span></div><div class="line">        CHECK_LOOP2(self)</div><div class="line">        cdef unsigned int flags = <span class="number">0</span></div><div class="line">        <span class="keyword">if</span> nowait:</div><div class="line">            flags |= libev.EVRUN_NOWAIT</div><div class="line">        <span class="keyword">if</span> once:</div><div class="line">            flags |= libev.EVRUN_ONCE</div><div class="line">        <span class="keyword">with</span> nogil:</div><div class="line">            libev.ev_run(self._ptr, flags)</div><div class="line">            </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_callback</span><span class="params">(self, func, *args)</span>:</span></div><div class="line">        CHECK_LOOP2(self)</div><div class="line">        cdef callback cb = callback(func, args)</div><div class="line">        self._callbacks.append(cb)</div><div class="line">        libev.ev_ref(self._ptr)</div><div class="line">        <span class="keyword">return</span> cb</div></pre></td></tr></table></figure></li><li><p>查看core的对象loop及其方法</p><p>pycharm的python shell（ipython）有自动补全，当单步执行时，可以利用其查看对象对外提供的方法</p><p>或者使用debug查看对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></div><div class="line">  <span class="keyword">print</span> <span class="string">'hello'</span></div><div class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> core</div><div class="line">loop = core.loop()</div><div class="line"><span class="comment"># loop对象对外提供的方法和属性</span></div><div class="line">loop.run_callback(hello)</div><div class="line">loop.run()</div><div class="line">loop.depth</div><div class="line">loop.fileno()</div><div class="line">loop.update()</div><div class="line">loop.now()</div><div class="line"></div><div class="line">t = loop.timer(<span class="number">3</span>, <span class="number">2</span>) <span class="comment"># 每3秒执行2次</span></div><div class="line">t = loop.timer(<span class="number">3</span>) <span class="comment"># 3秒后执行并退出</span></div><div class="line">t.start(hello)</div><div class="line">loop.run() <span class="comment"># 必须loop运行起来，timer事件监听才会执行。</span></div><div class="line"></div><div class="line"><span class="comment"># ------- timer对象的声明和start方法</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">timer</span><span class="params">(watcher)</span>:</span></div><div class="line">    _watcher_type = <span class="string">'ev_timer'</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, loop, after=<span class="number">0.0</span>, repeat=<span class="number">0.0</span>, ref=True, priority=None)</span>:</span></div><div class="line">        <span class="keyword">if</span> repeat &lt; <span class="number">0.0</span>:</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"repeat must be positive or zero: %r"</span> % repeat)</div><div class="line">        watcher.__init__(self, loop, ref=ref, priority=priority, args=(after, repeat))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self, callback, *args, **kw)</span>:</span></div><div class="line">      <span class="comment"># ...</span></div></pre></td></tr></table></figure><p>直接ctrl + B，查看loop对象的声明。loop初始化了几个watcher，重要的方法有<code>run_callback</code>, <code>run</code>, <code>timer</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">loop</span><span class="params">(object)</span>:</span></div><div class="line">    error_handler = <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, flags=None, default=None)</span>:</span></div><div class="line">        self._in_callback = <span class="keyword">False</span></div><div class="line">        self._callbacks = []</div><div class="line"></div><div class="line">        <span class="comment"># self._check is a watcher that runs in each iteration of the mainloop, just after the blocking call</span></div><div class="line">        self._check = ffi.new(<span class="string">"struct ev_check *"</span>)</div><div class="line"></div><div class="line">        <span class="comment"># self._prepare is a watcher that runs in each iteration of the mainloop, just before the blocking call</span></div><div class="line">        self._prepare = ffi.new(<span class="string">"struct ev_prepare *"</span>)</div><div class="line"></div><div class="line">        <span class="comment"># A timer we start and stop on demand. If we have callbacks,</span></div><div class="line">        self._timer0 = ffi.new(<span class="string">"struct ev_timer *"</span>)</div><div class="line">        libev.ev_timer_init(self._timer0, libev.gevent_noop, <span class="number">0.0</span>, <span class="number">0.0</span>)</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_run_callbacks</span><span class="params">(self, _evloop, _, _revents)</span>:</span></div><div class="line">       count = <span class="number">1000</span></div><div class="line">       libev.ev_timer_stop(self._ptr, self._timer0)</div><div class="line">       <span class="keyword">while</span> self._callbacks <span class="keyword">and</span> count &gt; <span class="number">0</span>:</div><div class="line">           callbacks = self._callbacks</div><div class="line">           self._callbacks = []</div><div class="line">           <span class="keyword">for</span> cb <span class="keyword">in</span> callbacks:</div><div class="line">               self.unref()</div><div class="line">               callback = cb.callback</div><div class="line">               args = cb.args</div><div class="line">               <span class="keyword">if</span> callback <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> args <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">                   <span class="comment"># it's been stopped</span></div><div class="line">                   <span class="keyword">continue</span></div><div class="line"></div><div class="line">               cb.callback = <span class="keyword">None</span></div><div class="line"></div><div class="line">               <span class="keyword">try</span>:</div><div class="line">                   callback(*args)</div><div class="line">               <span class="keyword">except</span>: </div><div class="line">                 <span class="comment"># 。。。</span></div><div class="line"></div><div class="line">       <span class="keyword">if</span> self._callbacks:</div><div class="line">           libev.ev_timer_start(self._ptr, self._timer0)</div><div class="line">   <span class="function"><span class="keyword">def</span> <span class="title">destroy</span><span class="params">(self)</span>:</span></div><div class="line">       <span class="comment"># 销毁loop对象</span></div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, nowait=False, once=False)</span>:</span></div><div class="line">       flags = <span class="number">0</span></div><div class="line">       <span class="keyword">if</span> nowait:</div><div class="line">           flags |= libev.EVRUN_NOWAIT</div><div class="line">       <span class="keyword">if</span> once:</div><div class="line">           flags |= libev.EVRUN_ONCE</div><div class="line"></div><div class="line">       libev.ev_run(self._ptr, flags)</div><div class="line">      </div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">timer</span><span class="params">(self, after, repeat=<span class="number">0.0</span>, ref=True, priority=None)</span>:</span></div><div class="line">       <span class="keyword">return</span> timer(self, after, repeat, ref, priority)</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(self, priority=None)</span>:</span></div><div class="line">       <span class="keyword">return</span> callback(self, priority)</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">run_callback</span><span class="params">(self, func, *args)</span>:</span></div><div class="line">       cb = callback(func, args)</div><div class="line">       self._callbacks.append(cb)</div><div class="line">       self.ref()</div><div class="line">       <span class="keyword">return</span> cb</div><div class="line">      </div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">fileno</span><span class="params">(self)</span>:</span></div><div class="line">       <span class="keyword">if</span> self._ptr:</div><div class="line">           fd = self._ptr.backend_fd</div><div class="line">           <span class="keyword">if</span> fd &gt;= <span class="number">0</span>:</div><div class="line">               <span class="keyword">return</span> fd</div></pre></td></tr></table></figure></li></ol><h3 id="gevent-hub"><a href="#gevent-hub" class="headerlink" title="gevent hub"></a>gevent hub</h3><ul><li><p>hub是greentlet子类，一个greenlet对象，是main greenlet。</p></li><li><p>hub是gevent的核心，依赖libev调度所有greenlet</p><p>当有协程需要调度时，主协程调用switch方法切换到子协程。子协程阻塞或者主动调用switch时，切回主协程，由主协程调度其他协程运行。</p></li></ul><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171105/lh86hej12d.png?imageslim" alt="mark"></p><ul><li><p>主要的对象和方法</p><p>get_hub</p><p>sleep</p><p>kill</p><p>wait</p><p>iwait</p><p>signalClass</p><p>HubClass</p><p>WaiterClass  </p></li></ul><h4 id="sleep触发调度"><a href="#sleep触发调度" class="headerlink" title="sleep触发调度"></a>sleep触发调度</h4><p>当执行<code>gevent.sleep(0)</code>语句时，当前协程立即被切换出去，回到gevent的主协程，紧接着主协程执行调度其他协程执行。我们从sleep函数入手分析。</p><ol><li><p><code>gevent.sleep</code></p><p>sleep(0)意味着，协程立即yield，其他runnable greenlets将有机会被执行。等到下次loop到该协程时，它才会被恢复执行。</p><p>具体流程：通过get_hub获取主协程和loop对象，然后调用waiter.switch或者hub.wait</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -------  hub.py  -----</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sleep</span><span class="params">(seconds=<span class="number">0</span>, ref=True)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line"><span class="string">    Put the current greenlet to sleep for at least *seconds*.</span></div><div class="line"><span class="string">    """</span></div><div class="line">    hub = get_hub()</div><div class="line">    loop = hub.loop</div><div class="line">    <span class="keyword">if</span> seconds &lt;= <span class="number">0</span>:</div><div class="line">        waiter = Waiter()</div><div class="line">        loop.run_callback(waiter.switch)</div><div class="line">        waiter.get()</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        hub.wait(loop.timer(seconds, ref=ref))</div></pre></td></tr></table></figure><ul><li><p>get_hub</p><p>从当前线程上下文中获取hub对象，如果没有就创建一个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -------  hub.py  -----</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_hub</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line"><span class="string">    Return the hub for the current thread.</span></div><div class="line"><span class="string">    """</span></div><div class="line">    hub = _threadlocal.hub</div><div class="line">    <span class="keyword">if</span> hub <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        hubtype = get_hub_class()</div><div class="line">        hub = _threadlocal.hub = hubtype(*args, **kwargs)</div><div class="line">    <span class="keyword">return</span> hub</div></pre></td></tr></table></figure></li><li><p>hub.loop</p><p>默认是一个GEVENT_LOOP对象</p></li><li><p>Waiter</p><p>Waiter是低层次的greenlets通信工具，用来安全的实现switch()或throw()调用。类中的doc如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Waiter</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line"><span class="string">    A low level communication utility for greenlets.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">    Waiter is a wrapper around greenlet's ``switch()`` and ``throw()`` calls that makes them somewhat safer:</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">    * switching will occur only if the waiting greenlet is executing :meth:`get` method currently;</span></div><div class="line"><span class="string">    * any error raised in the greenlet is handled inside :meth:`switch` and :meth:`throw`</span></div><div class="line"><span class="string">    * if :meth:`switch`/:meth:`throw` is called before the receiver calls :meth:`get`, then :class:`Waiter`</span></div><div class="line"><span class="string">      will store the value/exception. The following :meth:`get` will return the value/raise the exception.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">    The :meth:`switch` and :meth:`throw` methods must only be called from the :class:`Hub` greenlet.</span></div><div class="line"><span class="string">    The :meth:`get` method must be called from a greenlet other than :class:`Hub`.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">        &gt;&gt;&gt; result = Waiter()</span></div><div class="line"><span class="string">        &gt;&gt;&gt; timer = get_hub().loop.timer(0.1)</span></div><div class="line"><span class="string">        &gt;&gt;&gt; timer.start(result.switch, 'hello from Waiter')</span></div><div class="line"><span class="string">        &gt;&gt;&gt; result.get() # blocks for 0.1 seconds</span></div><div class="line"><span class="string">        'hello from Waiter'</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">    If switch is called before the greenlet gets a chance to call :meth:`get` then</span></div><div class="line"><span class="string">    :class:`Waiter` stores the value.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">        &gt;&gt;&gt; result = Waiter()</span></div><div class="line"><span class="string">        &gt;&gt;&gt; timer = get_hub().loop.timer(0.1)</span></div><div class="line"><span class="string">        &gt;&gt;&gt; timer.start(result.switch, 'hi from Waiter')</span></div><div class="line"><span class="string">        &gt;&gt;&gt; sleep(0.2)</span></div><div class="line"><span class="string">        &gt;&gt;&gt; result.get() # returns immediatelly without blocking</span></div><div class="line"><span class="string">        'hi from Waiter'</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">    .. warning::</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">        This a limited and dangerous way to communicate between</span></div><div class="line"><span class="string">        greenlets. It can easily leave a greenlet unscheduled forever</span></div><div class="line"><span class="string">        if used incorrectly. Consider using safer classes such as</span></div><div class="line"><span class="string">        :class:`gevent.event.Event`, :class:`gevent.event.AsyncResult`,</span></div><div class="line"><span class="string">        or :class:`gevent.queue.Queue`.</span></div><div class="line"><span class="string">    """</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">switch</span><span class="params">(self, value=None)</span>:</span></div><div class="line">        <span class="string">"""Switch to the greenlet if one's available. Otherwise store the value."""</span></div><div class="line">        greenlet = self.greenlet</div><div class="line">        <span class="keyword">if</span> greenlet <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            self.value = value</div><div class="line">            self._exception = <span class="keyword">None</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">assert</span> getcurrent() <span class="keyword">is</span> self.hub, <span class="string">"Can only use Waiter.switch method from the Hub greenlet"</span></div><div class="line">            switch = greenlet.switch</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                switch(value)</div><div class="line">            <span class="keyword">except</span>: <span class="comment"># pylint:disable=bare-except</span></div><div class="line">                self.hub.handle_error(switch, *sys.exc_info())</div><div class="line">                </div><div class="line">     <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""If a value/an exception is stored, return/raise it. Otherwise until switch() or throw() is called."""</span></div></pre></td></tr></table></figure><p>Waiter的switch方法，如果Waiter对象当前绑定了greenlet对象(hub实例)，就调用<code>greenlet.switch</code>方法。</p></li><li><p>hub.wait(loop.timer(seconds, ref=ref))</p><p>等待watcher对象（计时器timer）就绪之前，阻塞该协程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#   -------- hub.py -------    </span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">wait</span><span class="params">(self, watcher)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        Wait until the *watcher* (which should not be started) is ready.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">        The current greenlet will be unscheduled during this time.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">        .. seealso:: :class:`gevent.core.io`, :class:`gevent.core.timer`,</span></div><div class="line"><span class="string">            :class:`gevent.core.signal`, :class:`gevent.core.idle`, :class:`gevent.core.prepare`,</span></div><div class="line"><span class="string">            :class:`gevent.core.check`, :class:`gevent.core.fork`, :class:`gevent.core.async`,</span></div><div class="line"><span class="string">            :class:`gevent.core.child`, :class:`gevent.core.stat`</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">        """</span></div><div class="line">      waiter = Waiter()</div><div class="line">        unique = object()</div><div class="line">        watcher.start(waiter.switch, unique)</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            result = waiter.get()</div><div class="line">            <span class="keyword">if</span> result <span class="keyword">is</span> <span class="keyword">not</span> unique:</div><div class="line">                <span class="keyword">raise</span> InvalidSwitchError(<span class="string">'Invalid switch into %s: %r (expected %r)'</span> % (getcurrent(), result, unique))</div><div class="line">        <span class="keyword">finally</span>:</div><div class="line">            watcher.stop()</div></pre></td></tr></table></figure><p>​</p></li></ul></li></ol><h3 id="gevent-socket"><a href="#gevent-socket" class="headerlink" title="gevent socket"></a>gevent socket</h3><blockquote><p>当python底层的socket使用非阻塞模式时，执行socket操作会立即返回exception。gevent的socket在原始socket的基础上，通过处理exception，并监听socket 可读可写事件来实现异步。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> gevent</div><div class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> socket</div><div class="line"></div><div class="line">conn = socket.create_connection((<span class="string">'localhost'</span>, <span class="string">'8888'</span>))</div><div class="line"><span class="keyword">print</span> conn</div></pre></td></tr></table></figure><ul><li>socket.py</li><li>协作式底层网络接口</li><li>提供了套接字操作和相关函数。API与python标准库一致。但同步函数只会阻塞当前协程，其他协程会继续运行。</li></ul><p><strong>主要方法分析：</strong></p><ul><li><p><code>create_connection</code> 创建socket对象,调用<code>socket.connect</code>方法</p><p>主要<code>sock = socket(af, socktype, proto)</code> ,这里的socket是gevent封装的一个对象，在<code>_socket2.py</code>中定义的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ----- gevent socket.py -------</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_connection</span><span class="params">(address, timeout=_GLOBAL_DEFAULT_TIMEOUT, source_address=None)</span>:</span></div><div class="line">    <span class="string">"""Connect to *address* and return the socket object.</span></div><div class="line"><span class="string">    and return the socket object.  </span></div><div class="line"><span class="string">    """</span></div><div class="line"></div><div class="line">    host, port = address</div><div class="line">    err = <span class="keyword">None</span></div><div class="line">    <span class="keyword">for</span> res <span class="keyword">in</span> getaddrinfo(host, port, <span class="number">0</span> <span class="keyword">if</span> has_ipv6 <span class="keyword">else</span> AF_INET, SOCK_STREAM):</div><div class="line">        af, socktype, proto, _, sa = res</div><div class="line">        sock = <span class="keyword">None</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            sock = socket(af, socktype, proto)</div><div class="line">            <span class="keyword">if</span> timeout <span class="keyword">is</span> <span class="keyword">not</span> _GLOBAL_DEFAULT_TIMEOUT:</div><div class="line">                sock.settimeout(timeout)</div><div class="line">            <span class="keyword">if</span> source_address:</div><div class="line">                sock.bind(source_address)</div><div class="line">            sock.connect(sa)</div><div class="line">            <span class="keyword">return</span> sock</div><div class="line">        <span class="keyword">except</span> error <span class="keyword">as</span> ex:</div><div class="line"><span class="comment"># ....</span></div></pre></td></tr></table></figure><p><code>_socket2.py</code> 中<code>socket</code>对象</p><p>实现gevent封装的socket对象，接口和python原始的socket一致。</p><ul><li><p><code>self._sock = _realsocket(family, type, proto)</code>创建一个real socket（python的socket对象）</p></li><li><p><code>self._sock.setblocking(0)</code>设置real socket为非阻塞的工作模式</p></li><li><p><code>self.hub = get_hub()</code>拿到gevent中的主协程greenlet对象，hub</p></li><li><p>设置两个监听事件，可读和可写事件监听</p><p> <code>self._read_event = io(fileno, 1)</code></p><p> <code>self._write_event = io(fileno, 2)</code></p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ----- gevent _socket2.py -----</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">socket</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line"><span class="string">    gevent `socket.socket &lt;https://docs.python.org/2/library/socket.html#socket-objects&gt;`_ for Python 2.</span></div><div class="line"><span class="string">    This object should have the same API as the standard library socket linked to above.</span></div><div class="line"><span class="string">    """</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, family=AF_INET, type=SOCK_STREAM, proto=<span class="number">0</span>, _sock=None)</span>:</span></div><div class="line">        <span class="keyword">if</span> _sock <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            self._sock = _realsocket(family, type, proto)</div><div class="line">            self.timeout = _socket.getdefaulttimeout()</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">if</span> hasattr(_sock, <span class="string">'_sock'</span>):</div><div class="line">                self._sock = _sock._sock</div><div class="line">                self.timeout = getattr(_sock, <span class="string">'timeout'</span>, <span class="keyword">False</span>)</div><div class="line">                <span class="keyword">if</span> self.timeout <span class="keyword">is</span> <span class="keyword">False</span>:</div><div class="line">                    self.timeout = _socket.getdefaulttimeout()</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                self._sock = _sock</div><div class="line">                self.timeout = _socket.getdefaulttimeout()</div><div class="line">        self._sock.setblocking(<span class="number">0</span>)</div><div class="line">        fileno = self._sock.fileno()</div><div class="line">        self.hub = get_hub()</div><div class="line">        io = self.hub.loop.io</div><div class="line">        self._read_event = io(fileno, <span class="number">1</span>)</div><div class="line">        self._write_event = io(fileno, <span class="number">2</span>)</div></pre></td></tr></table></figure></li></ul><p><strong>gevent socket对象的方法实现:</strong></p><p>打开pycharm的Structure导航窗口。</p><ul><li><p><code>connect</code></p><p>使用了非常巧妙的while循环，执行<code>result = sock.connect_ex(address)</code>进行socket连接，如果没有异常，则连接成功，跳出while。如果返回异常如连接未建立，缓冲区满等，则调用<code>self._wait(self._write_event)</code>等待socket变成可写状态(表示连接成功)，在继续while，等待期间协程交出运行权。</p><p>重点<code>socket._wait</code>,它调用了<code>self.hub.wait(watcher)</code>,实现阻塞当前的greenlet，等待对应的watcher就绪</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ----- gevent _socket2.py -----</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">socket</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">connect</span><span class="params">(self, address)</span>:</span></div><div class="line">    <span class="keyword">if</span> self.timeout == <span class="number">0.0</span>:</div><div class="line">      <span class="keyword">return</span> self._sock.connect(address)</div><div class="line">    sock = self._sock</div><div class="line">    <span class="keyword">if</span> isinstance(address, tuple):</div><div class="line">      r = getaddrinfo(address[<span class="number">0</span>], address[<span class="number">1</span>], sock.family)</div><div class="line">      address = r[<span class="number">0</span>][<span class="number">-1</span>]</div><div class="line">      <span class="keyword">if</span> self.timeout <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">        timer = Timeout.start_new(self.timeout, timeout(<span class="string">'timed out'</span>))</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">          timer = <span class="keyword">None</span></div><div class="line">          <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">              err = sock.getsockopt(SOL_SOCKET, SO_ERROR)</div><div class="line">              <span class="keyword">if</span> err:</div><div class="line">                <span class="keyword">raise</span> error(err, strerror(err))</div><div class="line">                result = sock.connect_ex(address)</div><div class="line">                <span class="keyword">if</span> <span class="keyword">not</span> result <span class="keyword">or</span> result == EISCONN:</div><div class="line">                  <span class="keyword">break</span></div><div class="line">                  <span class="keyword">elif</span> (result <span class="keyword">in</span> (EWOULDBLOCK, EINPROGRESS, EALREADY)) <span class="keyword">or</span> (result == EINVAL <span class="keyword">and</span> is_windows):</div><div class="line">                    self._wait(self._write_event)</div><div class="line">                    <span class="keyword">else</span>:</div><div class="line">                      <span class="keyword">raise</span> error(result, strerror(result))</div><div class="line">                      <span class="keyword">finally</span>:</div><div class="line">                        <span class="keyword">if</span> timer <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">                          timer.cancel()</div><div class="line">          </div><div class="line">          </div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">_wait</span><span class="params">(self, watcher, timeout_exc=timeout<span class="params">(<span class="string">'timed out'</span>)</span>)</span>:</span></div><div class="line">    <span class="string">"""Block the current greenlet until *watcher* has pending events."""</span></div><div class="line">    <span class="keyword">if</span> watcher.callback <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">      <span class="keyword">raise</span> _socketcommon.ConcurrentObjectUseError(<span class="string">'This socket is already used by another greenlet: %r'</span> % (watcher.callback, ))</div><div class="line">      <span class="keyword">if</span> self.timeout <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">        timeout = Timeout.start_new(self.timeout, timeout_exc, ref=<span class="keyword">False</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">          timeout = <span class="keyword">None</span></div><div class="line">          <span class="keyword">try</span>:</div><div class="line">            self.hub.wait(watcher)</div><div class="line">            <span class="keyword">finally</span>:</div><div class="line">              <span class="keyword">if</span> timeout <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">                timeout.cancel()</div></pre></td></tr></table></figure></li><li><p><code>send</code></p><p>首先拿到原生的<code>socket(self._sock)</code>,然后调用<code>socket.send</code>发送数据，因为socket是非阻塞的，所以会立即抛出异常 EWOULDBLOCK，然后调用  <code>self._wait(self._write_event)</code>, 等待可写事件发生后再次send数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ----- gevent _socket2.py -----</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">socket</span><span class="params">(object)</span>:</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(self, data, flags=<span class="number">0</span>, timeout=timeout_default)</span>:</span></div><div class="line">    sock = self._sock</div><div class="line">    <span class="keyword">if</span> timeout <span class="keyword">is</span> timeout_default:</div><div class="line">      timeout = self.timeout</div><div class="line">      <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">return</span> sock.send(data, flags)</div><div class="line">      <span class="keyword">except</span> error <span class="keyword">as</span> ex:</div><div class="line">        <span class="keyword">if</span> ex.args[<span class="number">0</span>] != EWOULDBLOCK <span class="keyword">or</span> timeout == <span class="number">0.0</span>:</div><div class="line">          <span class="keyword">raise</span></div><div class="line">          sys.exc_clear()</div><div class="line">          self._wait(self._write_event)</div><div class="line">          <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">return</span> sock.send(data, flags)</div><div class="line">          <span class="keyword">except</span> error <span class="keyword">as</span> ex2:</div><div class="line">            <span class="keyword">if</span> ex2.args[<span class="number">0</span>] == EWOULDBLOCK:</div><div class="line">              <span class="keyword">return</span> <span class="number">0</span></div><div class="line">            <span class="keyword">raise</span></div></pre></td></tr></table></figure></li><li><p><code>recv</code></p><p>send重试一次如果失败就会 return 0，而recv使用while循环，不停的尝试读数据，知道成功返回数据。</p><p>当有<code>EWOULDBLOCK</code>异常时，等待<code>self._wait(self._read_event)</code>可读事件发生，然后再次尝试读取数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ----- gevent _socket2.py -----</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">socket</span><span class="params">(object)</span>:</span>    </div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">recv</span><span class="params">(self, *args)</span>:</span></div><div class="line">        sock = self._sock  <span class="comment"># keeping the reference so that fd is not closed during waiting</span></div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                <span class="keyword">return</span> sock.recv(*args)</div><div class="line">            <span class="keyword">except</span> error <span class="keyword">as</span> ex:</div><div class="line">                <span class="keyword">if</span> ex.args[<span class="number">0</span>] != EWOULDBLOCK <span class="keyword">or</span> self.timeout == <span class="number">0.0</span>:</div><div class="line">                    <span class="keyword">raise</span></div><div class="line">                <span class="comment"># QQQ without clearing exc_info test__refcount.test_clean_exit fails</span></div><div class="line">                sys.exc_clear()</div><div class="line">            self._wait(self._read_event)</div></pre></td></tr></table></figure></li><li><p><code>accept</code></p><p>同样是while循环，当接收连接成功时跳出循环，然后创建一个gevent socket对象（<code>sockobj = socket(_sock=client_socket)</code>）并返回。如果发生异常则阻塞等待可读事件发生（<code>self._wait(self._read_event)</code>）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ----- gevent _socket2.py -----</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">socket</span><span class="params">(object)</span>:</span>    </div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">accept</span><span class="params">(self)</span>:</span></div><div class="line">    sock = self._sock</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">      <span class="keyword">try</span>:</div><div class="line">        client_socket, address = sock.accept()</div><div class="line">        <span class="keyword">break</span></div><div class="line">        <span class="keyword">except</span> error <span class="keyword">as</span> ex:</div><div class="line">          <span class="keyword">if</span> ex.args[<span class="number">0</span>] != EWOULDBLOCK <span class="keyword">or</span> self.timeout == <span class="number">0.0</span>:</div><div class="line">            <span class="keyword">raise</span></div><div class="line">            sys.exc_clear()</div><div class="line">            self._wait(self._read_event)</div><div class="line">            sockobj = socket(_sock=client_socket)</div><div class="line">            <span class="keyword">if</span> PYPY:</div><div class="line">              client_socket._drop()</div><div class="line">              <span class="keyword">return</span> sockobj, address</div></pre></td></tr></table></figure></li></ul><h3 id="gevent-server"><a href="#gevent-server" class="headerlink" title="gevent server"></a>gevent server</h3><ul><li>BaseServer为服务器端实现了一些基础功能的抽象基类</li><li>StreamServer实现了通用TCPServer，在监听端口上接受新连接并为每个连接创建一个协程，协程函数是用户提供的。</li><li>分析Select，Poll部分的实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</div><div class="line"><span class="keyword">from</span> gevent.server <span class="keyword">import</span> StreamServer</div><div class="line">monkey.patch_all()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">handler</span><span class="params">(sock, addr)</span>:</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        data = sock.recv(<span class="number">1024</span>)</div><div class="line">        <span class="keyword">if</span> data:</div><div class="line">            <span class="keyword">print</span> data</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">print</span> addr, <span class="string">'closed!'</span></div><div class="line">            <span class="keyword">return</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    server = StreamServer((<span class="string">'localhost'</span>, <span class="number">12222</span>), handler)</div><div class="line">    server.serve_forever()</div></pre></td></tr></table></figure><h4 id="StreamServer"><a href="#StreamServer" class="headerlink" title="StreamServer"></a>StreamServer</h4><p>从StreamServer对象入手，其doc文档表明，这是一个通用的TCP Server，从监听的sock里接收连接，然后根据用户提供的handle回调函数spawn（生成，创建并运行greenlet）出协程。handle回调函数接收两个对象，socket连接和客户端地址。</p><p>backlog为服务器最大接收的连接数，默认为256. 只有服务器初始化，新创建socket时才需要在init里传入此参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ---- gevent server.py ------</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StreamServer</span><span class="params">(BaseServer)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line"><span class="string">    A generic TCP server.</span></div><div class="line"><span class="string">    Accepts connections on a listening socket and spawns user-provided</span></div><div class="line"><span class="string">    *handle* function for each connection with 2 arguments: the client</span></div><div class="line"><span class="string">    socket and the client address.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">    """</span></div><div class="line">    <span class="comment"># the default backlog to use if none was provided in __init__</span></div><div class="line">    backlog = <span class="number">256</span></div><div class="line"></div><div class="line">    reuse_addr = DEFAULT_REUSE_ADDR</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, listener, handle=None, backlog=None, spawn=<span class="string">'default'</span>, **ssl_args)</span>:</span></div><div class="line">        BaseServer.__init__(self, listener, handle=handle, spawn=spawn)</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">if</span> ssl_args:</div><div class="line">                <span class="comment"># 初始化ssl参数</span></div><div class="line">            <span class="keyword">if</span> backlog <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">                <span class="keyword">if</span> hasattr(self, <span class="string">'socket'</span>):</div><div class="line">                    <span class="keyword">raise</span> TypeError(<span class="string">'backlog must be None when a socket instance is passed'</span>)</div><div class="line">                self.backlog = backlog</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            self.close()</div><div class="line">            <span class="keyword">raise</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_listener</span><span class="params">(self, listener)</span>:</span></div><div class="line">        BaseServer.set_listener(self, listener)</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            self.socket = self.socket._sock</div><div class="line">        <span class="keyword">except</span> AttributeError:</div><div class="line">            <span class="keyword">pass</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init_socket</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(self, <span class="string">'socket'</span>):</div><div class="line">            self.socket = self.get_listener(self.address, self.backlog, self.family)</div><div class="line">            self.address = self.socket.getsockname()</div><div class="line">        <span class="keyword">if</span> self.ssl_args: <span class="comment"># 封装支持ssl socket的handle函数</span></div><div class="line">            self._handle = self.wrap_socket_and_handle</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self._handle = self.handle</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">if</span> PY3:</div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">do_read</span><span class="params">(self)</span>:</span></div><div class="line">            <span class="comment"># 。。。</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line"><span class="comment"># 针对python2的 do_read函数</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">do_read</span><span class="params">(self)</span>:</span></div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                client_socket, address = self.socket.accept()</div><div class="line">            <span class="keyword">except</span> _socket.error <span class="keyword">as</span> err:</div><div class="line">                <span class="keyword">if</span> err.args[<span class="number">0</span>] == EWOULDBLOCK:</div><div class="line">                    <span class="keyword">return</span></div><div class="line">                <span class="keyword">raise</span></div><div class="line">            sockobj = socket(_sock=client_socket)</div><div class="line">            <span class="keyword">if</span> PYPY:</div><div class="line">                client_socket._drop()</div><div class="line">            <span class="keyword">return</span> sockobj, address</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_close</span><span class="params">(self, sock, *args)</span>:</span></div><div class="line">        sock.close()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrap_socket_and_handle</span><span class="params">(self, client_socket, address)</span>:</span></div><div class="line">        <span class="comment"># used in case of ssl sockets</span></div><div class="line">        ssl_socket = self.wrap_socket(client_socket, **self.ssl_args)</div><div class="line">        <span class="keyword">return</span> self.handle(ssl_socket, address)</div></pre></td></tr></table></figure><p><code>BaseServer.__init__</code> 主要是初始化listener，spawn，handle， loop。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#   -----  BaseServer.__init__    ----</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, listener, handle=None, spawn=<span class="string">'default'</span>)</span>:</span></div><div class="line">        self._stop_event = Event()</div><div class="line">        self._stop_event.set()</div><div class="line">        self._watcher = <span class="keyword">None</span></div><div class="line">        self._timer = <span class="keyword">None</span></div><div class="line">        self._handle = <span class="keyword">None</span></div><div class="line">        self.pool = <span class="keyword">None</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            self.set_listener(listener)</div><div class="line">            self.set_spawn(spawn)</div><div class="line">            self.set_handle(handle)</div><div class="line">            self.delay = self.min_delay</div><div class="line">            self.loop = get_hub().loop</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            self.close()</div><div class="line">            <span class="keyword">raise</span></div></pre></td></tr></table></figure><p><code>server_forever()</code> 是基类BaseServer里提供的方法，如果server没有启动，则启动(start方法)并ready for 接收数据，直至停止。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#   ----- baseserver.py  BaseServer    ----</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">serve_forever</span><span class="params">(self, stop_timeout=None)</span>:</span></div><div class="line">        <span class="string">"""Start the server if it hasn't been already started and wait until it's stopped."""</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.started:</div><div class="line">            self.start()</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            self._stop_event.wait()</div><div class="line">        <span class="keyword">finally</span>:</div><div class="line">            Greenlet.spawn(self.stop, timeout=stop_timeout).join()</div><div class="line">            </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></div><div class="line">        self.init_socket()</div><div class="line">        self._stop_event.clear()</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            self.start_accepting()</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            self.close()</div><div class="line">            <span class="keyword">raise</span></div><div class="line">            </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_accepting</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self._watcher <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            self._watcher = self.loop.io(self.socket.fileno(), <span class="number">1</span>)</div><div class="line">            self._watcher.start(self._do_read)</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_do_read</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> xrange(self.max_accept):</div><div class="line">            <span class="keyword">if</span> self.full():</div><div class="line">                self.stop_accepting()</div><div class="line">                <span class="keyword">return</span></div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                args = self.do_read()</div><div class="line">                self.delay = self.min_delay</div><div class="line">                <span class="keyword">if</span> <span class="keyword">not</span> args:</div><div class="line">                    <span class="keyword">return</span></div><div class="line">            <span class="keyword">except</span>:</div><div class="line">                <span class="comment"># 。。。。</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">try</span>:</div><div class="line">                    self.do_handle(*args)</div><div class="line">                <span class="keyword">except</span>:</div><div class="line">                    self.loop.handle_error((args[<span class="number">1</span>:], self), *sys.exc_info())</div><div class="line">                    <span class="keyword">if</span> self.delay &gt;= <span class="number">0</span>:</div><div class="line">                        self.stop_accepting()</div><div class="line">                        self._timer = self.loop.timer(self.delay)</div><div class="line">                        self._timer.start(self._start_accepting_if_started)</div><div class="line">                        self.delay = min(self.max_delay, self.delay * <span class="number">2</span>)</div><div class="line">                    <span class="keyword">break</span>        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_read</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">raise</span> NotImplementedError()</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_handle</span><span class="params">(self, *args)</span>:</span></div><div class="line">        spawn = self._spawn</div><div class="line">        handle = self._handle</div><div class="line">        close = self.do_close</div><div class="line"></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">if</span> spawn <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">                _handle_and_close_when_done(handle, close, args)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                spawn(_handle_and_close_when_done, handle, close, args)</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            close(*args)</div><div class="line">            <span class="keyword">raise</span></div></pre></td></tr></table></figure><ul><li><p><code>start()</code>方法 </p><p>首先<code>self.init_socket()</code>初始化socket，用clear将<code>self._stop_event</code>停止事件设为false状态，然后调用<code>self.start_accepting()</code> 接收连接请求。</p><ul><li><p><code>init_socket()</code></p><p>init_socket由继承BaseServer的StreamServer实现,主要是获取socket和address，然后绑定handle方法，如果是ssl，则要先对handle方法进行ssl支持的封装。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># --- server.py StreamServer ---- </span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_socket</span><span class="params">(self)</span>:</span></div><div class="line">      <span class="keyword">if</span> <span class="keyword">not</span> hasattr(self, <span class="string">'socket'</span>):</div><div class="line">          self.socket = self.get_listener(self.address, self.backlog, self.family)</div><div class="line">          self.address = self.socket.getsockname()</div><div class="line">      <span class="keyword">if</span> self.ssl_args:</div><div class="line">          self._handle = self.wrap_socket_and_handle</div><div class="line">      <span class="keyword">else</span>:</div><div class="line">          self._handle = self.handle</div></pre></td></tr></table></figure><ul><li><p><code>self.start_accepting()</code></p><ol><li><p>设置一个watcher进行事件监听，watcher绑定了<code>_do_read()</code>方法</p></li><li><p><code>_do_read()</code>： 如果达到最大连接数，停止接收新连接，</p></li><li><p>否则执行<code>do_read()</code>方法</p><p><code>do_read()</code>由子类实现，在<code>StreamServer</code>中的实现如下，就是通过<code>self.socket.accept()</code>获取socket连接对象，并返回gevent socket对象和客户端地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># server.py  StreamServer</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_read</span><span class="params">(self)</span>:</span></div><div class="line">  <span class="keyword">try</span>:</div><div class="line">    client_socket, address = self.socket.accept()</div><div class="line">    <span class="keyword">except</span> _socket.error <span class="keyword">as</span> err:</div><div class="line">      <span class="keyword">if</span> err.args[<span class="number">0</span>] == EWOULDBLOCK:</div><div class="line">        <span class="keyword">return</span></div><div class="line">      <span class="keyword">raise</span></div><div class="line">      sockobj = socket(_sock=client_socket)</div><div class="line">      <span class="keyword">if</span> PYPY:</div><div class="line">        client_socket._drop()</div><div class="line">        <span class="keyword">return</span> sockobj, address</div></pre></td></tr></table></figure><p>​</p></li><li><p>然后执行<code>self.do_handle(*args)</code>方法</p></li><li><p><code>self.do_handle(*args)</code>方法调用的是<code>_handle_and_close_when_done</code>,这是个函数，不是类方法</p></li><li><p><code>_handle_and_close_when_done</code> 函数主要是执行handle，并调用close关闭handle。</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#   ----- baseserver.py  BaseServer    ----</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_handle_and_close_when_done</span><span class="params">(handle, close, args_tuple)</span>:</span> <span class="comment"># 6</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">      <span class="keyword">return</span> handle(*args_tuple)</div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">      close(*args_tuple)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseServer</span><span class="params">(object)</span>:</span>      </div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">start_accepting</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self._watcher <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            self._watcher = self.loop.io(self.socket.fileno(), <span class="number">1</span>)</div><div class="line">            self._watcher.start(self._do_read)  <span class="comment"># 1</span></div><div class="line">      </div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">_do_read</span><span class="params">(self)</span>:</span> <span class="comment"># 1</span></div><div class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> xrange(self.max_accept):</div><div class="line">            <span class="keyword">if</span> self.full():</div><div class="line">                self.stop_accepting()  <span class="comment"># 2</span></div><div class="line">                <span class="keyword">return</span></div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                args = self.do_read() <span class="comment"># 3</span></div><div class="line">                self.delay = self.min_delay</div><div class="line">                <span class="keyword">if</span> <span class="keyword">not</span> args:</div><div class="line">                    <span class="keyword">return</span></div><div class="line">            <span class="keyword">except</span>:</div><div class="line">                self.loop.handle_error(self, *sys.exc_info())</div><div class="line">                ex = sys.exc_info()[<span class="number">1</span>]</div><div class="line">                <span class="keyword">if</span> self.is_fatal_error(ex):</div><div class="line">                    self.close()</div><div class="line">                    sys.stderr.write(<span class="string">'ERROR: %s failed with %s\n'</span> % (self, str(ex) <span class="keyword">or</span> repr(ex)))</div><div class="line">                    <span class="keyword">return</span></div><div class="line">                <span class="keyword">if</span> self.delay &gt;= <span class="number">0</span>:</div><div class="line">                    self.stop_accepting()</div><div class="line">                    self._timer = self.loop.timer(self.delay)</div><div class="line">                    self._timer.start(self._start_accepting_if_started)</div><div class="line">                    self.delay = min(self.max_delay, self.delay * <span class="number">2</span>)</div><div class="line">                <span class="keyword">break</span></div><div class="line">            <span class="keyword">else</span>: <span class="comment"># 4</span></div><div class="line">                <span class="keyword">try</span>:</div><div class="line">                    self.do_handle(*args) <span class="comment"># 4</span></div><div class="line">                <span class="keyword">except</span>:</div><div class="line">                    self.loop.handle_error((args[<span class="number">1</span>:], self), *sys.exc_info())</div><div class="line">                    <span class="keyword">if</span> self.delay &gt;= <span class="number">0</span>:</div><div class="line">                        self.stop_accepting()</div><div class="line">                        self._timer = self.loop.timer(self.delay)</div><div class="line">                        self._timer.start(self._start_accepting_if_started)</div><div class="line">                        self.delay = min(self.max_delay, self.delay * <span class="number">2</span>)</div><div class="line">                    <span class="keyword">break</span></div><div class="line">                    </div><div class="line">   <span class="function"><span class="keyword">def</span> <span class="title">do_handle</span><span class="params">(self, *args)</span>:</span> <span class="comment"># 4</span></div><div class="line">        spawn = self._spawn</div><div class="line">        handle = self._handle</div><div class="line">        close = self.do_close</div><div class="line"></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">if</span> spawn <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">                _handle_and_close_when_done(handle, close, args) <span class="comment"># 5</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                spawn(_handle_and_close_when_done, handle, close, args) <span class="comment"># 5</span></div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            close(*args)</div><div class="line">            <span class="keyword">raise</span></div></pre></td></tr></table></figure><p>​</p></li></ul><p>​</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Gevent-源码分析&quot;&gt;&lt;a href=&quot;#Gevent-源码分析&quot; class=&quot;headerlink&quot; title=&quot;Gevent 源码分析&quot;&gt;&lt;/a&gt;Gevent 源码分析&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;gevent包括2个重要的部分，libev
      
    
    </summary>
    
      <category term="技术" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="并发编程" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
      <category term="Gevent" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/Gevent/"/>
    
    
      <category term="gevent" scheme="http://shuaiyy.cn/tags/gevent/"/>
    
  </entry>
  
  <entry>
    <title>Gevent 实现网络爬虫</title>
    <link href="http://shuaiyy.cn/2017/11/04/%E6%8A%80%E6%9C%AF/Gevent%E7%88%AC%E8%99%AB%E4%B8%8E%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%88%AC%E8%99%AB%E5%AF%B9%E6%AF%94/"/>
    <id>http://shuaiyy.cn/2017/11/04/技术/Gevent爬虫与多线程爬虫对比/</id>
    <published>2017-11-03T16:00:00.000Z</published>
    <updated>2017-11-07T09:14:35.169Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Gevent爬虫与多线程爬虫对比"><a href="#Gevent爬虫与多线程爬虫对比" class="headerlink" title="Gevent爬虫与多线程爬虫对比"></a>Gevent爬虫与多线程爬虫对比</h2><h3 id="爬虫通用网页解析模块"><a href="#爬虫通用网页解析模块" class="headerlink" title="爬虫通用网页解析模块"></a>爬虫通用网页解析模块</h3><ul><li>网页字符集检测</li><li>根据指定规则解析数据</li><li>url处理子模块<ul><li>能够抽取页面中所有的url以供后续爬取</li><li>抽取的url过滤处理，如图片，文件等url肯定不需要递归爬取</li><li>抽取的url分类http 和 https</li><li>判断url中是否有非法字符</li></ul></li></ul><h3 id="Gevent爬虫"><a href="#Gevent爬虫" class="headerlink" title="Gevent爬虫"></a>Gevent爬虫</h3><ul><li><p>每个任务是一个url object，存储url，页面深度等信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UrlObject</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, url, depth)</span>:</span></div><div class="line">        self.url = url</div><div class="line">        self.depth = depth</div></pre></td></tr></table></figure></li><li><p>使用greenlet来执行下载网页、解析内容、feed url的任务,任务从队列里获取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handler</span><span class="params">(Greenlet)</span>:</span></div><div class="line">  <span class="comment"># urlObj：任务对象；spider爬虫对象；setting爬虫的设置信息</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, urlObj, spider, settings)</span>:</span></div><div class="line">        super(Handler, self).__init__()</div><div class="line">        self.url_obj = urlObj</div><div class="line">        self.spider = spider</div><div class="line">        self.settings = settings</div><div class="line"></div><div class="line">    <span class="comment"># 下载html</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">(self, url)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">u'开始下载：'</span>, url</div><div class="line">        res = requests.get(url)</div><div class="line">        text = res.text</div><div class="line">        <span class="keyword">print</span> <span class="string">u'下载完成！'</span></div><div class="line">        <span class="keyword">return</span>  text</div><div class="line"></div><div class="line">    <span class="comment"># 从html中发掘新的任务url</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">feed</span><span class="params">(self, html)</span>:</span></div><div class="line">        soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</div><div class="line">        urls = [i.get(<span class="string">'href'</span>) <span class="keyword">for</span> i <span class="keyword">in</span> soup.select(<span class="string">'a[href^="http"]'</span>)]</div><div class="line">        <span class="keyword">return</span> urls</div><div class="line"></div><div class="line">    <span class="comment"># 从Html中提取数据</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_html</span><span class="params">(self, html)</span>:</span></div><div class="line">        soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</div><div class="line">        title = soup.find(<span class="string">'title'</span>)</div><div class="line">        <span class="keyword">print</span> title.text <span class="keyword">if</span> title <span class="keyword">else</span> <span class="string">''</span></div><div class="line">        <span class="comment"># 处理文本也可以用greenlet对象</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hash(self.url_obj.url) <span class="keyword">in</span> self.spider.finished_set:</div><div class="line">            <span class="comment"># 如果没下载过该网页，则下载，并处理</span></div><div class="line">            html = self.download(self.url_obj.url)</div><div class="line">            <span class="comment"># 加入已处理的集合</span></div><div class="line">            self.parse_html(html)</div><div class="line">            self.spider.finished_set.add(hash(self.url_obj.url))</div><div class="line">            <span class="comment"># 页面深度+1</span></div><div class="line">            depth = self.url_obj.depth + <span class="number">1</span></div><div class="line">            <span class="comment"># 发现新的url任务,如果没被执行就加入到任务队列</span></div><div class="line">            <span class="keyword">for</span> url <span class="keyword">in</span> self.feed(html):</div><div class="line">                <span class="keyword">if</span> <span class="keyword">not</span> hash(url) <span class="keyword">in</span> self.spider.finished_set:</div><div class="line">                    url_obj = UrlObject(url, depth)</div><div class="line">                    self.spider.queue.put(url_obj)</div></pre></td></tr></table></figure></li><li><p>pool控制greenlet的并发</p></li><li><p>使用threading的Timer计时器来控制主线程，当计时结束，结束爬虫。 </p><p><code>pool.join()</code> 等待pool里的greenlet结束。</p><p><code>timer.cancel</code> 跳出spider调度的主循环的条件</p></li><li><p>任务调度的主循环内，判断timer的状态，如果timer是激活状态，则执行任务。否则跳出循环，程序结束。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GeventSpider</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, root_url, max_depth=<span class="number">5</span>, max_count=<span class="number">100</span>, concurrancy=<span class="number">5</span>, live_time=<span class="number">60</span>*<span class="number">12</span>)</span>:</span></div><div class="line">        monkey.patch_all()</div><div class="line">        self.setting = dict(zip([<span class="string">'root_url'</span>, <span class="string">'max_depth'</span>, <span class="string">'max_count'</span>, <span class="string">'concurrancy'</span>, <span class="string">'live_time'</span>],</div><div class="line">                                [root_url, max_depth, max_count, concurrancy, live_time]))</div><div class="line">        self.queue = Queue()</div><div class="line">        self.pool = Pool(concurrancy)</div><div class="line">        self.timer = Timer(live_time, self.stop_spider)</div><div class="line">        self.finished_set = set()</div><div class="line">        <span class="comment"># 将种子任务添加到队列</span></div><div class="line">        self.queue.put(UrlObject(root_url, <span class="number">0</span>))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stop_spider</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="comment"># 将timer取消，则 _run_loop就会跳出循环，主线程结束</span></div><div class="line">        self.timer.cancel()</div><div class="line">        <span class="comment"># 等待协程池里的所有greenlet结束后，程序结束</span></div><div class="line">        self.pool.join()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        self.timer.start()</div><div class="line">        self._run_loop()</div><div class="line"></div><div class="line">    <span class="comment"># 任务执行部分</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_run_loop</span><span class="params">(self)</span>:</span></div><div class="line">        page_count = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> self.timer.is_alive():</div><div class="line">            <span class="comment"># 从pool中踢出执行完毕的greenlet</span></div><div class="line">            <span class="keyword">for</span> greenlet <span class="keyword">in</span> list(self.pool):</div><div class="line">                <span class="keyword">if</span> greenlet.dead:</div><div class="line">                    self.pool.discard(greenlet)</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                url_obj = self.queue.get(timeout=<span class="number">5</span>)</div><div class="line">            <span class="keyword">except</span> Empty:</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            <span class="comment"># 创建执行下载任务的greenlet对象</span></div><div class="line">            <span class="comment"># 这里传入的spider对象为self自己</span></div><div class="line">            self.pool.start(Handler(url_obj, self, self.setting))</div><div class="line">            <span class="comment"># 爬取数量+1，如果超过所需结果，则调用stop</span></div><div class="line">            page_count += <span class="number">1</span></div><div class="line">            <span class="keyword">print</span> <span class="string">'已下载%d个网页'</span> %page_count</div><div class="line">            <span class="keyword">if</span> page_count &gt;= self.setting[<span class="string">'max_count'</span>]:</div><div class="line">                <span class="keyword">print</span> <span class="string">u'下载网页数量达到最大值'</span></div><div class="line">                self.stop_spider()</div></pre></td></tr></table></figure></li></ul><p><strong>完整代码：</strong></p><ul><li>requests库不是异步的，因此monkey patch 前后的执行时间分别为44s和11s。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="comment"># @File  : gspider.py</span></div><div class="line"><span class="comment"># @Author: Shuaiyy</span></div><div class="line"><span class="comment"># @Date  : 2017/10/31 15:45</span></div><div class="line"><span class="comment"># @Desc  : </span></div><div class="line"></div><div class="line"><span class="keyword">import</span> gevent</div><div class="line"><span class="keyword">from</span> gevent.queue <span class="keyword">import</span> Queue, Empty</div><div class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey, Greenlet</div><div class="line"><span class="keyword">from</span> gevent.pool <span class="keyword">import</span> Pool</div><div class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Timer</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UrlObject</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, url, depth)</span>:</span></div><div class="line">        self.url = url</div><div class="line">        self.depth = depth</div><div class="line"></div><div class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Handler</span><span class="params">(Greenlet)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, urlObj, spider, settings)</span>:</span></div><div class="line">        super(Handler, self).__init__()</div><div class="line">        self.url_obj = urlObj</div><div class="line">        self.spider = spider</div><div class="line">        self.settings = settings</div><div class="line"></div><div class="line">    <span class="comment"># 下载html</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">(self, url)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">u'开始下载：'</span>, url</div><div class="line">        res = requests.get(url)</div><div class="line">        text = res.text</div><div class="line">        <span class="keyword">print</span> <span class="string">u'下载完成！'</span></div><div class="line">        <span class="keyword">return</span>  text</div><div class="line"></div><div class="line">    <span class="comment"># 从html中发掘新的任务url</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">feed</span><span class="params">(self, html)</span>:</span></div><div class="line">        soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</div><div class="line">        urls = [i.get(<span class="string">'href'</span>) <span class="keyword">for</span> i <span class="keyword">in</span> soup.select(<span class="string">'a[href^="http"]'</span>)]</div><div class="line">        <span class="keyword">return</span> urls</div><div class="line"></div><div class="line">    <span class="comment"># 从Html中提取数据</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_html</span><span class="params">(self, html)</span>:</span></div><div class="line">        soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</div><div class="line">        title = soup.find(<span class="string">'title'</span>)</div><div class="line">        <span class="keyword">print</span> title.text <span class="keyword">if</span> title <span class="keyword">else</span> <span class="string">''</span></div><div class="line">        <span class="comment"># 处理文本也可以用greenlet对象</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hash(self.url_obj.url) <span class="keyword">in</span> self.spider.finished_set:</div><div class="line">            <span class="comment"># 如果没下载过该网页，则下载，并处理</span></div><div class="line">            html = self.download(self.url_obj.url)</div><div class="line">            <span class="comment"># 加入已处理的集合</span></div><div class="line">            self.parse_html(html)</div><div class="line">            self.spider.finished_set.add(hash(self.url_obj.url))</div><div class="line">            <span class="comment"># 页面深度+1</span></div><div class="line">            depth = self.url_obj.depth + <span class="number">1</span></div><div class="line">            <span class="comment"># 发现新的url任务,如果没被执行就加入到任务队列</span></div><div class="line">            <span class="keyword">for</span> url <span class="keyword">in</span> self.feed(html):</div><div class="line">                <span class="keyword">if</span> <span class="keyword">not</span> hash(url) <span class="keyword">in</span> self.spider.finished_set:</div><div class="line">                    url_obj = UrlObject(url, depth)</div><div class="line">                    self.spider.queue.put(url_obj)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GeventSpider</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, root_url, max_depth=<span class="number">5</span>, max_count=<span class="number">100</span>, concurrancy=<span class="number">5</span>, live_time=<span class="number">60</span>*<span class="number">12</span>)</span>:</span></div><div class="line">        monkey.patch_all()</div><div class="line">        self.setting = dict(zip([<span class="string">'root_url'</span>, <span class="string">'max_depth'</span>, <span class="string">'max_count'</span>, <span class="string">'concurrancy'</span>, <span class="string">'live_time'</span>],</div><div class="line">                                [root_url, max_depth, max_count, concurrancy, live_time]))</div><div class="line">        self.queue = Queue()</div><div class="line">        self.pool = Pool(concurrancy)</div><div class="line">        self.timer = Timer(live_time, self.stop_spider)</div><div class="line">        self.finished_set = set()</div><div class="line">        <span class="comment"># 将种子任务添加到队列</span></div><div class="line">        self.queue.put(UrlObject(root_url, <span class="number">0</span>))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stop_spider</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="comment"># 将timer取消，则 _run_loop就会跳出循环，主线程结束</span></div><div class="line">        self.timer.cancel()</div><div class="line">        <span class="comment"># 等待协程池里的所有greenlet结束后，程序结束</span></div><div class="line">        self.pool.join()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        self.timer.start()</div><div class="line">        self._run_loop()</div><div class="line"></div><div class="line">    <span class="comment"># 任务执行部分</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_run_loop</span><span class="params">(self)</span>:</span></div><div class="line">        page_count = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> self.timer.is_alive():</div><div class="line">            <span class="comment"># 从pool中踢出执行完毕的greenlet</span></div><div class="line">            <span class="keyword">for</span> greenlet <span class="keyword">in</span> list(self.pool):</div><div class="line">                <span class="keyword">if</span> greenlet.dead:</div><div class="line">                    self.pool.discard(greenlet)</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                url_obj = self.queue.get(timeout=<span class="number">5</span>)</div><div class="line">            <span class="keyword">except</span> Empty:</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            <span class="comment"># 创建执行下载任务的greenlet对象</span></div><div class="line">            <span class="comment"># 这里传入的spider对象为self自己</span></div><div class="line">            self.pool.start(Handler(url_obj, self, self.setting))</div><div class="line">            <span class="comment"># 爬取数量+1，如果超过所需结果，则调用stop</span></div><div class="line">            page_count += <span class="number">1</span></div><div class="line">            <span class="keyword">print</span> <span class="string">'已下载%d个网页'</span> %page_count</div><div class="line">            <span class="keyword">if</span> page_count &gt;= self.setting[<span class="string">'max_count'</span>]:</div><div class="line">                <span class="keyword">print</span> <span class="string">u'下载网页数量达到最大值'</span></div><div class="line">                self.stop_spider()</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySpider</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, max_depth, max_count, root_url)</span>:</span></div><div class="line">        self.spider = GeventSpider(max_dept</div><div class="line">                                   h=max_depth,</div><div class="line">                                   max_count=max_count,</div><div class="line">                                   root_url=root_url)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        self.spider.run()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    root_url = <span class="string">'http://www.csdn.com'</span></div><div class="line">    max_depth, max_count = <span class="number">3</span>, <span class="number">100</span></div><div class="line">    <span class="keyword">import</span> time</div><div class="line">    t1 = time.time()</div><div class="line">    MySpider(max_depth, max_count, root_url).run()</div><div class="line">    <span class="keyword">print</span> time.time() - t1</div><div class="line">    <span class="comment"># 44.4679999352</span></div><div class="line">    <span class="comment"># 11.4879999161</span></div></pre></td></tr></table></figure><h3 id="多线程爬虫"><a href="#多线程爬虫" class="headerlink" title="多线程爬虫"></a>多线程爬虫</h3><p>基本逻辑：不停的往任务队列里添加url任务，从队列取出任务，创建任务线程添加到线程池，将完成的任务线程从线程池移除。根据条件控制线程并发，停止。注意多线程的同步锁问题。</p><ul><li><p>多线程必须要考虑同步的问题，要使用Lock</p></li><li><p>python 内置的线程池没有实现pool，可以使用第三方的threadpool或者自己实现</p><p>计算pool的长度，往pool里添加线程，从队列里移除线程时，必须加锁</p></li><li><p>检查url是否重复时，需要lock</p></li><li><p>python的Queue对象是线程安全的，向队列里添加，获取任务无需加锁。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 爬虫主线程</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadSpider</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, max_depth, max_count, root_url)</span>:</span></div><div class="line">        self.strategy = Strategy(max_depth, max_count)</div><div class="line">        self.queue = Queue() <span class="comment"># 任务队列</span></div><div class="line">        self.url_set = set() <span class="comment"># url去重的集合</span></div><div class="line">        self.handler_num = <span class="number">0</span></div><div class="line">        self.lock = Lock()</div><div class="line">        self.thread_lock = Lock()</div><div class="line">        self.thread_pool = &#123;&#125;</div><div class="line">        self.thread_id = <span class="number">0</span></div><div class="line">        self.is_stop = <span class="keyword">False</span> <span class="comment"># 停止爬虫</span></div><div class="line">        self.thread_num = <span class="number">0</span></div><div class="line">        self.currency_limit = <span class="keyword">False</span> <span class="comment"># 停止往pool里添加线程</span></div><div class="line">        self.last_data = <span class="keyword">None</span></div><div class="line">        obj = UrlObject(root_url, <span class="number">0</span>)</div><div class="line">        self.put(obj)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, obj)</span>:</span> <span class="comment"># 添加任务前，判断去重</span></div><div class="line">        hash_val = hash(obj.url)</div><div class="line">        self.lock.acquire()</div><div class="line">        res = hash_val <span class="keyword">in</span> self.url_set <span class="comment"># 操作集合时加锁</span></div><div class="line">        self.lock.release()</div><div class="line">        <span class="keyword">if</span> res:</div><div class="line">            <span class="keyword">return</span></div><div class="line">        self.url_set.add(hash_val)</div><div class="line">        self.queue.put(obj)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_run_loop</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            <span class="keyword">if</span> self.is_stop:</div><div class="line">                time.sleep(<span class="number">1</span>)</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            <span class="keyword">if</span> self.currency_limit: <span class="comment"># 如果达到并发上限，则线程sleep 1s后在判断pool是否已满</span></div><div class="line">                time.sleep(<span class="number">1</span>)</div><div class="line">                self.thread_lock.acquire() <span class="comment"># 操作pool要上锁</span></div><div class="line">                self.thread_num = len(self.thread_pool)</div><div class="line">                <span class="keyword">if</span> self.thread_num == self.strategy.concurrency:</div><div class="line">                    self.thread_lock.release()</div><div class="line">                    <span class="keyword">continue</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    self.currency_limit = <span class="keyword">False</span></div><div class="line">                self.thread_lock.release()</div><div class="line">            <span class="keyword">else</span>: <span class="comment"># 没有达到并发上限，则从队列获取任务，创建新的子线程</span></div><div class="line">                <span class="keyword">try</span>:</div><div class="line">                    url = self.queue.get()</div><div class="line">                <span class="keyword">except</span>:</div><div class="line">                    <span class="keyword">continue</span></div><div class="line">            <span class="comment"># 创建任务子线程，并发子线程对象放入pool队列里</span></div><div class="line">            self.thread_id = self.thread_id+<span class="number">1</span></div><div class="line">            thd = Handler(url, self, self.thread_id)</div><div class="line"></div><div class="line">            self.thread_lock.acquire()</div><div class="line">            self.thread_pool[self.thread_id] = thd</div><div class="line">            <span class="comment"># 判断pool是否已满</span></div><div class="line">            <span class="keyword">if</span> len(self.thread_pool) == self.strategy.concurrency:</div><div class="line">                self.currency_limit = <span class="keyword">True</span></div><div class="line">            self.thread_lock.release()</div><div class="line">           </div><div class="line">            self.thread_num = self.thread_num+<span class="number">1</span></div><div class="line">            <span class="keyword">print</span> <span class="string">"add thread "</span>, self.thread_id</div><div class="line"></div><div class="line">            thd.start() <span class="comment"># 运行线程</span></div><div class="line">            self.handler_num = self.handler_num+<span class="number">1</span></div><div class="line">            <span class="keyword">if</span> self.strategy.max_count &lt;= self.handler_num:</div><div class="line">                <span class="keyword">print</span> <span class="string">"handler num %d is full so stop "</span> % self.handler_num</div><div class="line">                self.is_stop = <span class="keyword">True</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove_thread</span><span class="params">(self, thd_id)</span>:</span> <span class="comment"># 当任务线程执行完毕时，调用该方法</span></div><div class="line">        self.thread_lock.acquire()</div><div class="line">        <span class="keyword">if</span> thd_id <span class="keyword">in</span> self.thread_pool:</div><div class="line">            <span class="keyword">del</span> self.thread_pool[thd_id]</div><div class="line">            <span class="keyword">print</span> <span class="string">"del threadid "</span>, thd_id</div><div class="line">        self.thread_lock.release()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        self._run_loop()</div><div class="line"></div><div class="line"><span class="comment"># 执行下载任务的线程对象</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handler</span><span class="params">(Thread)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, urlobj, spider, thd_id)</span>:</span></div><div class="line">        Thread.__init__(self)</div><div class="line">        <span class="keyword">print</span> <span class="string">"begin thread %d with url %s"</span> %(thd_id, urlobj.url)</div><div class="line">        self.urlobj= urlobj</div><div class="line">        self.spider = spider</div><div class="line">        self.thread_id = thd_id</div><div class="line">        self.charset = <span class="string">"utf-8"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">try</span> :</div><div class="line">            html = self.open(self.urlobj.url)</div><div class="line">        <span class="keyword">except</span> Exception,why:</div><div class="line">            <span class="keyword">return</span></div><div class="line">        depth = self.urlobj.depth + <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> depth &gt; self.spider.strategy.max_depth:</div><div class="line">            <span class="keyword">return</span></div><div class="line">        <span class="comment"># 生成新的任务放入任务队列</span></div><div class="line">        <span class="keyword">for</span> link <span class="keyword">in</span> self.feed(html):</div><div class="line">            <span class="keyword">if</span> hash(link) <span class="keyword">in</span> self.spider.url_set:</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            url = UrlObject(link, depth)</div><div class="line">            self.spider.put(url)</div><div class="line">        <span class="comment"># 任务线程到此结束，调用从pool移除线程的方法</span></div><div class="line">        self.spider.remove_thread(self.thread_id)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open</span><span class="params">(self, url)</span>:</span></div><div class="line">        <span class="string">'''下载，处理网页'''</span></div><div class="line">        <span class="keyword">return</span> resp.text</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">feed</span><span class="params">(self, html)</span>:</span></div><div class="line">        <span class="string">'''挖掘新的url任务'''</span></div><div class="line">        <span class="keyword">return</span> urls</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Gevent爬虫与多线程爬虫对比&quot;&gt;&lt;a href=&quot;#Gevent爬虫与多线程爬虫对比&quot; class=&quot;headerlink&quot; title=&quot;Gevent爬虫与多线程爬虫对比&quot;&gt;&lt;/a&gt;Gevent爬虫与多线程爬虫对比&lt;/h2&gt;&lt;h3 id=&quot;爬虫通用网页解析模
      
    
    </summary>
    
      <category term="技术" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="并发编程" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
      <category term="Gevent" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/Gevent/"/>
    
    
      <category term="gevent" scheme="http://shuaiyy.cn/tags/gevent/"/>
    
  </entry>
  
  <entry>
    <title>Gevent 学习笔记</title>
    <link href="http://shuaiyy.cn/2017/11/01/%E6%8A%80%E6%9C%AF/Gevent%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://shuaiyy.cn/2017/11/01/技术/Gevent学习笔记/</id>
    <published>2017-10-31T16:00:00.000Z</published>
    <updated>2017-11-07T09:15:39.956Z</updated>
    
    <content type="html"><![CDATA[<p>python Gevent</p><h3 id="进程、线程、协程"><a href="#进程、线程、协程" class="headerlink" title="进程、线程、协程"></a>进程、线程、协程</h3><blockquote><p>python 中的yield提供对协程的有限支持。</p></blockquote><ul><li><p>进程</p><ul><li>正在运行的程序的实例</li><li>具有独立地址空间</li><li>是操作系统资源分配的基本单位</li></ul><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171025/e7D70Jf4Bh.png?imageslim" alt="mark"></p><ul><li>进程上下文： 进程的物理实体与支持进程运行的物理环境，包括地址空间，系统栈，打开文件表，……</li><li>上下文切换：由一个进程的上下文转到另外一个进程的上下文</li><li>系统开销：操作系统完成系统管理工作所花费的时间和空间</li><li>一个进程可以包含多个线程</li></ul></li><li><p>线程</p><ul><li>线程是程序执行的最小单位</li><li>多线程可以提高程序的并发性</li><li>由于python的GIL机制，一个进程只能使用一个cpu核心，因此多线程并不适合解决CPU密集的运算，此时应该使用多进程。</li></ul><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171025/A5b27FJ7h0.png?imageslim" alt="mark"></p></li><li><p>协程</p><ul><li>可以认为是一种用户态的线程</li><li>线程是由系统调度，而协程需要主动让出CPU时间，即控制权在程序员手中</li><li>线程里可以包含多个协程</li></ul></li></ul><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a><strong>优缺点</strong></h4><ul><li>进程创建和销毁成本高</li><li>线程开销比进程低，但切换成本高，线程间同步复杂</li><li>协程在不陷入内核的情况下进行上下文切换，没有同步问题，但需要手动切换。</li></ul><h4 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h4><ul><li><p>进程与进程池</p><p>要注意，进程的开销很大</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> multiprocessing</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name)</span>:</span></div><div class="line">    <span class="comment"># print threading.currentThread().getName()</span></div><div class="line">    <span class="keyword">print</span> multiprocessing.current_process().name</div><div class="line">    <span class="keyword">print</span> name</div><div class="line">    time.sleep(<span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">process1</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> multiprocessing.current_process().name</div><div class="line">    <span class="comment"># thread1 = threading.Thread(target=hello, args=['a'])</span></div><div class="line">    <span class="comment"># thread1.start()</span></div><div class="line">    <span class="comment"># thread1.join()</span></div><div class="line">    processes = [ multiprocessing.Process(target=hello, args=(x,)) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">'abcde'</span>]</div><div class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> processes:</div><div class="line">        p.start()</div><div class="line">        p.join()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">process2</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> multiprocessing.current_process().name</div><div class="line">    pool = multiprocessing.Pool(<span class="number">10</span>)</div><div class="line">    result = pool.map(hello,[x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">'abcde'</span>])  <span class="comment"># result是子进程返回的结果，顺序不定</span></div><div class="line">    pool.close() <span class="comment"># 关闭进程池，不在接收新的进程加入</span></div><div class="line">    pool.join() <span class="comment"># 主进程阻塞，等该子进程的退出</span></div></pre></td></tr></table></figure><p>if <strong>name</strong> == ‘<strong>main</strong>‘:</p><pre><code>start_time = time.time()process1()print &apos;finished time: %d&apos; %(time.time() - start_time)start_time = time.time()process2()print &apos;finished time: %d&apos; %(time.time() - start_time)</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">  ​</div><div class="line"></div><div class="line">+ 线程与线程池</div><div class="line"></div><div class="line">  threadpool是第三方模块，要注意python的GIL机制，CPU密集任务不要使用多进程</div><div class="line"></div><div class="line">  ```python</div><div class="line">  #!/usr/bin/env python</div><div class="line">  # -*- coding:utf-8 -*-</div><div class="line">  import threading</div><div class="line">  import threadpool</div><div class="line">  import time</div><div class="line"></div><div class="line">  def hello(name):</div><div class="line">      print threading.currentThread().getName()</div><div class="line">      print name</div><div class="line">      time.sleep(1)</div><div class="line"></div><div class="line">  # 线程，按顺序执行</div><div class="line">  def func1():</div><div class="line">      print threading.currentThread().getName()</div><div class="line">      # thread1 = threading.Thread(target=hello, args=[&apos;a&apos;])</div><div class="line">      # thread1.start()</div><div class="line">      # thread1.join()</div><div class="line">      threads = [ threading.Thread(target=hello, args=[x]) for x in &apos;abcde&apos;]</div><div class="line">      for thread in threads:</div><div class="line">          thread.start()</div><div class="line">          thread.join()</div><div class="line"></div><div class="line">  # 线程池，并发执行，理论上效率更高</div><div class="line">  def func2():</div><div class="line">      # pip install thradpool</div><div class="line">      print threading.currentThread().getName()</div><div class="line">      pool = threadpool.ThreadPool(10)</div><div class="line">      requests = threadpool.makeRequests(hello,[x for x in &apos;abcde&apos;])</div><div class="line">      for req in requests:</div><div class="line">          pool.putRequest(req)</div><div class="line">      pool.wait()</div><div class="line"></div><div class="line"></div><div class="line">  if __name__ == &apos;__main__&apos;:</div><div class="line">      start_time = time.time()</div><div class="line">      func1()</div><div class="line">      print &apos;finished time: %d&apos; %(time.time() - start_time)</div><div class="line">      start_time = time.time()</div><div class="line">      func2()</div><div class="line">      print &apos;finished time: %d&apos; %(time.time() - start_time)</div></pre></td></tr></table></figure></li><li><p>协程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure><p>​</p></li></ul><h3 id="网络IO"><a href="#网络IO" class="headerlink" title="网络IO"></a>网络IO</h3><h4 id="阻塞和非阻塞"><a href="#阻塞和非阻塞" class="headerlink" title="阻塞和非阻塞"></a><strong>阻塞和非阻塞</strong></h4><ul><li>阻塞调用是指在调用结果返回之前，当前线程会被挂起。函数只有在得到结果之后才会返回</li><li>非阻塞是指在不能立即得到结果之前，函数不会阻塞当前进程，而是立即返回。</li></ul><h4 id="网络IO阻塞"><a href="#网络IO阻塞" class="headerlink" title="网络IO阻塞"></a><strong>网络IO阻塞</strong></h4><ul><li><p>网络IO主要指socket</p></li><li><p>socket会在connect/read/write时发生阻塞</p><ul><li>连接时阻塞</li></ul><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171025/7E6CBaKe2A.png?imageslim" alt="mark"></p><ul><li>接收数据时阻塞</li></ul><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171025/CB9I1mi0a4.png?imageslim" alt="mark"></p><p>​</p></li></ul><h4 id="非阻塞模型"><a href="#非阻塞模型" class="headerlink" title="非阻塞模型"></a><strong>非阻塞模型</strong></h4><ul><li>接收数据非阻塞模型</li></ul><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171025/jE79hk5Kdf.png?imageslim" alt="mark"></p><ul><li><p>非阻塞面临的问题</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171025/7g9GAEifJe.png?imageslim" alt="mark"></p><p>非阻塞的socket连接要捕获处理相应的异常</p><ul><li>使用select判断socket是否可读写</li><li>或者捕获非阻塞的exception，不断重试发送、读取数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> errno</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> socket</div><div class="line"><span class="keyword">import</span> select</div></pre></td></tr></table></figure><p>logger = logging.getLogger(‘Client’)<br>console_handler = logging.StreamHandler(sys.stdout)<br>format = logging.Formatter(‘%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s: %(message)s’,</p><pre><code>&apos;%Y-%m-%d %H:%M:%S&apos;)</code></pre><p>console_handler.setFormatter(format)<br>logger.addHandler(console_handler)<br>logger.setLevel(logging.DEBUG)</p></li></ul><p>  if <strong>name</strong> == ‘<strong>main</strong>‘:<br>      ip = ‘localhost’<br>      port = 13518<br>      logger.debug(‘creating socket’)<br>      s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>      logger.debug(‘connecting to server’)</p><pre><code>s.setblocking(0)  # 设置成非阻塞try:    s.connect((ip, port))  # 非阻塞下，立即返回，此时不一定建立好连接except socket.error, msg:    if msg[0] not in [errno.EINPROGRESS, errno.EWOULDBLOCK]: # 如果不是正在连接,或者数据阻塞        exit(1)# 使用select判断socket是否可写，即发送数据while True:    ready_to_read, read_to_write, in_error = select.select([], [s,], [], 0.001)    if read_to_write:        breakmessage = &apos;Hello, world&apos;logger.debug(&apos;sending data: &quot;%s&quot;&apos;, message)while True:    try:        len_sent = s.send(message)        break    except socket.error, msg:        # Eagain Linux下，缓冲区数据不可用，请重试。数据还在准备中        # EWouldBlock， Windows下，缓冲区数据不可用，请重试。数据还在准备中        if msg[0] not in [errno.EWOULDBLOCK, errno.EAGAIN]:            print 1            exit(1)# Receive a responselogger.debug(&apos;waiting for response&apos;)while True:    try:        response = s.recv(len_sent)        break    except socket.error, msg:        if msg[0] not in [errno.EWOULDBLOCK, errno.EAGAIN]:            logger.exception(&apos;recv error&apos;)            exit(1)logger.debug(&apos;response from server: &quot;%s&quot;&apos;, response)# Clean uplogger.debug(&apos;closing socket&apos;)s.close()logger.debug(&apos;done&apos;)</code></pre>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">  ​</div><div class="line"></div><div class="line">### 同步异步</div><div class="line"></div><div class="line">+ 同步：发生调用时，一定等待结果返回整个调用才结束</div><div class="line">+ 异步：调用发生后，立即返回，不用等待结果。被调用者通过状态、通知来告知调用者，或者通过回调函数来处理这个调用。</div><div class="line"></div><div class="line">#### 实例：异步查询数据库</div><div class="line"></div><div class="line">+ 主线程将查询任务交给逻辑线程处理</div><div class="line"></div><div class="line">+ 使用队列Queue来实现同步</div><div class="line"></div><div class="line">+ Queue中存放任务对象task_item，task_item包含任务所需数据，任务执行结果等，完成任务后回调函数等</div><div class="line"></div><div class="line">+ 逻辑线程执行数据库查询操作后，2种处理方式</div><div class="line"></div><div class="line">  + 将task_item交由主线程处理</div><div class="line"></div><div class="line">    使用全局变量Queue保存task_item,并在主线程中处理</div><div class="line"></div><div class="line">  + 在子线程中直接调用task_item回调函数处理结果</div><div class="line"></div><div class="line">​```python</div><div class="line">#!/usr/bin/env python</div><div class="line"># -*- coding:utf-8 -*-</div><div class="line"># @File  : redis_client.py</div><div class="line"># @Author: Shuaiyy</div><div class="line"># @Date  : 2017/10/27 9:44</div><div class="line"># @Desc  : </div><div class="line"></div><div class="line">import sys</div><div class="line">import time</div><div class="line">import redis</div><div class="line">from threading import Thread, current_thread</div><div class="line">from queue import Queue</div><div class="line"></div><div class="line"></div><div class="line">main_queue = Queue(maxsize=1024) # 为了在主线程中同步task_item</div><div class="line"></div><div class="line"></div><div class="line">def handle_res(res):  # 处理结果的回调函数，只是打印结果</div><div class="line">    print current_thread().getName()</div><div class="line">    print &quot;获取到data：&quot; + str(res)</div><div class="line"></div><div class="line">    </div><div class="line">class GetValueTask(object): # task_item对象，保存数据，回调函数和任务结果</div><div class="line">    result = None</div><div class="line">    def __init__(self, key, handler):</div><div class="line">        self.key = key</div><div class="line">        self.callback = handler</div><div class="line"></div><div class="line"></div><div class="line">class RedisAsyncGet(Thread):</div><div class="line"></div><div class="line">    def __init__(self):</div><div class="line">        super(RedisAsyncGet, self).__init__()</div><div class="line">        self.r = redis.Redis(&apos;localhost&apos;, 6379, 0, password=&apos;mima&apos;)</div><div class="line">        self.queue = Queue(maxsize=1024)</div><div class="line"></div><div class="line">    def get_value_cmd(self, key):</div><div class="line">        task_item = GetValueTask(key, handle_res)</div><div class="line">        self.queue.put(task_item)</div><div class="line"></div><div class="line">    def run(self):</div><div class="line">        while True:</div><div class="line">            if not self.queue.empty():</div><div class="line">                # 获取任务</div><div class="line">                task_item = self.queue.get()</div><div class="line">                # 执行任务，得到结果</div><div class="line">                res = self.r.get(task_item.key)</div><div class="line">                # 直接在子线程中调用回调函数处理结果</div><div class="line">                task_item.callback(res)</div><div class="line">                </div><div class="line">                # 将任务放到全局队列中，以便主线程处理task_item</div><div class="line">                task_item.result = res</div><div class="line">                main_queue.put(task_item)</div><div class="line">                </div><div class="line">            time.sleep(0.1) # 避免cpu空转在多</div><div class="line"></div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    handle = RedisAsyncGet()</div><div class="line">    handle.start()</div><div class="line">    handle.get_value_cmd(&apos;a&apos;)</div><div class="line">    handle.get_value_cmd(&apos;test&apos;)</div><div class="line">    # handle.join() # </div><div class="line"># 下面是主线程中处理task_item的返回结果</div><div class="line">    while True:</div><div class="line">        if not main_queue.empty():</div><div class="line">            task_item = main_queue.get()</div><div class="line">            res = task_item.result</div><div class="line">            task_item.callback(res)</div><div class="line">        time.sleep(0.1)</div></pre></td></tr></table></figure><h4 id="同步异步与阻塞非阻塞的区别"><a href="#同步异步与阻塞非阻塞的区别" class="headerlink" title="同步异步与阻塞非阻塞的区别"></a>同步异步与阻塞非阻塞的区别</h4><ul><li>阻塞/非阻塞，描述的是程序在等待消息（不管是同步消息还是异步消息）是的状态。</li><li>同步/异步, 描述的是程序获得其关注消息的通知机制。</li></ul><h4 id="同步异步与阻塞非阻塞的组合"><a href="#同步异步与阻塞非阻塞的组合" class="headerlink" title="同步异步与阻塞非阻塞的组合"></a>同步异步与阻塞非阻塞的组合</h4><ul><li>同步阻塞：效率最低</li><li>同步非阻塞：效率也低，需要伦旭</li><li>异步阻塞：一般模式的线程回调</li><li>异步非阻塞：IOCP机制，难度高，一般用的少</li></ul><h3 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h3><h4 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h4><p>•并发是指两个或多个事件在同一时间间隔发生。就是同时处理很多事情，比如串行同时处理一件事情。</p><p>•在单核系统中，为了提高cpu利用率，系统采用时间片轮询等调度方式，对多个线程轮换执行，在宏观上看，线程是同时执行的，从微观上看，某一时刻只执行一个线程。  在发生资源竞争或者大量的上下文切换会导致性能消耗 。</p><h4 id="并行"><a href="#并行" class="headerlink" title="并行"></a>并行</h4><ul><li>并行是同时处理多件事情。</li><li>比如线程可以真正的做到同一时刻多个运行，每个线程可以在不同的CPU核上运行。</li></ul><h4 id="greenlet实现并发"><a href="#greenlet实现并发" class="headerlink" title="greenlet实现并发"></a>greenlet实现并发</h4><ul><li>greenlet是stacklesspython（支持微线程tasklet的CPython版本）的副产品。Tasklet以伪并发运行着（如果在单个或者很少的系统级线程内）</li><li>greenlet是一个原始的微线程的概念，没有调度，可以称为协程。所以green需要自己调度。</li><li>如果有阻塞调用，将greenlet主动切换出去。</li><li>单个线程内可以运行任意哥greenlet微线程，不同线程之间不能切换greenlet。</li></ul><p><code>pip install greenlet</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">from</span> greenlet <span class="keyword">import</span> greenlet</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> threading.current_thread().getName()</div><div class="line">    <span class="keyword">print</span> <span class="string">'1'</span></div><div class="line">    g2.switch()</div><div class="line">    <span class="keyword">print</span> <span class="string">"2"</span></div><div class="line">    g2.switch()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> threading.current_thread().getName()</div><div class="line">    <span class="keyword">print</span> <span class="string">'3'</span></div><div class="line">    g1.switch()</div><div class="line">    <span class="keyword">print</span> <span class="string">"4"</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    g1 = greenlet(test1)</div><div class="line">    g2 = greenlet(test2)</div><div class="line">    g1.switch()</div><div class="line">    <span class="comment"># 输出：1324</span></div></pre></td></tr></table></figure><h3 id="Gevent简介"><a href="#Gevent简介" class="headerlink" title="Gevent简介"></a>Gevent简介</h3><blockquote><p>gevent是一个基于libev和greenlet的并发库。它为各种并发和网络相关的任务提供了整洁的API。libev是高性能事件循环/事件模型的网络库，并且包含大量新特性。</p></blockquote><p>Python通过<code>yield</code>提供了对协程的基本支持，但是不完全。而第三方的gevent为Python提供了比较完善的协程支持。</p><p>gevent是第三方库，通过greenlet实现协程，其基本思想是：</p><p>当一个greenlet遇到IO操作时，比如访问网络，就自动切换到其他的greenlet，等到IO操作完成，再在适当的时候切换回来继续执行。由于IO操作非常耗时，经常使程序处于等待状态，有了gevent为我们自动切换协程，就保证总有greenlet在运行，而不是等待IO。</p><p>由于切换是在IO操作时自动完成，所以gevent需要修改Python自带的一些标准库，这一过程在启动时通过monkey patch完成。</p><h3 id="Gevent特点"><a href="#Gevent特点" class="headerlink" title="Gevent特点"></a>Gevent特点</h3><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171024/H8d2c19G2l.png?imageslim" alt="mark"></p><h3 id="Gevent之Greenlet对象"><a href="#Gevent之Greenlet对象" class="headerlink" title="Gevent之Greenlet对象"></a>Gevent之Greenlet对象</h3><ul><li>继承greetlet</li><li>Greentlet(run=None, <em>args, *</em>kwargs)创建一个greenlet</li><li>greenlet.start()将greenlet置入geventIO调度内</li><li>greenlet.spawn(<em>args,*</em>kwargs) 创建greenlet，并运行start</li><li>greenlet.kill()杀死greenlet</li><li>greenlet间的切换由,<code>gevent.sleep()</code>方法交出控制权，然后由gevent进行调度协程</li><li>下面程序的输出顺序为1,2,,1-1,2-1</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">import</span> gevent</div><div class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> Greenlet</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_in_greenlet1</span><span class="params">(arg_x)</span>:</span></div><div class="line">    <span class="keyword">print</span> threading.current_thread().getName()</div><div class="line">    <span class="keyword">print</span> <span class="string">'1'</span> , arg_x</div><div class="line">    gevent.sleep(<span class="number">0</span>)</div><div class="line">    <span class="keyword">print</span> <span class="string">"1-1"</span> , arg_x</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_in_greenlet2</span><span class="params">(arg_x)</span>:</span></div><div class="line">    <span class="keyword">print</span> threading.current_thread().getName()</div><div class="line">    <span class="keyword">print</span> <span class="string">'2'</span> , arg_x</div><div class="line">    gevent.sleep(<span class="number">0</span>)</div><div class="line">    <span class="keyword">print</span> <span class="string">"2-1"</span> , arg_x</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    g1 = Greenlet(run_in_greenlet1, <span class="string">'这是参数'</span>)</div><div class="line">    g2 = Greenlet(run_in_greenlet2, <span class="string">'这是参数'</span>)</div><div class="line">    g1.start()</div><div class="line">    g2.start()</div><div class="line">    <span class="comment"># 构造和启动可以由spawn函数实现</span></div><div class="line">    <span class="comment"># g1 = gevent.spawn(run_in_greenlet1, '参数')</span></div><div class="line">    </div><div class="line">    g1.join()</div><div class="line">    g2.join()</div><div class="line">    <span class="comment"># 可以一次join多个greenlet</span></div><div class="line">    <span class="comment"># gevent.joinall([g1, g2])</span></div><div class="line">    </div><div class="line">    <span class="comment"># 更为简洁的写法</span></div><div class="line">    gevent.joinall([gevent.spawn(run_in_greenlet1)</div><div class="line">                       , gevent.spawn(run_in_greenlet2)])</div></pre></td></tr></table></figure><h3 id="Greenlet状态与超时处理"><a href="#Greenlet状态与超时处理" class="headerlink" title="Greenlet状态与超时处理"></a>Greenlet状态与超时处理</h3><h4 id="超时处理"><a href="#超时处理" class="headerlink" title="超时处理"></a>超时处理</h4><p>当协程对运行时间有要求时，可以设置Timeout计时器，超时的协议会引发timeout异常</p><ul><li><code>gevent.Timeout(seconds, exception)</code>，没有指定exception时，超时会抛出gevent.Timeout。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_in_greenlet1</span><span class="params">(arg_x)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'1'</span> , arg_x</div><div class="line">    gevent.sleep(<span class="number">5</span>)  <span class="comment"># 强制协程等待5秒，使用time.sleep无效</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"1-1"</span> , arg_x</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="comment"># 或者使用with上下文管理器</span></div><div class="line">    max_time = <span class="number">2</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">with</span> gevent.Timeout(max_time, Exception(<span class="string">"超时了"</span>)):</div><div class="line">            gevent.spawn(run_in_greenlet1, <span class="string">'参数'</span>).join()</div><div class="line">    <span class="keyword">except</span> gevent.Timeout:</div><div class="line">        <span class="keyword">print</span> <span class="string">'timeout'</span></div><div class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">        <span class="keyword">print</span> e.message</div><div class="line">    <span class="comment"># 或者调用timeout对象的start方法</span></div><div class="line">    max_time = <span class="number">2</span></div><div class="line">    timeout = gevent.Timeout(max_time)</div><div class="line">    timeout.start()</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        gevent.spawn(run_in_greenlet1, <span class="string">'参数'</span>).join()</div><div class="line">    <span class="keyword">except</span> gevent.Timeout :</div><div class="line">        <span class="keyword">print</span> <span class="string">'timeout'</span></div></pre></td></tr></table></figure><h4 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h4><ul><li>started– Boolean, 指示此Greenlet是否已经启动</li><li>ready()– Boolean, 指示此Greenlet是否已经停止</li><li>successful()– Boolean, 指示此Greenlet是否已经停止而且没抛异常，即运行成功</li><li>value– 任意值, 此Greenlet代码返回的值</li><li>exception– 异常, 此Greenlet内抛出的未捕获异常</li></ul><h3 id="定制Greentlet"><a href="#定制Greentlet" class="headerlink" title="定制Greentlet"></a>定制Greentlet</h3><p>进行数据管理，超时设置等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyGreenlet</span><span class="params">(Greenlet)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, message, timeout=<span class="number">2</span>)</span>:</span></div><div class="line">        super(MyGreenlet, self).__init__()</div><div class="line">        self.message = message</div><div class="line">        self.timeout = gevent.Timeout(timeout)</div><div class="line">    <span class="comment"># 这里重载了run方法，因此可以不必在构造对象时传入回调函数</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_run</span><span class="params">(self)</span>:</span></div><div class="line">        self.timeout.start()</div><div class="line">        <span class="keyword">print</span> self.message</div><div class="line">        </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    g1 = MyGreenlet(<span class="string">'hello'</span>, timeout=<span class="number">3</span>)</div><div class="line">    g1.start()</div><div class="line">    g1.join()</div></pre></td></tr></table></figure><h3 id="Event对象，协程间同步"><a href="#Event对象，协程间同步" class="headerlink" title="Event对象，协程间同步"></a>Event对象，协程间同步</h3><p>如果不用event事件通知，可以用全局变量进行消息传递，但全局变量会有很多问题，同步不安全，浪费cpu资源等。</p><ul><li>windows中有Events，作为线程间同步的方法</li><li>Gevent中则是Greenlet间“同步”的一种方法</li></ul><p>使用方法</p><ul><li>Event对象</li><li>AsyncResult可以传递任意类型的数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> gevent.event <span class="keyword">import</span> Event, AsyncResult</div><div class="line"></div><div class="line">evt1 = Event()</div><div class="line">evt2 = AsyncResult()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">boss</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">global</span> evt1, evt2</div><div class="line">    <span class="keyword">print</span> <span class="string">'start to work!'</span></div><div class="line">    tasklist = dict(zip(range(<span class="number">3</span>), <span class="string">'abc'</span>))</div><div class="line">    evt2.set(tasklist)</div><div class="line">    gevent.sleep(<span class="number">5</span>)</div><div class="line">    <span class="keyword">print</span> <span class="string">'time to relax!'</span></div><div class="line">    evt1.set()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">global</span> evt1, evt2</div><div class="line">    tasklist = evt2.get(timeout=<span class="number">2</span>)</div><div class="line">    <span class="keyword">print</span> <span class="string">'%d is working task %s!'</span> %(n, tasklist[n])</div><div class="line">    evt1.wait()</div><div class="line">    <span class="keyword">print</span> <span class="string">'%d stop working!'</span> %n</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    b = Greenlet(boss)</div><div class="line">    b.start()</div><div class="line">    gevent.joinall([gevent.spawn(worker, i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>)])</div><div class="line">    b.join()</div></pre></td></tr></table></figure><h3 id="Queue对象，实现通信"><a href="#Queue对象，实现通信" class="headerlink" title="Queue对象，实现通信"></a>Queue对象，实现通信</h3><h4 id="python内置的Queue"><a href="#python内置的Queue" class="headerlink" title="python内置的Queue"></a>python内置的Queue</h4><ul><li>Queue（队列），用于存取数据的有序数据结构。Queue(先进先出)，LifoQueue(先进后出)和PriorityQueue(优先级队列)</li><li>Queue模块实现了多生产者、多消费者队列。它特别适用于信息必须在多个线程间安全地交换的多线程程序中。这个模块中的Queue 类实现了所有必须的锁语义。</li><li>模块实现了三类队列，主要差别在于取得数据的顺序上。FIFO队列中，最早加入的任务会被最先得到。LIFO队列中，最后加入的任务会被最先得到（就像栈一样）。在优先队列中，任务被保持有序，拥有最小值的任务（优先级最高）被最先得到。</li><li>虽然线程安全，但同步线程开销</li></ul><h4 id="Gevent中的Queue"><a href="#Gevent中的Queue" class="headerlink" title="Gevent中的Queue"></a>Gevent中的Queue</h4><ul><li><p>无线程同步开销，但有Greenlet之间的线程内同步，无法线程间操作。</p></li><li><p>注意queue是否为空</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> gevent.queue <span class="keyword">import</span> Queue, LifoQueue, PriorityQueue, Empty</div><div class="line"></div><div class="line">tasks_queue = Queue()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">boss</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">30</span>):</div><div class="line">        tasks_queue.put_nowait(i) <span class="comment"># put_nowait不用判断队列是否满了，直接入队。因为此处的queue没指定大小</span></div><div class="line">        <span class="comment"># tasks_queue.put(i) 如果对满了，会等待。</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker</span><span class="params">(name)</span>:</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        <span class="keyword">while</span> <span class="keyword">not</span> tasks_queue.empty():</div><div class="line">            task = tasks_queue.get(timeout=<span class="number">2</span>) <span class="comment"># 如果没有数据会阻塞，因此设置超时时间，并捕获错误</span></div><div class="line">            <span class="keyword">print</span> <span class="string">'worker %s got task %d'</span> %(name, task)</div><div class="line">            gevent.sleep(<span class="number">0</span>)</div><div class="line">        gevent.sleep(<span class="number">1</span>)</div><div class="line"></div><div class="line">    <span class="comment"># 捕获队列为空的异常</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            task = tasks_queue.get(timeout=<span class="number">0.1</span>)</div><div class="line">    <span class="keyword">except</span> gevent.queue.Empty:</div><div class="line">        <span class="keyword">print</span> <span class="string">'quit'</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    gevent.joinall([gevent.spawn(boss),].extend(gevent.spawn(worker, name) <span class="keyword">for</span> name <span class="keyword">in</span> <span class="string">'abcde'</span>))</div><div class="line">    <span class="comment"># gevent.joinall([gevent.spawn(worker, name) for name in 'abcde'].append(gevent.spawn(boss)))</span></div></pre></td></tr></table></figure></li><li><p>优先级队列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> gevent.queue <span class="keyword">import</span> Queue, LifoQueue, PriorityQueue, Empty</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Job</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, no, priority, desc)</span>:</span></div><div class="line">        self.priority = priority</div><div class="line">        self.desc = desc</div><div class="line">        self.no = no</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__cmp__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> cmp(self.priority, other.priority)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'Job %d:: %d :: %s'</span> %(self.no, self.priority, self.desc)</div><div class="line"></div><div class="line">tasks_queue = PriorityQueue()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">boss</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">30</span>):</div><div class="line">        tasks_queue.put_nowait(Job(i, <span class="number">30</span> - i, str(i)*<span class="number">5</span>)) <span class="comment"># put_nowait不用判断队列是否满了，直接入队。因为此处的queue没指定大小</span></div><div class="line">        <span class="comment"># tasks_queue.put(i) 如果对满了，会等待。</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker</span><span class="params">(name)</span>:</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        <span class="keyword">while</span> <span class="keyword">not</span> tasks_queue.empty():</div><div class="line">            task = tasks_queue.get(timeout=<span class="number">2</span>) <span class="comment"># 如果没有数据会阻塞，因此设置超时时间，并捕获错误</span></div><div class="line">            <span class="keyword">print</span> task</div><div class="line">            gevent.sleep(<span class="number">0</span>)</div><div class="line">        gevent.sleep(<span class="number">1</span>)</div><div class="line"></div><div class="line">    <span class="comment"># 捕获队列为空的异常</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            task = tasks_queue.get(timeout=<span class="number">0.1</span>)</div><div class="line">    <span class="keyword">except</span> gevent.queue.Empty:</div><div class="line">        <span class="keyword">print</span> <span class="string">'quit'</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    gevent.joinall([gevent.spawn(boss),].extend(gevent.spawn(worker, name) <span class="keyword">for</span> name <span class="keyword">in</span> <span class="string">'abcde'</span>))</div></pre></td></tr></table></figure></li><li><p>自定义一个Queue</p><p>随机取出的队列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> gevent.queue <span class="keyword">import</span> Queue, LifoQueue, PriorityQueue, Empty</div><div class="line"><span class="keyword">import</span> random</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomQueue</span><span class="params">(Queue)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_init</span><span class="params">(self, maxsize, items=None)</span>:</span></div><div class="line">        self.queue = []</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_put</span><span class="params">(self, item)</span>:</span></div><div class="line">        self.queue.append(item)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.queue.pop(random.randint(<span class="number">0</span>, len(self.queue) - <span class="number">1</span>))</div><div class="line"></div><div class="line">q = RandomQueue()</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>): q.put(i)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>): <span class="keyword">print</span> q.get()</div></pre></td></tr></table></figure></li></ul><h3 id="Greenlet间同步机制semaphore-信号量"><a href="#Greenlet间同步机制semaphore-信号量" class="headerlink" title="Greenlet间同步机制semaphore(信号量)"></a>Greenlet间同步机制semaphore(信号量)</h3><ul><li>信号量是一个允许Greenlet相互合作，限制并发访问或运行的低层次的同步原语。信号量也被称为锁。</li><li>信号量有两个方法，acquire和release。在信号量是否已经被<br>acquire或release，和拥有资源的数量之间不同,被称为此信号量的范围。</li><li>如果一个信号量的范围已经降低到0，它会阻塞acquire操作直到另一个已经获得信号量的greenlet作出释放。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> gevent</div><div class="line"><span class="keyword">from</span> gevent.pool <span class="keyword">import</span> Pool</div><div class="line"><span class="keyword">from</span> gevent.lock <span class="keyword">import</span> BoundedSemaphore</div><div class="line"></div><div class="line">sem = BoundedSemaphore(<span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker1</span><span class="params">(n)</span>:</span></div><div class="line">    sem.acquire()</div><div class="line">    print(<span class="string">'worker %d acquire sem'</span> %n)</div><div class="line">    gevent.sleep(<span class="number">0</span>)</div><div class="line">    sem.release()</div><div class="line">    print(<span class="string">'woker %d release sem'</span> %n)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker2</span><span class="params">(n)</span>:</span></div><div class="line">  <span class="comment"># 可以用with上下文管理器</span></div><div class="line">    <span class="keyword">with</span> sem:</div><div class="line">        print(<span class="string">'worker %d acquire sem'</span> %n)</div><div class="line">        gevent.sleep(<span class="number">0</span>)</div><div class="line">    print(<span class="string">'woker %d release sem'</span> %n)</div><div class="line"></div><div class="line">pool = Pool()</div><div class="line">pool.map(worker2, xrange(<span class="number">0</span>,<span class="number">5</span>))</div><div class="line">pool.join()</div></pre></td></tr></table></figure><h3 id="Greenlet管理"><a href="#Greenlet管理" class="headerlink" title="Greenlet管理"></a>Greenlet管理</h3><h4 id="Group"><a href="#Group" class="headerlink" title="Group"></a>Group</h4><ul><li>Group是一个运行中Greenlet的集合，集合中的Greenlet会像一个组一样被共同管理和调度。</li><li>API：add,join,kill,killone,map</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> gevent.pool <span class="keyword">import</span> Pool, Group</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">print</span> <span class="number">1</span></div><div class="line">    group = Group()</div><div class="line">    group.add(gevent.spawn(run_in_greenlet1, <span class="string">'a'</span>))</div><div class="line">    group.add(gevent.spawn(run_in_greenlet1, <span class="string">'b'</span>))</div><div class="line">    group.add(gevent.spawn(run_in_greenlet1, <span class="string">'c'</span>))</div><div class="line">    <span class="comment"># map方法</span></div><div class="line">    group.map(run_in_greenlet1, <span class="string">'defg'</span>)</div><div class="line">    group.join()</div><div class="line">    <span class="comment"># imap生成的是迭代器对象，不会立即执行</span></div><div class="line">    <span class="keyword">for</span> result <span class="keyword">in</span> group.imap(run_in_greenlet1, <span class="string">'hijk'</span>):</div><div class="line">        <span class="keyword">print</span> result</div><div class="line">      </div><div class="line">    <span class="keyword">for</span> result <span class="keyword">in</span> group.imap_unordered(run_in_greenlet1, <span class="string">'lmnopq'</span>):</div><div class="line">        <span class="keyword">print</span> result</div></pre></td></tr></table></figure><h4 id="Pool"><a href="#Pool" class="headerlink" title="Pool"></a>Pool</h4><p>+　Pool来自子类化Group，是一个为处理数量变化并且需要限制并发Greenlet而设计的类。<br>+　在需要并行的受限于网络和IO的任务时常常需要用到它。<br>+　设置最大并发数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">pool = Pool(<span class="number">4</span>)</div><div class="line"></div><div class="line">pool.map(run_in_greenlet1, <span class="string">'hijk'</span>)</div><div class="line">pool.spawn(run_in_greenlet1, <span class="string">'m'</span>)</div><div class="line">pool.join()</div><div class="line"><span class="comment"># 杀死所有的协程</span></div><div class="line">pool.kill()</div></pre></td></tr></table></figure><h3 id="子进程与协程协作"><a href="#子进程与协程协作" class="headerlink" title="子进程与协程协作"></a>子进程与协程协作</h3><ul><li><p>python内置的子进程无法与greenlet协作,当子进程空闲时，协程也无法执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> gevent</div><div class="line"><span class="keyword">import</span> subprocess</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'test'</span></div><div class="line">        gevent.sleep(<span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    g = gevent.spawn(test)</div><div class="line">    <span class="comment"># 等待10秒后打印用户</span></div><div class="line">    sub = subprocess.Popen(<span class="string">'ping 1.1.1.1 -n 1 -w 10000 &amp;&amp; dir'</span>, stdout=subprocess.PIPE, shell=<span class="keyword">True</span>)</div><div class="line">    sub.wait()</div><div class="line">    output, err = sub.communicate()</div><div class="line">    <span class="keyword">print</span> output.decode(<span class="string">'gbk'</span>).encode(<span class="string">'utf-8'</span>), err</div><div class="line">    <span class="comment"># 在子进程等待10秒的过程中协程g没有被调用，就被kill掉了</span></div><div class="line">    g.kill()</div></pre></td></tr></table></figure></li><li><p>使用<code>gevent.subprocess</code></p><p>在子进程执行的10多秒的时间里， 协程g调用了6次test函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> gevent</div><div class="line"><span class="comment"># import subprocess</span></div><div class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span>  subprocess</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'test'</span></div><div class="line">        gevent.sleep(<span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    g = gevent.spawn(test)</div><div class="line">    <span class="comment"># 等待10秒后打印用户</span></div><div class="line">    sub = subprocess.Popen(<span class="string">'ping 1.1.1.1 -n 1 -w 10000 &amp;&amp; dir'</span>, stdout=subprocess.PIPE, shell=<span class="keyword">True</span>)</div><div class="line">    sub.wait()</div><div class="line">    output, err = sub.communicate()</div><div class="line">    <span class="keyword">print</span> output.decode(<span class="string">'gbk'</span>).encode(<span class="string">'utf-8'</span>), err</div><div class="line">    <span class="comment"># 在子进程等待10秒的过程中协程g没有被调用，就被kill掉了</span></div><div class="line">    g.kill()</div></pre></td></tr></table></figure></li><li><p><code>gevent.socket</code> 与multiprocessing模块协作</p><p>multiprocessing模块多进程本身也无法和greenlet进行协作，</p><p>下面的例子在Linux下实现，使用两个Pipe进行进程间通信，两个协程一个从a写入pipe1，一个从d读取pipe2，子进程负责从b端接受pipe1数据，从c端写入pipe2.</p><p>子进程中的<code>msg = b.recv()</code>是阻塞的，此时协程可以获得cpu控制权</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Pipe</div><div class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> socket</div><div class="line"></div><div class="line">a, b = Pipe() <span class="comment"># Pipe返回的是两个连接到管道2端的对象</span></div><div class="line">c, d = Pipe()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">relay</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">        msg = b.recv()  <span class="comment"># 没有数据时会阻塞</span></div><div class="line">        c.send(<span class="string">'%s in %d'</span> %(msg, i))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">put_msg</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">        socket.wait_write(a.fileno())</div><div class="line">        a.send(<span class="string">'hi %d'</span> %i)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_msg</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">        socket.wait_read(d.fileno())</div><div class="line">        <span class="keyword">print</span> d.recv()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    proc = Process(target=relay)</div><div class="line">    proc.start() <span class="comment"># 创建进程</span></div><div class="line">    g1 = gevent.spawn(put_msg)</div><div class="line">    g2 = gevent.spawn(get_msg)</div><div class="line">    gevent.joinall([g1, g2])</div></pre></td></tr></table></figure></li></ul><h3 id="Monkey-Patch"><a href="#Monkey-Patch" class="headerlink" title="Monkey Patch"></a>Monkey Patch</h3><h4 id="什么是monkey-patch"><a href="#什么是monkey-patch" class="headerlink" title="什么是monkey patch"></a>什么是monkey patch</h4><p>在动态语言中，不去改变源码而对功能进行追加和变更就叫做Monkey<br>Patching（猴子补丁）</p><ul><li>追加功能 </li><li>功能变更</li><li>修正程序错误</li><li>增加钩子，在执行某个方法的同时执行一些其他的处理，如打印日志，实现AOP等，</li></ul><p>python实现monkey patch</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fly</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'i can fly!'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fly</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'i cannot fly!'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'i can run!'</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    bird = Bird()</div><div class="line">    bird.fly()</div><div class="line">    <span class="comment"># 下面是动态补丁，对象的方法会发生改变</span></div><div class="line">    Bird.fly = fly</div><div class="line">    Bird.run = run</div><div class="line">    bird.fly()</div><div class="line">    bird.run()</div></pre></td></tr></table></figure><h4 id="Gevent-中的monkey-patch"><a href="#Gevent-中的monkey-patch" class="headerlink" title="Gevent 中的monkey patch"></a>Gevent 中的monkey patch</h4><ul><li>patch的模块有：socket,dns, time, select, thread, os, ssl, subprocess, sys, builtins, signal</li><li>默认阻塞的模块都被替换成非阻塞，协作式的。比如gevent支持异步协作的DNS，gevent的time.sleep只是协程内休眠，不阻塞线程。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> timeit</div><div class="line"><span class="keyword">import</span> urllib2</div><div class="line"><span class="keyword">import</span> gevent</div><div class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">(url)</span>:</span></div><div class="line">    data = urllib2.urlopen(url)</div><div class="line">    gevent.sleep(<span class="number">0</span>)</div><div class="line">    text = data.read()[:<span class="number">50</span>]</div><div class="line">    <span class="keyword">print</span> url, text</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></div><div class="line">    urls = [<span class="string">'http://gunicorn.org/#docs'</span>, <span class="string">'http://gunicorn.org/'</span>, <span class="string">'https://www.liaoxuefeng.com'</span>]</div><div class="line">    gevent.joinall([gevent.spawn(download, url) <span class="keyword">for</span> url <span class="keyword">in</span> urls])</div><div class="line">monkey.patch_all()</div><div class="line"><span class="comment"># 没有patch之前，用时24.5653685739,使用patch后执行时间为13.973405013</span></div><div class="line"><span class="comment"># timeit是python的计时器模块</span></div><div class="line"><span class="keyword">print</span> timeit.Timer(stmt=<span class="string">"test()"</span>, setup=<span class="string">"from __main__ import test"</span>).timeit(number=<span class="number">20</span>)</div></pre></td></tr></table></figure><h3 id="Server的使用"><a href="#Server的使用" class="headerlink" title="Server的使用"></a>Server的使用</h3><h4 id="服务器概念"><a href="#服务器概念" class="headerlink" title="服务器概念"></a>服务器概念</h4><p>一个管理资源并为用户提供服务的计算机软件，通常分为文件服务器（能使用户在其它计算机访问文件），数据库服务器和应用程序服务器。</p><ul><li>服务器软件工作在客户端-服务器或浏览器-服务器的方式，常用的分类：</li><li>文件服务器（FileServer）</li><li>数据库服务器（DatabaseServer）——MySQL</li><li>邮件服务器（MailServer）——Microsoft Exchange</li><li>网页服务器（WebServer）——如Apache</li><li>应用程序服务器</li></ul><h4 id="TCP服务器"><a href="#TCP服务器" class="headerlink" title="TCP服务器"></a>TCP服务器</h4><p>python的socket，select，以及SocketServer模块都是阻塞的。</p><p>Gevent提供了非阻塞的socket server</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171030/HLh6lHl89f.png?imageslim" alt="mark"></p><ul><li><p>python socket的简单服务器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> socket</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class="line">    s.bind((<span class="string">'localhost'</span>, <span class="number">12222</span>))</div><div class="line">    s.listen(<span class="number">100</span>)</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        coon, addr = s.accept()</div><div class="line">        <span class="keyword">print</span> <span class="string">'connected with %s:%s '</span> % (addr[<span class="number">0</span>], addr[<span class="number">1</span>])</div><div class="line">        <span class="comment"># 阻塞，只有recv操作完成后， s才能接受新的连接</span></div><div class="line">        data = coon.recv(<span class="number">1024</span>)</div><div class="line">        <span class="keyword">print</span> data</div><div class="line">        coon.close()</div><div class="line">    s.close()</div></pre></td></tr></table></figure></li><li><p>基于python select的异步服务器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> socket</div><div class="line"><span class="keyword">import</span> select</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class="line">    s.bind((<span class="string">'localhost'</span>, <span class="number">12222</span>))</div><div class="line">    s.listen(<span class="number">100</span>)</div><div class="line">    read_list = [s]</div><div class="line">    address = &#123;&#125;</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        read_socks, write_socks, error = select.select(read_list, [], [])</div><div class="line">        <span class="keyword">for</span> sock <span class="keyword">in</span> read_socks:</div><div class="line">            <span class="keyword">if</span> sock == s: <span class="comment"># 如果是服务器的sock，则允许服务器接收一个连接,并加入可读list</span></div><div class="line">                coon, addr = s.accept()</div><div class="line">                <span class="keyword">print</span> <span class="string">'connected with %s:%s '</span>%(addr[<span class="number">0</span>], addr[<span class="number">1</span>])</div><div class="line">                read_list.append(coon)</div><div class="line">                address[coon] = addr</div><div class="line">            <span class="keyword">else</span>: <span class="comment"># 来自客户端的socket可读时</span></div><div class="line">                data = sock.recv(<span class="number">1024</span>)</div><div class="line">                <span class="keyword">if</span> data:</div><div class="line">                    <span class="keyword">print</span> <span class="string">'get:'</span>, data</div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    read_list.remove(sock)</div><div class="line">                    <span class="keyword">print</span> <span class="string">'client %s:%s closed!'</span>% address[sock]</div><div class="line">                    <span class="keyword">del</span>  address[sock]</div><div class="line">                    sock.close()</div><div class="line">    s.close()</div></pre></td></tr></table></figure></li><li><p>使用SocketServer类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> SocketServer</div><div class="line"><span class="comment"># 需要定义一个Handler类处理socket连接</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRequestHandler</span><span class="params">(SocketServer.BaseRequestHandler)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            data = self.request.recv(<span class="number">1024</span>)</div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> data <span class="keyword">or</span> len(data) == <span class="number">0</span>:</div><div class="line">                <span class="keyword">return</span></div><div class="line">            <span class="keyword">print</span> data</div><div class="line">        <span class="keyword">return</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    address = (<span class="string">'localhost'</span>, <span class="number">12222</span>)</div><div class="line">    server = SocketServer.TCPServer(address, MyRequestHandler)</div><div class="line">    server.serve_forever()</div></pre></td></tr></table></figure></li><li><p>Gevent Server</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</div><div class="line"><span class="keyword">from</span> gevent.server <span class="keyword">import</span> StreamServer</div><div class="line">monkey.patch_all()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">handler</span><span class="params">(sock, addr)</span>:</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        data = sock.recv(<span class="number">1024</span>)</div><div class="line">        <span class="keyword">if</span> data:</div><div class="line">            <span class="keyword">print</span> data</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">print</span> addr, <span class="string">'closed!'</span></div><div class="line">            <span class="keyword">return</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    server = StreamServer((<span class="string">'localhost'</span>, <span class="number">12222</span>), handler)</div><div class="line">    server.serve_forever()</div></pre></td></tr></table></figure></li><li><p>使用基于协程的client对上述服务器测试</p><p>可以看到Gevent的server是支持协程的，能同时处理多个连接。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</div><div class="line">monkey.patch_all()</div><div class="line"><span class="keyword">import</span> gevent</div><div class="line"><span class="keyword">import</span> socket</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_connect</span><span class="params">(addr, index)</span>:</span></div><div class="line">    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class="line">    sock.connect(addr)</div><div class="line">    sock.send(<span class="string">"hello world from %d"</span> %index)</div><div class="line">    gevent.sleep(<span class="number">2</span>)</div><div class="line">    sock.send(<span class="string">"hello world2 from %d"</span> %index)</div><div class="line">    sock.close()</div><div class="line"></div><div class="line">addr = (<span class="string">'localhost'</span>, <span class="number">12222</span>)</div><div class="line">greenlets = []</div><div class="line">num = <span class="number">10</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(num):</div><div class="line">    g = gevent.spawn(do_connect, addr, i)</div><div class="line">    greenlets.append(g)</div><div class="line">gevent.joinall(greenlets)</div></pre></td></tr></table></figure><p>​</p></li></ul><h4 id="WSGIServer"><a href="#WSGIServer" class="headerlink" title="WSGIServer"></a>WSGIServer</h4><ul><li><p>Web服务器网关接口（Python Web Server Gateway Interface，缩写为WSGI）是为Python语言定义的Web服务器和Web应用程序或框架之间的一种简单而通用的接口。</p></li><li><p>WSGIserver所做的工作仅仅是将从客户端收到的请求传递给WSGI application，然后将WSGI application的返回值作为响应传给客户端。</p></li><li><p>WSGI application可以是Flask，Django等web框架</p></li><li><p>WSGI application接口应该实现为一个可调用对象，例如函数、方法、类、含<strong>call</strong>方法的实例。这个可调用对象可以接收2个参数：</p><ul><li>一个字典，该字典可以包含了客户端请求的信息以及其他信息，可以认为是请求上下文，一般叫做environment（编码中多简写为environ、env）；</li><li>一个用于发送HTTP响应状态（HTTP status ）、响应头（HTTP headers）的回调函数。</li></ul><p>同时，可调用对象的返回值是响应正文（response body），响应正文是可迭代的、并包含了多个字符串。</p></li></ul><p>Python内置的简单的WSGI Server不支持并发，Gunicore是基于gevent的，协程支持的协作式并发。</p><p><strong>Gevent WSGI server</strong></p><p>支持的并发度比python内置的wsgi高很多</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span>  Flask</div><div class="line"><span class="keyword">import</span> gevent.pywsgi</div><div class="line"><span class="keyword">import</span> gevent</div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line"></div><div class="line"><span class="meta">@app.route('/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'welcome to gevent lesson!'</span></div><div class="line"></div><div class="line">gevent_server = gevent.pywsgi.WSGIServer((<span class="string">''</span>, <span class="number">5000</span>), app)</div><div class="line">gevent_server.serve_forever()</div></pre></td></tr></table></figure><p>在实际的web项目部署时，我们一般使用Gunicore或Uwsgi做wsgi服务器。</p><h3 id="Gevent-长轮询"><a href="#Gevent-长轮询" class="headerlink" title="Gevent 长轮询"></a>Gevent 长轮询</h3><p>浏览网页时，浏览器会传HTTP请求到服务器，服务器会根据请求将网页的内容传给浏览器，但是在很多的情况下，使用者会需要看到最新的即时性资讯，例如观看股票市场行情，如果靠重新载入网页才能获得最新信息，不但很浪费时间，实时效果差，也会浪费网络资源。</p><ul><li>轮询：每隔一段时间向服务器发送一次请求，以获取最新的数据。</li><li>长时间轮询（long-polling）是让服务器在接收到浏览器发出的HTTP请求后，服务器会等待一段时间，若在这段时间里面伺服器有新的数据更新，它就会把最新的数据传给浏览器，如果等待的时间到了之后也没有新资料的话，就会送一个回应给浏览器，告知浏览器资料没有更新。</li><li>长时间轮询可以减少产生轮询（polling）造成网路频宽浪费的状况。</li></ul><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><ul><li>浏览器向服务器发送Ajax请求，当接收到服务器响应后，需要向服务求发送新的请求</li><li>服务器端要能够一直保持住客户端的请求，直到有响应消息；同时服务器对请求的处理要支持非阻塞模式</li><li>需要使用Event，python内置Event是阻塞的，gevent的却是非阻塞的。</li></ul><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>不停请求数据的ajax js脚本：<code>complete: longPolling</code> 执行完成后继续回调自身，循环执行。</p><p>Post的数据包含请求服务器数据的ID，服务器根据ID返回的数据对浏览器来说就是最新的数据。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Long Pooling<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"inbox"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"state"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> id = <span class="literal">null</span>; <span class="comment">// id为空时，服务器返回最新的数据</span></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">longPolling</span>(<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">        $.ajax(&#123;</span></div><div class="line"><span class="javascript">            url: <span class="string">"update"</span>,</span></div><div class="line"><span class="javascript">            data: &#123;<span class="string">"id"</span>: id&#125;,</span></div><div class="line"><span class="javascript">            type: <span class="string">"POST"</span>,</span></div><div class="line"><span class="javascript">            error: <span class="function"><span class="keyword">function</span> (<span class="params">XMLHttpRequest, textStatus, errorThrown</span>) </span>&#123;</span></div><div class="line"><span class="javascript">                $(<span class="string">"#state"</span>).append(<span class="string">"[state: "</span> + textStatus + <span class="string">", error: "</span> + errorThrown + <span class="string">" ]&lt;br/&gt;"</span>);</span></div><div class="line"><span class="undefined">            &#125;,</span></div><div class="line"><span class="javascript">            success: <span class="function"><span class="keyword">function</span> (<span class="params">result, textStatus</span>) </span>&#123;</span></div><div class="line"><span class="javascript">                <span class="built_in">console</span>.log(result)</span></div><div class="line"><span class="javascript">                msg_data = <span class="built_in">eval</span>(<span class="string">"("</span> + result + <span class="string">")"</span>);</span></div><div class="line"><span class="javascript">                $(<span class="string">"#inbox"</span>).append(msg_data.html);</span></div><div class="line"><span class="undefined">                id = msg_data.id;</span></div><div class="line"><span class="javascript">                <span class="built_in">console</span>.log(msg_data)</span></div><div class="line"><span class="javascript">                $(<span class="string">"#message"</span>).val(<span class="string">""</span>);</span></div><div class="line"><span class="javascript">                $(<span class="string">"#state"</span>).append(<span class="string">"[state: "</span> + textStatus + <span class="string">" ]&lt;br/&gt;"</span>);</span></div><div class="line"><span class="undefined">            &#125;,</span></div><div class="line"><span class="undefined">            complete: longPolling</span></div><div class="line"><span class="undefined">        &#125;);</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="undefined">        longPolling();</span></div><div class="line"><span class="undefined">    &#125;)</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p>服务端要记录数据的编号，根据浏览器请求数据的ID返回数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> gevent.pywsgi <span class="keyword">import</span> WSGIServer</div><div class="line"><span class="keyword">from</span> gevent.event <span class="keyword">import</span> Event</div><div class="line"><span class="keyword">from</span> cgi <span class="keyword">import</span> escape</div><div class="line"><span class="keyword">import</span> uuid</div><div class="line"><span class="keyword">import</span> urlparse</div><div class="line"><span class="keyword">import</span> string</div><div class="line"><span class="keyword">import</span> random</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_request_data</span><span class="params">(field, env)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        request_body_size = int(env.get(<span class="string">'CONTENT_LENGTH'</span>, <span class="number">0</span>))</div><div class="line">    <span class="keyword">except</span> (ValueError):</div><div class="line">        request_body_size = <span class="number">0</span></div><div class="line">    request_body = env[<span class="string">'wsgi.input'</span>].read(request_body_size)</div><div class="line">    d = urlparse.parse_qs(request_body)</div><div class="line">    data = d.get(field, [<span class="string">''</span>])[<span class="number">0</span>]</div><div class="line">    <span class="keyword">return</span> data</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_response_data</span><span class="params">(response_body, start_response)</span>:</span></div><div class="line">    response_headers = [(<span class="string">'Content-Type'</span>, <span class="string">'text/html'</span>), (<span class="string">'Content-Length'</span>, str(len(response_body)))]</div><div class="line">    start_response(<span class="string">'200 OK'</span>, response_headers)</div><div class="line">    <span class="keyword">return</span> [response_body]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_json_data</span><span class="params">(msg_list)</span>:</span></div><div class="line">    msg_dict = &#123;&#125;</div><div class="line">    msg_dict[<span class="string">"html"</span>] = <span class="string">""</span></div><div class="line">    <span class="keyword">for</span> msg <span class="keyword">in</span> msg_list:</div><div class="line">        msg_dict[<span class="string">"html"</span>] += <span class="string">"&lt;div&gt;&#123;0&#125;&lt;/div&gt;"</span>.format(msg[<span class="string">"msg"</span>])</div><div class="line">    msg_dict[<span class="string">"id"</span>] = msg_list[<span class="number">-1</span>][<span class="string">"id"</span>]</div><div class="line">    res =  str(msg_dict)</div><div class="line">    <span class="keyword">return</span> res</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">id_generator</span><span class="params">(size=<span class="number">6</span>, chars=string.ascii_uppercase + string.digits)</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(random.choice(chars) <span class="keyword">for</span> _ <span class="keyword">in</span> range(size))</div><div class="line"></div><div class="line">file = open(<span class="string">'longpooling.html'</span>)</div><div class="line">chat_html = file.read()</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MessgaeBuffer</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.cache = []</div><div class="line">        self.message_event = Event()</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">empty</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> len(self.cache) == <span class="number">0</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">application</span><span class="params">(env, start_response)</span>:</span></div><div class="line">    env_val = env[<span class="string">'PATH_INFO'</span>]</div><div class="line">    <span class="keyword">if</span> env_val == <span class="string">"/create"</span>:</div><div class="line">        msg_item = &#123;&#125;</div><div class="line">        msg_item[<span class="string">"id"</span>] = str(uuid.uuid4())</div><div class="line">        msg_item[<span class="string">"msg"</span>] = id_generator()</div><div class="line">        <span class="keyword">print</span> <span class="string">"create msg %s"</span> % str(msg_item)</div><div class="line"></div><div class="line">        msgBuffer.cache.append(msg_item) <span class="comment"># 当有新数据时，通知协程</span></div><div class="line">        msgBuffer.message_event.set()  <span class="comment"># 此时event.wait()不会阻塞</span></div><div class="line">        msgBuffer.message_event.clear() <span class="comment"># 此时event.wait()会阻塞</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> generate_response_data(<span class="string">""</span>, start_response)</div><div class="line">    <span class="keyword">elif</span> env_val == <span class="string">"/update"</span>:</div><div class="line">        lastid = escape(get_request_data(<span class="string">"id"</span>, env))</div><div class="line">        <span class="keyword">if</span> msgBuffer.empty() <span class="keyword">or</span> msgBuffer.cache[<span class="number">-1</span>][<span class="string">"id"</span>] == lastid:</div><div class="line">            msgBuffer.message_event.wait() <span class="comment"># 没有数据或没有新数据，协程阻塞等待</span></div><div class="line">        <span class="keyword">for</span> index,m <span class="keyword">in</span> enumerate(msgBuffer.cache):</div><div class="line">            <span class="keyword">if</span> m[<span class="string">"id"</span>] == lastid:</div><div class="line">                <span class="keyword">return</span> generate_response_data( generate_json_data(             msgBuffer.cache[index+<span class="number">1</span>:])</div><div class="line">                                              , start_response)</div><div class="line">        <span class="keyword">return</span> generate_response_data(generate_json_data(msgBuffer.cache), start_response)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> generate_response_data(chat_html, start_response)</div><div class="line"></div><div class="line">msgBuffer = MessgaeBuffer()</div><div class="line"></div><div class="line">WSGIServer((<span class="string">'localhost'</span>, <span class="number">8080</span>), application).serve_forever()</div></pre></td></tr></table></figure><h4 id="使用websocket替代轮询实现推送"><a href="#使用websocket替代轮询实现推送" class="headerlink" title="使用websocket替代轮询实现推送"></a>使用websocket替代轮询实现推送</h4><p><strong>web socket</strong></p><ul><li>WebSocket是HTML5开始提供的一种在单个TCP 连接上进行全双工通讯的协议。WebSocket通讯协议于2011年被IETF定为标准RFC 6455，WebSocketAPI被W3C定为标准。</li><li>在WebSocketAPI中，浏览器和服务器只需要做一个握手的动作，然后，浏览器和服务器之间就形成了一条快速通道。两者之间就直接可以数据互相传送</li><li>很多网站实现推送技术所用的技术都是轮询。轮询是在特定的的时间间隔（如每1秒），由浏览器对服务器发出HTTPrequest，然后由服务器返回最新的数据给客户端的浏览器。这种传统的模式带来很明显的缺点，即浏览器需要不断的向服务器发出请求，然而HTTPrequest的header是非常长的，里面包含的数据可能只是一个很小的值，这样会占用很多的带宽和服务器资源。</li><li>而比较新的技术去做轮询的效果是Comet，使用了AJAX。但这种技术虽然可达到双向通信，但依然需要发出请求，而且在Comet中，普遍采用了长链接，这也会大量消耗服务器带宽和资源。</li><li>面对这种状况，HTML5定义了WebSocket协议，能更好的节省服务器资源和带宽并达到实时通讯。</li></ul><p><strong>web socket优势</strong></p><ul><li>服务器与客户端之间交换的数据包档头很小，大概只有2字节</li><li>服务器可以主动传送数据给客户端。</li></ul><h4 id="websocket实例"><a href="#websocket实例" class="headerlink" title="websocket实例"></a>websocket实例</h4><ul><li><p>html中创建websocket对象, ws.onmessage当有新message时进行处理</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Minimal websocket application<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://libs.baidu.com/jquery/2.1.4/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">            <span class="comment">// Open up a connection to our server</span></span></div><div class="line"><span class="javascript">            <span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">"ws://localhost:10000/"</span>);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">            <span class="comment">// What do we do when we get a message?</span></span></div><div class="line"><span class="javascript">            ws.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</span></div><div class="line"><span class="javascript">                $(<span class="string">"#placeholder"</span>).append(<span class="string">'&lt;p&gt;'</span> + evt.data + <span class="string">'&lt;/p&gt;'</span>)</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="javascript">            <span class="comment">// Just update our conn_status field with the connection status</span></span></div><div class="line"><span class="javascript">            ws.onopen = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</span></div><div class="line"><span class="javascript">                $(<span class="string">'#conn_status'</span>).html(<span class="string">'&lt;b&gt;Connected&lt;/b&gt;'</span>);</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="javascript">            ws.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</span></div><div class="line"><span class="javascript">                $(<span class="string">'#conn_status'</span>).html(<span class="string">'&lt;b&gt;Error&lt;/b&gt;'</span>);</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="javascript">            ws.onclose = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</span></div><div class="line"><span class="javascript">                $(<span class="string">'#conn_status'</span>).html(<span class="string">'&lt;b&gt;Closed&lt;/b&gt;'</span>);</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">        &#125;);</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>WebSocket Example<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"conn_status"</span>&gt;</span>Not Connected<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"placeholder"</span> <span class="attr">style</span>=<span class="string">"width:600px;height:300px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p>​</p></li><li><p>服务器中实现websocket处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> random</div><div class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> pywsgi, sleep</div><div class="line"><span class="keyword">from</span> geventwebsocket.handler <span class="keyword">import</span> WebSocketHandler</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebSocketApp</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, env, start_response)</span>:</span></div><div class="line">        ws = env[<span class="string">'wsgi.websocket'</span>] <span class="comment"># 获取websocket对象</span></div><div class="line">        x = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:  <span class="comment"># 创建并发送消息</span></div><div class="line">            data = json.dumps(&#123;<span class="string">'x'</span>:x, <span class="string">'y'</span> :random.randint(<span class="number">1</span>,<span class="number">5</span>)&#125;)</div><div class="line">            ws.send(data)</div><div class="line">            x += <span class="number">1</span></div><div class="line">            sleep(<span class="number">0.5</span>)</div><div class="line"></div><div class="line">server = pywsgi.WSGIServer((<span class="string">''</span>, <span class="number">10000</span>), WebSocketApp(), handler_class=WebSocketHandler)</div><div class="line">server.serve_forever()</div></pre></td></tr></table></figure><p>​</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;python Gevent&lt;/p&gt;
&lt;h3 id=&quot;进程、线程、协程&quot;&gt;&lt;a href=&quot;#进程、线程、协程&quot; class=&quot;headerlink&quot; title=&quot;进程、线程、协程&quot;&gt;&lt;/a&gt;进程、线程、协程&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;python 中的yie
      
    
    </summary>
    
      <category term="技术" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="并发编程" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
      <category term="Gevent" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/Gevent/"/>
    
    
      <category term="gevent" scheme="http://shuaiyy.cn/tags/gevent/"/>
    
  </entry>
  
  <entry>
    <title>Python 内省机制</title>
    <link href="http://shuaiyy.cn/2017/10/17/%E6%8A%80%E6%9C%AF/python-%E5%86%85%E7%9C%81(Introspection)/"/>
    <id>http://shuaiyy.cn/2017/10/17/技术/python-内省(Introspection)/</id>
    <published>2017-10-16T16:00:00.000Z</published>
    <updated>2017-11-07T09:45:43.249Z</updated>
    
    <content type="html"><![CDATA[<p>Python 内省机制</p><h1 id="内省-Introspection-是什么？"><a href="#内省-Introspection-是什么？" class="headerlink" title="内省(Introspection) 是什么？"></a>内省(Introspection) 是什么？</h1><p>在计算机科学中，内省指一种能力，可以确定对象是什么，包含何种信息，可以做什么。<br>Python 就是一门提供了内省机制的语言。</p><h1 id="Python-的内省机制"><a href="#Python-的内省机制" class="headerlink" title="Python 的内省机制"></a>Python 的内省机制</h1><ul><li>help 函数</li><li>sys 模块<br>sys模块中包含了系统，当前进程等相关的信息，例如</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">sys.platform</div><div class="line">sys.version</div><div class="line">sys.maxint</div><div class="line">sys.arg</div><div class="line">sys.path</div><div class="line">sys.modules123456</div></pre></td></tr></table></figure><ul><li>keyword模块<br>keyword.kwlist 包含Python所有的关键词</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; import keyword</div><div class="line">&gt;&gt;&gt; keyword.kwlist</div><div class="line">[&apos;and&apos;, &apos;as&apos;, &apos;assert&apos;, &apos;break&apos;, &apos;class&apos;, &apos;continue&apos;, &apos;def&apos;, &apos;del&apos;, &apos;elif&apos;, &apos;else&apos;, &apos;except&apos;, &apos;exec&apos;, &apos;finally&apos;, &apos;for&apos;, &apos;from&apos;, &apos;global&apos;, &apos;if&apos;, &apos;import&apos;, &apos;in&apos;, &apos;is&apos;, &apos;lambda&apos;, &apos;not&apos;, &apos;or&apos;, &apos;pass&apos;, &apos;print&apos;, &apos;raise&apos;, &apos;return&apos;, &apos;try&apos;, &apos;while&apos;, &apos;with&apos;, &apos;yield&apos;]</div></pre></td></tr></table></figure><ul><li>dir函数<br>返回由传入对象的属性排序后构成的列表</li><li><strong>builtins</strong>模块<br>包含Python中的内建函数</li><li>docstring</li><li><code>__name__</code>属性</li><li>hasattr函数</li><li>getattr函数</li><li>type函数</li><li>id函数</li><li>callable函数</li><li>isinstance函数</li><li>issubclass函数</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Python 内省机制&lt;/p&gt;
&lt;h1 id=&quot;内省-Introspection-是什么？&quot;&gt;&lt;a href=&quot;#内省-Introspection-是什么？&quot; class=&quot;headerlink&quot; title=&quot;内省(Introspection) 是什么？&quot;&gt;&lt;/a&gt;内省(
      
    
    </summary>
    
      <category term="技术" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="python" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/python/"/>
    
    
      <category term="python" scheme="http://shuaiyy.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python socket编程</title>
    <link href="http://shuaiyy.cn/2017/10/15/%E6%8A%80%E6%9C%AF/python%20socket%E7%BC%96%E7%A8%8B/"/>
    <id>http://shuaiyy.cn/2017/10/15/技术/python socket编程/</id>
    <published>2017-10-14T16:00:00.000Z</published>
    <updated>2017-11-07T09:44:50.659Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python-socket编程"><a href="#python-socket编程" class="headerlink" title="python socket编程"></a>python socket编程</h2><p>参考资料： </p><p><a href="http://www.cnblogs.com/sunailong/p/5057288.html" target="_blank" rel="external">socket编程</a></p><p><a href="http://www.cnblogs.com/sunailong/p/5058786.html" target="_blank" rel="external">SocketServer</a></p><h3 id="Socket简介"><a href="#Socket简介" class="headerlink" title="Socket简介"></a>Socket简介</h3><p>file可以对指定的文件进行打开、读写、关闭操作。socket是针对网络IO通信的，服务器和客户端之间进行打开、读写、关闭操作，也就是网络通信的核心与基础。</p><p>socket套接字，由Ip地址和port端口组成的元组，可以唯一确定网络通信的主体。</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171024/98eH8J6k3a.png?imageslim" alt="mark"></p><h3 id="简单的示例"><a href="#简单的示例" class="headerlink" title="简单的示例"></a>简单的示例</h3><blockquote><p>这个示例是阻塞型的，即服务器只能一次处理一个连接</p><p>同时处理多个连接，可以使用进程fork，线程，以及异步I/O</p></blockquote><ul><li><p>服务器端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> socket</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Server</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, Host=None, Port=None)</span>:</span></div><div class="line">        self.socket = socket.socket()</div><div class="line">        host = Host <span class="keyword">if</span> Host <span class="keyword">else</span> socket.gethostname()</div><div class="line">        port = Port <span class="keyword">if</span> Port <span class="keyword">else</span> <span class="number">12345</span></div><div class="line">        self.socket.bind((host, port))</div><div class="line">        <span class="keyword">print</span> <span class="string">u'服务器主机名：'</span>, host</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run_server</span><span class="params">(self)</span>:</span></div><div class="line">        self.socket.listen(<span class="number">5</span>)</div><div class="line">        coon, addr = self.socket.accept()</div><div class="line">        <span class="keyword">print</span> <span class="string">u'地址为%s的主机已连接！'</span> % str(addr)</div><div class="line">        coon.send(<span class="string">u'连接成功！你的地址%s'</span> % str(addr))</div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            <span class="keyword">if</span> str(coon.recv(<span class="number">1024</span>)) == <span class="string">'q'</span>:</div><div class="line">                coon.send(<span class="string">'bye!'</span>)</div><div class="line">                coon.close()</div><div class="line">                <span class="keyword">break</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                text = coon.recv(<span class="number">1024</span>)</div><div class="line">                coon.send(<span class="string">u'你的问题是：%s'</span> %text)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    s = Server()</div><div class="line">    s.run_server()</div></pre></td></tr></table></figure></li><li><p>客户端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> socket</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    s = socket.socket()</div><div class="line">    s.connect((socket.gethostname(), <span class="number">12345</span>))</div><div class="line">    <span class="keyword">print</span> s.recv(<span class="number">1024</span>)</div><div class="line">    s.send(<span class="string">u'hello, 这是一个客户端连接！'</span>)</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        text = raw_input(<span class="string">"请输入：\n"</span>)</div><div class="line">        <span class="keyword">if</span>  text == <span class="string">'q'</span>:</div><div class="line">            s.send(text)</div><div class="line">            <span class="keyword">print</span> s.recv(<span class="number">1024</span>)</div><div class="line">            <span class="keyword">break</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            s.send(text)</div><div class="line">            ret_text = s.recv(<span class="number">1024</span>)</div><div class="line">            <span class="keyword">print</span> str(ret_text)</div></pre></td></tr></table></figure><p>​</p></li></ul><h3 id="SocketServer"><a href="#SocketServer" class="headerlink" title="SocketServer"></a>SocketServer</h3><p>利用socket模块创建的服务无法进行多进程的处理，当需要进行大量请求处理时，请求就会阻塞在队列中，甚至发生请求丢弃。并且如果我们需要大量的socket时，就需要重复创建许多socket、绑定端口….. </p><p>SocketServer简化了网络服务器的编写。在进行socket创建时，使用SocketServer会大大减少创建的步骤，并且SocketServer使用了select它有4个类：TCPServer，UDPServer，UnixStreamServer，UnixDatagramServer。这4个类是同步进行处理的，另外通过ForkingMixIn和ThreadingMixIn类来支持异步。</p><h4 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h4><p><strong>使用SocketServer的步骤简介</strong></p><ol><li>创建服务器的步骤。首先，你必须创建一个请求处理类，它是BaseRequestHandler的子类并重载其handle()方法。</li><li>实例化一个服务器类，传入服务器的地址和请求处理程序类。</li><li>最后，调用handle_request()(一般是调用其他事件循环或者使用select())或serve_forever()。</li><li>集成ThreadingMixIn类时需要处理异常关闭。daemon_threads指示服务器是否要等待线程终止，要是线程互相独立，必须要设置为True，默认是False。</li><li>无论用什么网络协议，服务器类有相同的外部方法和属性</li></ol><h4 id="实例：echo服务器"><a href="#实例：echo服务器" class="headerlink" title="实例：echo服务器"></a>实例：echo服务器</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> SocketServer</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line">logging.basicConfig(level=logging.DEBUG, format=<span class="string">'%(name)s: %(message)s'</span>,)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EchoRequestHandler</span><span class="params">(SocketServer.BaseRequestHandler)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, request, client_address, server)</span>:</span></div><div class="line">        self.logger = logging.getLogger(<span class="string">'EchoRequestHandler'</span>)</div><div class="line">        self.logger.debug(<span class="string">'__init__'</span>)</div><div class="line">        SocketServer.BaseRequestHandler.__init__(self, request, client_address, server)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup</span><span class="params">(self)</span>:</span></div><div class="line">        self.logger.debug(<span class="string">'setup'</span>)</div><div class="line">        <span class="keyword">return</span> SocketServer.BaseRequestHandler.setup(self)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self)</span>:</span></div><div class="line">        self.logger.debug(<span class="string">'handle'</span>)</div><div class="line"></div><div class="line">        <span class="comment"># Echo the back to the client</span></div><div class="line">        data = self.request.recv(<span class="number">1024</span>)</div><div class="line">        self.logger.debug(<span class="string">'recv()-&gt;"%s"'</span>, data)</div><div class="line">        self.request.send(data)</div><div class="line">        <span class="keyword">return</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">finish</span><span class="params">(self)</span>:</span></div><div class="line">        self.logger.debug(<span class="string">'finish'</span>)</div><div class="line">        <span class="keyword">return</span> SocketServer.BaseRequestHandler.finish(self)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EchoServer</span><span class="params">(SocketServer.TCPServer)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, server_address, handler_class=EchoRequestHandler)</span>:</span></div><div class="line">        self.logger = logging.getLogger(<span class="string">'EchoServer'</span>)</div><div class="line">        self.logger.debug(<span class="string">'__init__'</span>)</div><div class="line">        SocketServer.TCPServer.__init__(self, server_address, handler_class)</div><div class="line">        <span class="keyword">return</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">server_activate</span><span class="params">(self)</span>:</span></div><div class="line">        self.logger.debug(<span class="string">'server_activate'</span>)</div><div class="line">        SocketServer.TCPServer.server_activate(self)</div><div class="line">        <span class="keyword">return</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">serve_forever</span><span class="params">(self)</span>:</span></div><div class="line">        self.logger.debug(<span class="string">'waiting for request'</span>)</div><div class="line">        self.logger.info(<span class="string">'Handling requests, press &lt;Ctrl-C&gt; to quit'</span>)</div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            self.handle_request()</div><div class="line">        <span class="keyword">return</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_request</span><span class="params">(self)</span>:</span></div><div class="line">        self.logger.debug(<span class="string">'handle_request'</span>)</div><div class="line">        <span class="keyword">return</span> SocketServer.TCPServer.handle_request(self)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">verify_request</span><span class="params">(self, request, client_address)</span>:</span></div><div class="line">        self.logger.debug(<span class="string">'verify_request(%s, %s)'</span>, request, client_address)</div><div class="line">        <span class="keyword">return</span> SocketServer.TCPServer.verify_request(self, request, client_address)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request, client_address)</span>:</span></div><div class="line">        self.logger.debug(<span class="string">'process_request(%s, %s)'</span>, request, client_address)</div><div class="line">        <span class="keyword">return</span> SocketServer.TCPServer.process_request(self, request, client_address)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">server_close</span><span class="params">(self)</span>:</span></div><div class="line">        self.logger.debug(<span class="string">'server_close'</span>)</div><div class="line">        <span class="keyword">return</span> SocketServer.TCPServer.server_close(self)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">finish_request</span><span class="params">(self, request, client_address)</span>:</span></div><div class="line">        self.logger.debug(<span class="string">'finish_request(%s, %s)'</span>, request, client_address)</div><div class="line">        <span class="keyword">return</span> SocketServer.TCPServer.finish_request(self, request, client_address)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_request</span><span class="params">(self, request_address)</span>:</span></div><div class="line">        self.logger.debug(<span class="string">'close_request(%s)'</span>, request_address)</div><div class="line">        <span class="keyword">return</span> SocketServer.TCPServer.close_request(self, request_address)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    address = (<span class="string">'localhost'</span>, <span class="number">0</span>) <span class="comment"># let the kernel give us a port</span></div><div class="line">    server = EchoServer(address, EchoRequestHandler)</div><div class="line">    ip, port = server.server_address <span class="comment"># find out what port we were given</span></div><div class="line"></div><div class="line">    logger = logging.getLogger(<span class="string">'client'</span>)</div><div class="line">    logger.info(<span class="string">'Server on %s:%s'</span>, ip, port)</div><div class="line"></div><div class="line">    server.serve_forever()</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;python-socket编程&quot;&gt;&lt;a href=&quot;#python-socket编程&quot; class=&quot;headerlink&quot; title=&quot;python socket编程&quot;&gt;&lt;/a&gt;python socket编程&lt;/h2&gt;&lt;p&gt;参考资料： &lt;/p&gt;
&lt;p&gt;&lt;a h
      
    
    </summary>
    
      <category term="技术" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络编程" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
      <category term="socket" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/socket/"/>
    
    
      <category term="python" scheme="http://shuaiyy.cn/tags/python/"/>
    
      <category term="socket" scheme="http://shuaiyy.cn/tags/socket/"/>
    
  </entry>
  
  <entry>
    <title>Python logging模块使用</title>
    <link href="http://shuaiyy.cn/2017/10/14/%E6%8A%80%E6%9C%AF/Python%20logging%E6%A8%A1%E5%9D%97/"/>
    <id>http://shuaiyy.cn/2017/10/14/技术/Python logging模块/</id>
    <published>2017-10-13T16:00:00.000Z</published>
    <updated>2017-11-07T09:42:17.487Z</updated>
    
    <content type="html"><![CDATA[<p>Python logging模块</p><h3 id="为啥要用日志模块"><a href="#为啥要用日志模块" class="headerlink" title="为啥要用日志模块"></a>为啥要用日志模块</h3><p>当我们编写python程序时，希望能到输出一些调试信息，一般情况我们用print打印出想要的信息。</p><p>使用print的缺点：</p><ol><li>输出信息没有分级</li><li>程序发布时，要修改所有的print语句</li><li>无法输出信息到文件，或者发邮件</li></ol><p>使用python的日志系统，就可以解决上述问题。</p><h3 id="简单使用示例"><a href="#简单使用示例" class="headerlink" title="简单使用示例"></a>简单使用示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"> </div><div class="line"><span class="comment"># 获取logger实例，如果参数为空则返回root logger</span></div><div class="line">logger = logging.getLogger(<span class="string">"AppName"</span>)</div><div class="line"> </div><div class="line"><span class="comment"># 指定logger输出格式</span></div><div class="line">formatter = logging.Formatter(<span class="string">'%(asctime)s %(levelname)-8s: %(message)s'</span>)</div><div class="line"> </div><div class="line"><span class="comment"># 文件日志</span></div><div class="line">file_handler = logging.FileHandler(<span class="string">"test.log"</span>)</div><div class="line">file_handler.setFormatter(formatter)  <span class="comment"># 可以通过setFormatter指定输出格式</span></div><div class="line"> </div><div class="line"><span class="comment"># 控制台日志</span></div><div class="line">console_handler = logging.StreamHandler(sys.stdout)</div><div class="line">console_handler.formatter = formatter  <span class="comment"># 也可以直接给formatter赋值</span></div><div class="line"> </div><div class="line"><span class="comment"># 为logger添加的日志处理器</span></div><div class="line">logger.addHandler(file_handler)</div><div class="line">logger.addHandler(console_handler)</div><div class="line"> </div><div class="line"><span class="comment"># 指定日志的最低输出级别，默认为WARN级别</span></div><div class="line">logger.setLevel(logging.INFO)</div><div class="line"> </div><div class="line"><span class="comment"># 输出不同级别的log</span></div><div class="line">logger.debug(<span class="string">'this is debug info'</span>)</div><div class="line">logger.info(<span class="string">'this is information'</span>)</div><div class="line">logger.warn(<span class="string">'this is warning message'</span>)</div><div class="line">logger.error(<span class="string">'this is error message'</span>)</div><div class="line">logger.fatal(<span class="string">'this is fatal message, it is same as logger.critical'</span>)</div><div class="line">logger.critical(<span class="string">'this is critical message'</span>)</div><div class="line"><span class="comment"># 移除一些日志处理器</span></div><div class="line">logger.removeHandler(file_handler)</div></pre></td></tr></table></figure><ol><li>获取一个logger对象</li><li>添加Handler日志处理器</li><li>设置logger输出级别</li></ol><h3 id="GetLogger"><a href="#GetLogger" class="headerlink" title="GetLogger"></a>GetLogger</h3><p>这是最基本的入口，该方法参数可以为空，默认的logger名称是root，如果在同一个程序中一直都使用同名的logger，其实会拿到同一个实例，使用这个技巧就可以跨模块调用同样的logger来记录日志。</p><p>另外你也可以通过日志名称来区分同一程序的不同模块，比如这个例子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">logger = logging.getLogger(<span class="string">"App.UI"</span>)</div><div class="line">logger = logging.getLogger(<span class="string">"App.Service"</span>)</div></pre></td></tr></table></figure><p><strong>注意</strong>： 尽量不使用root logger，因为所有其他logger的输出，默认都会传给root一份，因而会出现多次root的日志输出。</p><p>同一日志被多次输出的原因，是绑定了多个handler。</p><p>比如下面这种常见的错误，每次调用<code>get_logger()</code>拿到的都是同一个logger实例App，但是每次调用都绑定一个console_handler，当这个函数被调用3次，App logger就会一次输出3条信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_logger</span><span class="params">()</span>:</span></div><div class="line">    fmt = <span class="string">'%(levelname)s: %(message)s'</span></div><div class="line">    console_handler = logging.StreamHandler()</div><div class="line">    console_handler.setFormatter(logging.Formatter(fmt))</div><div class="line">    logger = logging.getLogger(<span class="string">'App'</span>) <span class="comment"># 返回的是同一个实例</span></div><div class="line">    logger.setLevel(logging.INFO)</div><div class="line">    logger.addHandler(console_handler)</div><div class="line">    <span class="keyword">return</span> logger</div></pre></td></tr></table></figure><h3 id="Formatter日志格式"><a href="#Formatter日志格式" class="headerlink" title="Formatter日志格式"></a>Formatter日志格式</h3><p><code>format = logging.Formatter(fmt=&quot;&quot;, datefmt=&quot;&quot;)</code></p><p>Formatter对象定义了log信息的结构和内容，构造时需要带两个参数：</p><ul><li>一个是格式化的模板<code>fmt</code>，默认会包含最基本的<code>level</code>和 <code>message</code>信息</li><li>一个是格式化的时间样式<code>datefmt</code>，默认为 <code>2003-07-08 16:49:45,896 (%Y-%m-%d %H:%M:%S)</code></li></ul><p><code>fmt</code>中允许使用的变量可以参考下表。</p><ul><li><strong>%(name)s</strong> Logger的名字</li><li><strong>%(levelno)s</strong> 数字形式的日志级别</li><li><strong>%(levelname)s</strong> 文本形式的日志级别</li><li><strong>%(pathname)s</strong> 调用日志输出函数的模块的完整路径名，可能没有</li><li><strong>%(filename)s</strong> 调用日志输出函数的模块的文件名</li><li><strong>%(module)s</strong> 调用日志输出函数的模块名|</li><li><strong>%(funcName)s</strong> 调用日志输出函数的函数名|</li><li><strong>%(lineno)d</strong> 调用日志输出函数的语句所在的代码行</li><li><strong>%(created)f</strong> 当前时间，用UNIX标准的表示时间的浮点数表示|</li><li><strong>%(relativeCreated)d</strong> 输出日志信息时的，自Logger创建以来的毫秒数|</li><li><strong>%(asctime)s</strong> 字符串形式的当前时间。默认格式是“2003-07-08 16:49:45,896”。逗号后面的是毫秒</li><li><strong>%(thread)d</strong> 线程ID。可能没有</li><li><strong>%(threadName)s</strong> 线程名。可能没有</li><li><strong>%(process)d</strong> 进程ID。可能没有</li><li><strong>%(message)s</strong> 用户输出的消息</li></ul><p><strong>fmt示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">format = <span class="string">'%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s'</span></div><div class="line">datefmt=<span class="string">'%a, %d %b %Y %H:%M:%S'</span></div><div class="line"><span class="comment"># output: Sun, 24 May 2009 21:48:54 demo2.py[line:11] DEBUG This is debug message</span></div></pre></td></tr></table></figure><h3 id="SetLevel-日志级别"><a href="#SetLevel-日志级别" class="headerlink" title="SetLevel 日志级别"></a>SetLevel 日志级别</h3><p>Logging有如下级别: NOTSET， DEBUG，INFO，WARNING，ERROR，CRITICAL，<br>默认级别是WARNING，logging模块只会输出指定level以上的log。这样的好处, 就是在项目开发时debug用的log，在产品release阶段不用一一注释，只需要调整logger的级别就可以了，很方便。</p><h3 id="Handler-日志处理器"><a href="#Handler-日志处理器" class="headerlink" title="Handler 日志处理器"></a>Handler 日志处理器</h3><p>最常用的是StreamHandler和FileHandler, Handler用于向不同的输出端打log。<br>Logging包含很多handler, 可能用到的有下面几种</p><ul><li><strong>StreamHandler</strong> instances send error messages to streams (file-like objects).</li><li><strong>FileHandler</strong> instances send error messages to disk files.</li><li><strong>RotatingFileHandler</strong> instances send error messages to disk files, with support for maximum log file sizes and log file rotation.</li><li><strong>TimedRotatingFileHandler</strong> instances send error messages to disk files, rotating the log file at certain timed intervals.</li><li><strong>SocketHandler</strong> instances send error messages to TCP/IP sockets.</li><li><strong>DatagramHandler</strong> instances send error messages to UDP sockets.</li><li><strong>SMTPHandler</strong> instances send error messages to a designated email address.</li></ul><h3 id="Configuration-配置方法"><a href="#Configuration-配置方法" class="headerlink" title="Configuration 配置方法"></a>Configuration 配置方法</h3><p>logging的配置大致有下面几种方式。</p><ol><li><p>通过代码进行完整配置，主要是通过getLogger方法实现,并绑定handler。</p></li><li><p>通过代码进行简单配置，主要是通过basicConfig方法实现。</p><p>basicConfig获取到的是root logger，默认的handler是stream。</p><p>传入的参数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">filename  FileHandler be created, using the filename, rather than a StreamHandler.</div><div class="line">filemode  the mode to open the file, if filename is specified ( defaults to &apos;a&apos;).</div><div class="line">format    Use the specified format string for the handler.</div><div class="line">datefmt   Use the specified date/time format.</div><div class="line">level     Set the root logger level to the specified level.</div><div class="line">stream    Use the specified stream to initialize the StreamHandler. Note</div><div class="line">          that this argument is incompatible with &apos;filename&apos; - if both</div><div class="line">          are present, &apos;stream&apos; is ignored.</div></pre></td></tr></table></figure></li><li><p>通过配置文件，下面有例子，主要是通过 <code>logging.config.fileConfig(filepath)</code></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Python logging模块&lt;/p&gt;
&lt;h3 id=&quot;为啥要用日志模块&quot;&gt;&lt;a href=&quot;#为啥要用日志模块&quot; class=&quot;headerlink&quot; title=&quot;为啥要用日志模块&quot;&gt;&lt;/a&gt;为啥要用日志模块&lt;/h3&gt;&lt;p&gt;当我们编写python程序时，希望能到输出一
      
    
    </summary>
    
      <category term="技术" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="python" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/python/"/>
    
    
      <category term="Python" scheme="http://shuaiyy.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python super与多重继承顺序</title>
    <link href="http://shuaiyy.cn/2017/10/14/%E6%8A%80%E6%9C%AF/Python-super%E5%AF%B9%E8%B1%A1/"/>
    <id>http://shuaiyy.cn/2017/10/14/技术/Python-super对象/</id>
    <published>2017-10-13T16:00:00.000Z</published>
    <updated>2017-11-07T09:45:04.279Z</updated>
    
    <content type="html"><![CDATA[<p>python多重继承的顺序</p><h2 id="Python-super对象"><a href="#Python-super对象" class="headerlink" title="Python super对象"></a>Python super对象</h2><ol><li><p><code>Base.__init__(self, args)</code></p><p>在Python2.2以前，未绑定的父类构造方法经常被使用<code>A.__init__(self)</code></p><p>这种做法的缺点是，</p><ul><li>当多重继承以后，想要修改代码的话，比如某个基类改名字了，那么所有调用该类方法的代码部分都要修改。</li><li>基类的方法可能会被多次调用</li><li>要保证子类能够覆盖父类，及生成所有的子类后再生成父类。这要看代码的质量，如果继承关系复杂，很容易把人搞晕。</li></ul></li><li><p><code>super(Child, self).__init__(args)</code></p><p>在Python类的方法中，要调用父类的某个方法，一般会用<code>super(X, self).func(args)</code>,尤其是在类初始化中。</p><p>使用super不会显示的调用父类方法。super对象会根据继承关系的顺序依次执行每个父类的<code>__init__</code>方法,如果每个类都使用super调用父类方法的话，那么可以确保每个类的<code>__init__</code>只会执行一次。</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>：</span></div><div class="line"><span class="class">    <span class="title">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'A'</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></div><div class="line">  <span class="comment"># 直接调用类方法</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">      A.__init__(self)</div><div class="line">      <span class="keyword">print</span> <span class="string">'B'</span></div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(A)</span>:</span></div><div class="line">  <span class="comment"># 使用super构造</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">      super(C, self).__init__(self)</div><div class="line">      <span class="keyword">print</span> <span class="string">'C'</span></div></pre></td></tr></table></figure><p>假如有如下继承关系，F继承E, D; E继承B和C；C和D都继承A， A和B都继承Object对象，且ABCDE都使用了<code>super()</code></p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171023/LA68m90g5L.png?imageslim" alt="mark"></p><p>那么实例化F对象时，继承顺序为F E B C D A object,符合拓扑排序。</p><p>拓扑排序满足关系，A的子节点B，一定不会出现在A之前。对于继承关系，这可以保证所有的子类先被访问，然后在访问它们的父类，不然就会造成父类方法没有被子类覆盖的情况。</p><h2 id="MRO算法和C3算法"><a href="#MRO算法和C3算法" class="headerlink" title="MRO算法和C3算法"></a>MRO算法和C3算法</h2><p>MRO(Method Resolution Order决定python多重继承的继承顺序)。</p><p>MRO在python2.7和python3中没有采用BFS或DFS，而是C3算法，能够产生一个拓扑序列，保证唯一性和可重载性。</p><h3 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h3><p>对一个有向无环图(Directed Acyclic Graph简称DAG)G进行拓扑排序，是将G中所有顶点排成一个线性序列，使得图中任意一对顶点u和v，若边(u,v)∈E(G)，则u在线性序列中出现在v之前。通常，这样的线性序列称为满足拓扑次序(Topological Order)的序列，简称拓扑序列。简单的说，由某个集合上的一个偏序得到该集合上的一个全序，这个操作称之为拓扑排序</p><p>### </p><h3 id="C3算法的原理"><a href="#C3算法的原理" class="headerlink" title="C3算法的原理"></a>C3算法的原理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">L[D(B,C)] </div><div class="line">= D + merge(L[B],L[C],[B,C])</div><div class="line"></div><div class="line">以上表达式也等同于： </div><div class="line">==&gt; </div><div class="line">Ｌ[D(B,C)] = D + merge(mro(B,object),mro(C,object),[B,C]) ==&gt; Ｌ[D(B,C)] = D + merge( [B,object], [C, object],[B,C])  [] : 列表表达式</div><div class="line">merge: Ｃ3算法的核心</div></pre></td></tr></table></figure><blockquote><p>《python高级编程》中是这样写的： 取第一个列表的头，也就是L[B,object] ，如果这个头不在任何表的尾部，那么将它加到class D的线性表中，并且从合并中的列表里删除 ；否则查找下一个列表的头，如果是个好的表头则取出它。 需要注意的是： 表头指是第一个元素 ，尾部是指除表头之外的其它所有元素 。如[A,B,C,D,E,F],A是表头，[B,C,D,E,F]是尾部。</p></blockquote><p>方式解析：</p><p>L(D(B,C)) =  D + merge( [B,object] ,[C,object] , [B,C] )  </p><p>​                  #列表[B,object]的表头是Ｂ，没有出现在其它表([C,object] 、[B,C] )的尾部 </p><p>​               =  [D, B] + merge( [object], [C,object] , [C] )   </p><p>​                  #列表[Ｃ,object]的表头是Ｃ，没有出现在其它表([object] 、[C] )的尾部 ，注意 [C] 这个列表只有表头，没有尾部</p><p>​               =  [D, B,C] + merge( [object] , [object] )</p><p>​               =  [D, B,C,object]                                 </p><h3 id="C3算法产生拓扑序列"><a href="#C3算法产生拓扑序列" class="headerlink" title="C3算法产生拓扑序列"></a>C3算法产生拓扑序列</h3><p>对于以下的继承关系，其顺序为：<code>ABECDF object</code> </p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171023/6FC3c7EL6I.png?imageslim" alt="mark"></p><p>首先找入度为0的点，只有一个A，把A拿出来，把A相关的边剪掉，再找下一个入度为0的点，有两个点（B,C）,取最左原则，拿B，这是排序是AB，然后剪B相关的边，这时候入度为0的点有E和C，取最左。这时候排序为ABE，接着剪E相关的边，这时只有一个点入度为0，那就是C，取C，顺序为ABEC。剪C的边得到两个入度为0的点（DF），取最左D，顺序为ABECD，然后剪D相关的边，那么下一个入度为0的就是F，然后是object。那么最后的排序就为ABECDF object。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;python多重继承的顺序&lt;/p&gt;
&lt;h2 id=&quot;Python-super对象&quot;&gt;&lt;a href=&quot;#Python-super对象&quot; class=&quot;headerlink&quot; title=&quot;Python super对象&quot;&gt;&lt;/a&gt;Python super对象&lt;/h2&gt;&lt;ol&gt;
      
    
    </summary>
    
      <category term="技术" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="python" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/python/"/>
    
    
      <category term="python" scheme="http://shuaiyy.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>PyQt5 编译PyQt5 (python27, windows x64)</title>
    <link href="http://shuaiyy.cn/2017/10/13/%E6%8A%80%E6%9C%AF/PyQt5.9%E7%BC%96%E8%AF%91%20python27%2064%E4%BD%8DWindows%E7%89%88/"/>
    <id>http://shuaiyy.cn/2017/10/13/技术/PyQt5.9编译 python27 64位Windows版/</id>
    <published>2017-10-12T16:00:00.000Z</published>
    <updated>2017-11-07T09:37:53.936Z</updated>
    
    <content type="html"><![CDATA[<p><strong>编译PyQt5.9 基于python2.7  Windows 64位版</strong></p><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p><strong>自己编译的PyQt5的原因</strong></p><ul><li><p>python27下，pyqt5没有官方支持的安装包， python3下可以直接安装</p></li><li><p>python-qt5是第三方编译提供的，pypi上pyqt版本为5.3，github上源码为5.7，不是最新版</p></li><li><p>使用python-qt5编写的程序使用pyinstaller打包，import sip error， sip对于py27也是需要自己编译安装的。</p><p>在我折腾了1天编译成功PyQt5.9后，突发奇想，尝试把PyQt5.sip这个包，直接复制到site-packages目录下，然后打包时使用<code>--hidden-import import sip</code>就可以了。</p></li></ul><p><strong>参考相关资料和教程：</strong></p><ol><li><p><a href="https://zhuanlan.zhihu.com/p/25561911?utm_source=itdadao&amp;utm_medium=referral" target="_blank" rel="external">构建PyQt5.8/python2.7</a></p><p> py32版本的，作者给出了编译后的win，linux，mac下的PyQt包，编译步骤较为详细</p></li><li><p><a href="http://www.bubuko.com/infodetail-2046265.html" target="_blank" rel="external">记录在Python2.7 x64 bit 下 PyQt5.8的编译过程</a></p><p> 配置编译环境可供参考，编译过程嘛，呵呵。</p></li><li><p>编译的configure参数，可以参考<a href="http://pyqt.sourceforge.net/Docs/PyQt5/installation.html#building-and-installing-from-source" target="_blank" rel="external">pyqt5官网</a></p></li></ol><h2 id="记录编译过程"><a href="#记录编译过程" class="headerlink" title="记录编译过程"></a>记录编译过程</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul><li><p>vs2015编译环境</p><p>我用的 visual studio 2015社区版本，安装的时候选择自定义，把c++的组件勾选上。</p><p>由于我选了默认安装，没有c++编译工具，安装好后还得打开vs2015，在新建c++项目的界面选择安装C++组件，又多花了近一个小时。</p><p>VS的安装过程十分漫长，需要数个小时，因为是在线安装。如果下载了完整的离线安装包，应该会很快。</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171019/02jfGB5CjJ.png?imageslim" alt="mark"></p></li><li><p>Qt5.8环境</p><p>如果是vs2013环境，就下对应MSVC2013的Qt</p><p><a href="http://mirrors.ustc.edu.cn/qtproject/archive/qt/5.8/5.8.0/qt-opensource-windows-x86-msvc2015_64-5.8.0.exe" target="_blank" rel="external">MSVC2015版64位Qt5.8</a></p></li><li><p>python2.7</p><p>在虚拟python环境下编译sip失败，编译pyqt5时没有报错。</p><p>后来干脆搞个全新的python27来编译PyQt5，干净清爽。</p></li><li><p>环境变量</p><p>新增变量名：QTDIR，值：C:\Qt\Qt5.8.0\5.8\msvc2015_64</p><p>在path变量中添加路径：C:\Qt\Qt5.8.0\5.8\msvc2015_64\bin</p><p>在path变量中添加新装的python27的路径。</p><p>为了避免不必要的问题，新增的变量放在path的最前面，编译完成后再删掉即可。</p></li><li><p>PyQt相关源码包</p><p><a href="https://sourceforge.net/projects/pyqt/files/?source=navbar" target="_blank" rel="external">下载对应版本的pyqt</a>，PyQt5， PyQt3D，Qscintilla2，Sip。</p><p>应该是pyqt5.8对应qt5.8。一开始我用的pyqt5.9+qt5.8，智障了。</p></li></ul><h3 id="开始编译"><a href="#开始编译" class="headerlink" title="开始编译"></a>开始编译</h3><h4 id="编译SIP"><a href="#编译SIP" class="headerlink" title="编译SIP"></a>编译SIP</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> cd sip-4.19.2</div><div class="line"><span class="meta">$</span> c:\python27\python.exe configure.py</div><div class="line"><span class="meta">$</span> nmake</div><div class="line"><span class="meta">$</span> nmake install # 这个安装命令放到最最后面在执行</div></pre></td></tr></table></figure><p>得到的sip可执行文件在sipgen中，sip的Python模块（sip.pyd或sip.so）在siplib中。这时不要nmake install安装sip，先编译安装pyqt5。</p><p>编译时出现问题<code>LINK : fatal error LNK1181: 无法打开输入文件“python27.lib”</code></p><p>原因可能是我用的anaconda的Python虚拟环境，后来用c:\python27\python.exe 没有报错。</p><h4 id="编译PyQt5"><a href="#编译PyQt5" class="headerlink" title="编译PyQt5"></a>编译PyQt5</h4><p>这里的sip使用的是编译生成的，不要使用nmake install之后的python路径下的那个。</p><p>QtNfc存在bug，不安装这个模块。</p><p>整个编译过程大概半个小时。</p><p><code>c:\Python27\python.exe configure.py --sip=..\sip-4.19.2\sipgen\sip.exe  --sip-incdir=..\sip-4.19.2\siplib --disable=QtNfc --qmake=C:\Qt\Qt5.8.0\5.8\msvc2015_64\bin\qmake.exe</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ cd PyQt5_gpl-5.8.2</div><div class="line">$ c:\Python27\python.exe configure.py --sip=..\sip-4.19.2\sipgen\sip.exe  --sip-incdir=..\sip-4.19.2\siplib --disable=QtNfc --qmake=C:\Qt\Qt5.8.0\5.8\msvc2015_64\bin\qmake.exe</div><div class="line">$ nmake</div><div class="line">$ nmake install</div></pre></td></tr></table></figure><p>此时安装成功后，<code>import PyQt5.QtCore</code> 提示找不到dll，后面给解决方法。看打包整理部分。</p><h4 id="编译PyQt3D"><a href="#编译PyQt3D" class="headerlink" title="编译PyQt3D"></a>编译PyQt3D</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> cd PyQt3D_gpl-5.9</div><div class="line"><span class="meta">$</span> c:\Python27\python.exe configure.py --sip=..\sip-4.19.3\sipgen\sip.exe  --sip-incdir=..\sip-4.19.3\siplib  --qmake=C:\Qt\Qt5.8.0\5.8\msvc2015_64\bin\qmake.exe</div><div class="line"><span class="meta">$</span> nmake</div><div class="line"><span class="meta">$</span> nmake install</div></pre></td></tr></table></figure><h4 id="编译QScintilla2"><a href="#编译QScintilla2" class="headerlink" title="编译QScintilla2"></a><strong>编译QScintilla2</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> cd QScintilla_gpl-2.10\Qt4Qt5</div><div class="line"><span class="meta">$</span> C:\Qt\Qt5.8.0\5.8\msvc2015_64\bin\qmake.exe</div><div class="line"><span class="meta">$</span> nmake release</div><div class="line"><span class="meta">$</span> nmake install</div></pre></td></tr></table></figure><h4 id="打包整理"><a href="#打包整理" class="headerlink" title="打包整理"></a>打包整理</h4><p><strong>问题描述</strong></p><ol><li><p><code>PyQt5 ImportError: DLL load failed</code></p><p>from PyQt5 import QtCore时提示找不到dll</p></li><li><p>‘unresolved reference’ </p><p>pycharm idea里导入包没有自动补全提示</p></li></ol><p><strong>原因</strong></p><p>由于<code>nmake install</code>安装的PyQt5只是把 编译生成的文件copy到了Python site-packages的PyQt5文件夹下，bat，exe和dll文件需要我们手动复制，很麻烦的说。</p><p><strong>解决</strong></p><ol><li>复制相应的文件到PyQt5对应的位置</li></ol><p>建议使用everything这个软件，可以快速定位windows上的文件。</p><ul><li><p>Plugins</p><p>从<code>C:\Qt\Qt5.8.0\5.8\msvc2015_64\plugins\</code>复制到PyQt5下plugins文件夹，</p><p>会有3种文件，只保留xxx.dll,删除xxxd.dll和xxxd.pdb文件。</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171019/5hgCE1j82i.png?imageslim" alt="mark"></p></li><li><p><code>*.dll</code></p><p>从<code>C:\Qt\Qt5.8.0\5.8\msvc2015_64\bin\</code>下全部内容复制到PyQt5目录下</p><p>同上，包括xxx.dll，<code>*.exe</code> 等文件。不要复制<code>xxxd.dll</code>，<code>*.pdb</code></p></li><li><p><code>sip lib</code></p><p>siplib中的sip.pyd或sip.so复制到pyqt5</p><p>上面的操作就是<code>PyQt5.sip</code>模块，如果还同时想安装sip包，<code>nmake install</code></p></li><li><p>sip包</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171019/J2Hd80CbJk.png?imageslim" alt="mark"></p><p>将这4个文件复制进PyQt5。</p><p>同时将其复制到site-packages下。</p></li><li><p>bat文件复制到python安装目录下</p><p>pylupdate5.bat、pyrcc5.bat和pyuic5.bat</p></li></ul><ol><li><p>编辑<code>C:\Python27\Lib\site-packages\PyQt5\__init__.py</code></p><p>我直接借用python-qt5包里的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="comment"># Setup environment variables</span></div><div class="line">dirname = os.path.dirname(__file__)</div><div class="line">sys.path.insert(<span class="number">0</span>, dirname)</div><div class="line"></div><div class="line">os.environ[<span class="string">'PATH'</span>] += os.pathsep + dirname</div><div class="line"></div><div class="line"><span class="comment"># Addresses error: "QtQuick" is not installed</span></div><div class="line">os.environ[<span class="string">'QML2_IMPORT_PATH'</span>] = os.path.join(dirname, <span class="string">'qml'</span>)</div><div class="line"></div><div class="line"><span class="comment"># Addresses error: Problem creating accessible interface</span></div><div class="line">os.environ[<span class="string">'QT_PLUGIN_PATH'</span>] = os.path.join(dirname, <span class="string">'plugins'</span>)</div><div class="line"></div><div class="line"><span class="comment"># Addresses error: ..could not find or load the Qt platform plugin "windows"</span></div><div class="line">os.environ[<span class="string">'QT_QPA_PLATFORM_PLUGIN_PATH'</span>] = os.path.join(dirname,</div><div class="line">                                                         <span class="string">'plugins'</span>,</div><div class="line">                                                         <span class="string">'platforms'</span>)</div><div class="line"></div><div class="line"><span class="comment"># Expose versions</span></div><div class="line">version_info = (<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>)  <span class="comment"># Version of this release</span></div><div class="line">version = <span class="string">"%s.%s.%s"</span> % version_info</div><div class="line">__version__ = version</div><div class="line"></div><div class="line">pyqt_version_info = (<span class="number">5</span>, <span class="number">9</span>, <span class="number">1</span>)</div><div class="line">pyqt_version = <span class="string">"%s.%s.%s"</span> % pyqt_version_info</div><div class="line">__pyqt_version__ = pyqt_version</div><div class="line"></div><div class="line">qt_version_info = (<span class="number">5</span>, <span class="number">8</span>, <span class="number">1</span>)</div><div class="line">qt_version = <span class="string">"%s.%s.%s"</span> % qt_version_info</div><div class="line">__qt_version__ = qt_version</div></pre></td></tr></table></figure><p>这是知乎上给出的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> os</div><div class="line">pyqt5_path = os.path.realpath(os.path.dirname(__file__))</div><div class="line">sys.path.append(pyqt5_path)</div><div class="line">os.environ[<span class="string">'QT_QPA_PLATFORM_PLUGIN_PATH'</span>] = pyqt5_path + <span class="string">'/plugins/platforms'</span></div><div class="line">os.environ[<span class="string">'QT_PLUGIN_PATH'</span>] = pyqt5_path + <span class="string">'/plugins'</span></div></pre></td></tr></table></figure></li><li><p>复制到其他python，并配置系统环境变量</p><p>复制PyQt5整个文件夹到其他python27 64的site-packages即可完成PyQt5.9的安装。</p><p>为了可以正常运行qt designer.exe等，需要配置系统环境变量：</p><ul><li>QT_QPA_PLATFORM_PLUGIN_PATH</li><li>QT_PLUGIN_PATH</li><li>QML2_IMPORT_PATH</li></ul></li></ol><h3 id="使用编译好的PyQt5"><a href="#使用编译好的PyQt5" class="headerlink" title="使用编译好的PyQt5"></a>使用编译好的PyQt5</h3><ol><li><p>复制PyQt5和sip到site-packages</p></li><li><p>复制3个bat文件到python.exe同级目录</p></li><li><p>复制sip.h 到Python的include目录下</p></li><li><p>配置环境变量</p><ul><li>QT_QPA_PLATFORM_PLUGIN_PATH</li><li>QT_PLUGIN_PATH</li><li>QML2_IMPORT_PATH</li></ul></li><li><p>经过我在本机测试，PyQt5运行正常。编译好的文件分享给大家。</p><p>​</p><p>​</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;编译PyQt5.9 基于python2.7  Windows 64位版&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;&lt;s
      
    
    </summary>
    
      <category term="技术" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="GUI编程" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/GUI%E7%BC%96%E7%A8%8B/"/>
    
      <category term="PyQt5" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/GUI%E7%BC%96%E7%A8%8B/PyQt5/"/>
    
    
      <category term="PyQt5" scheme="http://shuaiyy.cn/tags/PyQt5/"/>
    
  </entry>
  
  <entry>
    <title>PyQt5入门</title>
    <link href="http://shuaiyy.cn/2017/10/12/%E6%8A%80%E6%9C%AF/PyQt%E5%85%A5%E9%97%A8/"/>
    <id>http://shuaiyy.cn/2017/10/12/技术/PyQt入门/</id>
    <published>2017-10-11T16:00:00.000Z</published>
    <updated>2017-11-07T09:36:25.727Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PyQt入门"><a href="#PyQt入门" class="headerlink" title="PyQt入门"></a>PyQt入门</h1><h2 id="开发环境配置"><a href="#开发环境配置" class="headerlink" title="开发环境配置"></a>开发环境配置</h2><p><strong>Python2.7  + PyQt5 + Pycharm</strong> </p><blockquote><p>pypi源下载超时的话可以切换豆瓣pip源</p><p>我用的是python27，pyqt5.3， pycharm</p></blockquote><h3 id="安装PyQt5"><a href="#安装PyQt5" class="headerlink" title="安装PyQt5"></a>安装PyQt5</h3><blockquote><p>如果你想使用py27+ pyqt58，参考知乎上的<a href="https://zhuanlan.zhihu.com/p/25561911?utm_source=itdadao&amp;utm_medium=referral" target="_blank" rel="external">这篇</a>，自行编译或使用作者提供的编译好的二进制包。我没试过，不保证成功。</p></blockquote><ul><li><p>python3</p><p>PyQt5官方编译版本仅支持python3，<code>pip install pyqt5</code></p></li><li><p>python2.7</p><p>好在网上有编译的python2.7版本的pyqt，<a href="https://github.com/pyqt/python-qt5" target="_blank" rel="external">官网主页</a>指出使用pip安装的版本为qt5.3,git安装的版本为qt5.7  </p><p><code>pip install --index-url https://pypi.douban.com/simple python-qt5</code></p></li><li><p>pyqt5 designer</p><p>python3需要单独安装<code>pip install pyqt5-tools</code></p><p>python2 <code>python-qt5</code> 里打包了designer工具，无需单独安装</p></li></ul><h3 id="配置Pycharm"><a href="#配置Pycharm" class="headerlink" title="配置Pycharm"></a>配置Pycharm</h3><p>下面以python2为例，python3对应的designer.exe的位置不同。</p><p>打开Pycharm，进入设置，添加外部工具，QtDesigner和PyUIC</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171012/0A13dkjIf2.png?imageslim" alt="mark"></p><ul><li><p>QtDesigner</p><p>QtDesigner用来生成ui文件</p><p><code>$FileDir$</code>是pycharm的宏变量，即当前文件的路径</p></li></ul><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171012/JF9aJk6Efb.png?imageslim" alt="mark"></p><ul><li><p>PyUIC</p><p>将ui文件转换成对应的python文件</p><p>参数为<code>-m PyQt5.uic.pyuic  $FileName$ -o $FileNameWithoutExtension$.py</code></p></li></ul><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171012/F4HkBKiA2F.png?imageslim" alt="mark"></p><ul><li><p>pyrcc</p><p>用于生成资源文件</p><p>我在虚拟环境的pyqt5文件夹里没找到pyrcc5.exe,但在系统Python的bin目录下有一个，就copy了一份，使用正常。系统的Python用pip list看了一下，并没有安装pyqt5，但是有qtpy这个包，有点奇怪，我系统的Python是anaconda发行版。</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171013/m7i0IDl3LK.png?imageslim" alt="mark"></p><p><strong>使用方法</strong></p><p>首先生成资源的qrc文件：</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171013/A5Ae444Jb9.png?imageslim" alt="mark"></p><p>然后右键生成资源的py文件</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171013/JILDaame1E.png?imageslim" alt="mark"></p><p>然后在需要引用资源的地方，先import py文件，然后资源的路径使用格式<code>:文件路径/prefix_dir/文件名</code>,冒号必不可少，文件路径是指_rc.py文件相对qrc资源文件的路径。当两者在同一路径时，可以不写。</p></li></ul><p><strong>问题描述</strong></p><p>在<code>pycharm &gt; tools &gt; external-tools</code>中打开Qtdesigner时，</p><blockquote><p>This application failed to start because it could not find or load the Qt platform plugin “windows”.</p></blockquote><p><strong>原因</strong>：</p><p>环境变量没有添加。如果已经配置了环境变量，需要关闭并重新打开pycharm。</p><p><strong>解决方法</strong>：</p><p>参考<a href="https://github.com/pyqt/python-qt5/wiki/Qt-Environment-Variable-Reference" target="_blank" rel="external">官方wiki</a>在环境变量中增加：</p><p>路径中的<qt_dir>替换为PyQt包所在的位置，查看你的安装位置</qt_dir></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> PyQt5</div><div class="line">PyQt5.__path__</div><div class="line">[<span class="string">'D:\\qt_env\\lib\\site-packages\\PyQt5'</span>]</div></pre></td></tr></table></figure><p>QT_QPA_PLATFORM_PLUGIN_PATH：<code>&lt;QT_DIR&gt;/plugins/platforms</code></p><p> QT_PLUGIN_PATH  <code>Example: &lt;QT_DIR&gt;/plugins</code></p><p> QML_IMPORT_PATH： <code>&lt;QT_DIR&gt;/qml</code></p><p>QML2_IMPORT_PATH： <code>&lt;QT_DIR&gt;/qml</code></p><h3 id="配置eric6"><a href="#配置eric6" class="headerlink" title="配置eric6"></a>配置eric6</h3><blockquote><p>这玩意儿是智障，自动补全一点也不智能</p><p>唯一优势就是可以通过选择组件和触发事件的方式批量生成一堆槽函数。</p><p>我还是用的pycharm</p></blockquote><p>由于Qscintilla2在python2下没有编译的安装包，需要自行编译安装。</p><p>故选择在python3下安装。</p><p>如果使用了Python虚拟环境，则需要临时将python3.exe的目录设置在系统环境变量path里。</p><p>下载eric6，解压， 执行 <code>..\..\python.exe install.py</code></p><h2 id="PyQt学习教程和资料"><a href="#PyQt学习教程和资料" class="headerlink" title="PyQt学习教程和资料"></a>PyQt学习教程和资料</h2><blockquote><p>建议先看完鱼c网友的帖子</p></blockquote><ul><li>知乎 - <a href="https://www.zhihu.com/question/26492283" target="_blank" rel="external">大家是怎么学pyqt5的？</a></li><li><a href="http://bbs.fishc.com/forum.php?mod=viewthread&amp;tid=59816&amp;extra=page%3D1&amp;page=1" target="_blank" rel="external">pyqt5教程-鱼c论坛</a></li><li>pyqt5 <a href="http://pyqt.sourceforge.net/Docs/PyQt5/index.html" target="_blank" rel="external">reference 官方</a></li><li>Qt官方文档</li></ul><h3 id="PyQt5与PyQt4的区别"><a href="#PyQt5与PyQt4的区别" class="headerlink" title="PyQt5与PyQt4的区别"></a>PyQt5与PyQt4的区别</h3><p><strong>信号槽的不同</strong></p><p>qt5中没有以下：</p><ul><li><code>QObject.connect()</code></li><li><code>QObject.emit()</code></li><li><code>SIGNAL()</code></li><li><code>SLOT()</code></li><li>All methods that had arguments that are usually the results of calls to <code>SIGNAL()</code> or <code>SLOT()</code> are no longer supported</li><li><code>disconnect()</code> takes no arguments and disconnects all connections to the <a href="http://pyqt.sourceforge.net/Docs/PyQt5/api/QtCore/qobject.html#PyQt5-QtCore-QObject" target="_blank" rel="external"><code>QObject</code></a> instance.</li></ul><p><strong>Moudle组件的变化</strong></p><ul><li>PyQt4’s <code>QtGui</code> module has been split into PyQt5’s <a href="http://pyqt.sourceforge.net/Docs/PyQt5/QtGui.html#PyQt5-QtGui" target="_blank" rel="external"><code>QtGui</code></a>, <a href="http://pyqt.sourceforge.net/Docs/PyQt5/QtPrintSupport.html#PyQt5-QtPrintSupport" target="_blank" rel="external"><code>QtPrintSupport</code></a> and <a href="http://pyqt.sourceforge.net/Docs/PyQt5/QtWidgets.html#PyQt5-QtWidgets" target="_blank" rel="external"><code>QtWidgets</code></a> modules.</li><li>Only the <a href="http://pyqt.sourceforge.net/Docs/PyQt5/api/QtOpenGL/qglcontext.html#PyQt5-QtOpenGL-QGLContext" target="_blank" rel="external"><code>QGLContext</code></a>, <a href="http://pyqt.sourceforge.net/Docs/PyQt5/api/QtOpenGL/qglformat.html#PyQt5-QtOpenGL-QGLFormat" target="_blank" rel="external"><code>QGLFormat</code></a> and <a href="http://pyqt.sourceforge.net/Docs/PyQt5/api/QtOpenGL/qglwidget.html#PyQt5-QtOpenGL-QGLWidget" target="_blank" rel="external"><code>QGLWidget</code></a> classes are supported by PyQt5.</li><li>PyQt4’s <code>QtDeclarative</code>, <code>QtScript</code> and <code>QtScriptTools</code> modules are not supported. These have been replaced by PyQt5’s <a href="http://pyqt.sourceforge.net/Docs/PyQt5/QtQml.html#PyQt5-QtQml" target="_blank" rel="external"><code>QtQml</code></a> and<a href="http://pyqt.sourceforge.net/Docs/PyQt5/QtQuick.html#PyQt5-QtQuick" target="_blank" rel="external"><code>QtQuick</code></a> modules. Unlike PyQt4, PyQt5 supports the creation of Python objects from QML.</li><li>PyQt4’s <code>QtWebKit</code> module has been split into PyQt5’s <a href="http://pyqt.sourceforge.net/Docs/PyQt5/QtWebKit.html#PyQt5-QtWebKit" target="_blank" rel="external"><code>QtWebKit</code></a> and <a href="http://pyqt.sourceforge.net/Docs/PyQt5/QtWebKitWidgets.html#PyQt5-QtWebKitWidgets" target="_blank" rel="external"><code>QtWebKitWidgets</code></a> modules.</li><li>PyQt4’s <code>pyqtconfig</code> module is not supported. The section <a href="http://pyqt.sourceforge.net/Docs/PyQt5/extension_api.html#ref-build-system" target="_blank" rel="external">The PyQt5 Extension API</a> describes the support that PyQt5 provides to third-party packages (e.g. <a href="https://www.riverbankcomputing.com/software/qscintilla/" target="_blank" rel="external">QScintilla</a>) that want to build on top of PyQt5.</li><li>更多<a href="http://pyqt.sourceforge.net/Docs/PyQt5/pyqt4_differences.html#supported-python-versions" target="_blank" rel="external">内容</a></li></ul><h2 id="Qt组件"><a href="#Qt组件" class="headerlink" title="Qt组件"></a>Qt组件</h2><h3 id="label"><a href="#label" class="headerlink" title="label"></a>label</h3><ul><li>改变文本</li><li>改变字体</li><li>使用图片</li></ul><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171016/81HeJBm591.png?imageslim" alt="mark"></p><h3 id="button"><a href="#button" class="headerlink" title="button"></a>button</h3><p><strong>radio button</strong></p><ul><li>使用GroupBox放置一组互斥的单选框</li></ul><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171016/9bk5Bej498.png?imageslim" alt="mark"></p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171016/d5l4h8HmAg.png?imageslim" alt="mark"></p><h3 id="LineEdit"><a href="#LineEdit" class="headerlink" title="LineEdit"></a>LineEdit</h3><ul><li>object.setText(“”)</li><li>object.text()</li></ul><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171016/gf3fDmgj5i.png?imageslim" alt="mark"></p><h3 id="TextEdit"><a href="#TextEdit" class="headerlink" title="TextEdit"></a>TextEdit</h3><p>多行文本框，只读/编辑属性,多行文本持续输出</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171016/AlL5d6m1me.png?imageslim" alt="mark"></p><h3 id="TextBrowser"><a href="#TextBrowser" class="headerlink" title="TextBrowser"></a>TextBrowser</h3><h3 id="ProgressBar"><a href="#ProgressBar" class="headerlink" title="ProgressBar"></a>ProgressBar</h3><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171016/gg1Fa8kFE8.png?imageslim" alt="mark"></p><h3 id="MenuBar"><a href="#MenuBar" class="headerlink" title="MenuBar"></a>MenuBar</h3><ul><li>每个菜单选项为一个Qaction对象</li><li>Qdesigner中可以拖拽菜单项进行排序</li><li>Qaction可以添加图标， png格式的。在属性的icon中右边有个…打开文件按钮，点击添加icon</li></ul><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171016/Hm8F3Eh6F1.png?imageslim" alt="mark"></p><p><strong>打开/关闭文件</strong></p><ul><li><code>QFileDialog.getSaveFileName</code> </li><li><code>QFileDialog.getOpenFileName</code> </li><li>win32com操作word打开文档</li></ul><h3 id="SliderBar"><a href="#SliderBar" class="headerlink" title="SliderBar"></a>SliderBar</h3><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171016/9EgiD93fgA.png?imageslim" alt="mark"></p><h3 id="Dial"><a href="#Dial" class="headerlink" title="Dial"></a>Dial</h3><h3 id="对话框"><a href="#对话框" class="headerlink" title="对话框"></a>对话框</h3><ul><li>通知对话框 </li><li>询问对话框</li><li>警告对话框</li><li>严重警告对话框</li><li>关于对话框</li><li>AboutQt对话框</li></ul><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171016/jlkmc139F7.png?imageslim" alt="mark"></p><h3 id="标准输入对话框"><a href="#标准输入对话框" class="headerlink" title="标准输入对话框"></a>标准输入对话框</h3><ul><li>getText</li><li>getInt</li><li>getItem 下拉</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">reply, ok = QInputDialog.getText(</div><div class="line">                self, &apos;输入框&apos;, &apos;请输入姓名&apos;, QLineEdit.Normal, &apos;在此处输入你的姓名...&apos;)</div><div class="line"># title，提示，当前值，最小值，最大值</div><div class="line">reply, ok = QInputDialog.getInt(self, &apos;输入框&apos;, &apos;请输入你的年龄&apos;, 10, 5, 25)</div><div class="line">reply, ok = QInputDialog.getItem(</div><div class="line">                self, &apos;请选择&apos;, &apos;最爱的水果是？&apos;, [&apos;香蕉&apos;, &apos;苹果&apos;, &apos;大菠萝&apos;])</div></pre></td></tr></table></figure><h3 id="自定义输入对话框"><a href="#自定义输入对话框" class="headerlink" title="自定义输入对话框"></a>自定义输入对话框</h3><ul><li>一次获取多个变量</li><li>修改全区变量</li><li>个性化定制</li></ul><p>通过额外创建一个窗体ui界面实现，</p><h2 id="图片显示"><a href="#图片显示" class="headerlink" title="图片显示"></a>图片显示</h2><blockquote><p>使用designer右键组件，选择更改样式表，添加图片资源。</p><p>boader-img，自适应组件大小的填充图片。背景图片，按原图显示。原比例显示，自动缩放，保持比例不变。</p><p>可以在图片上添加自定义点击事件 </p></blockquote><h3 id="label显示图片"><a href="#label显示图片" class="headerlink" title="label显示图片"></a>label显示图片</h3><p>Qt Designer 右键 change StyleSheet</p><h3 id="GraphView图片"><a href="#GraphView图片" class="headerlink" title="GraphView图片"></a>GraphView图片</h3><p>Qt Designer 右键 change StyleSheet</p><ul><li><p>为图片绑定鼠标点击事件</p><p><code>self.graphicsView.mousePressEvent = self.photo_clicked</code></p></li></ul><h3 id="更换图片"><a href="#更换图片" class="headerlink" title="更换图片"></a>更换图片</h3><ul><li><code>self.graphicsView_photo.setStyleSheet(&quot;border-image: url(:/source/3345.jpg);&quot;)</code> </li></ul><h2 id="启动界面-QSplashScreen"><a href="#启动界面-QSplashScreen" class="headerlink" title="启动界面 QSplashScreen"></a>启动界面 QSplashScreen</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul><li>程序启动时加载大量资源，启动缓慢，使用启动界面告知用户，程序运行中</li><li>显示logo</li><li>一些重要或有趣的图片和文字信息</li><li>显示启动界面时不能阻塞gui事件响应</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><blockquote><p>sleep是因为主窗口初始化很快就完成了，为了看到启动效果而加的延迟</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">app = QApplication(sys.argv)</div><div class="line">splash = QSplashScreen(QPixmap(<span class="string">':source/4532.png'</span>))</div><div class="line">splash.show()</div><div class="line">sleep(<span class="number">2</span>)</div><div class="line"><span class="comment"># 显示文字信息，文字的位置和颜色</span></div><div class="line">splash.showMessage(<span class="string">'正在加载图片资源...'</span>, Qt.AlignBottom, Qt.blue)</div><div class="line">sleep(<span class="number">2</span>)</div><div class="line">splash.showMessage(<span class="string">'正在加载视频资源...'</span>, Qt.AlignBottom, Qt.blue)</div><div class="line">sleep(<span class="number">2</span>)</div><div class="line">splash.showMessage(<span class="string">'正在启动中...'</span>, Qt.AlignBottom, Qt.blue)</div><div class="line">sleep(<span class="number">2</span>)</div><div class="line">app.processEvents() <span class="comment"># 避免阻塞gui事件</span></div><div class="line"><span class="comment"># 主窗口初始化</span></div><div class="line">mywindow = MyWindow()</div><div class="line">mywindow.show()</div><div class="line"><span class="comment"># 关闭启动窗口</span></div><div class="line">splash.close()</div><div class="line">sys.exit(app.exec_())</div></pre></td></tr></table></figure><p><strong>效果：</strong></p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171017/KIfbDagJAh.png?imageslim" alt="mark"></p><h2 id="信号槽机制"><a href="#信号槽机制" class="headerlink" title="信号槽机制"></a>信号槽机制</h2><h3 id="信号种类"><a href="#信号种类" class="headerlink" title="信号种类"></a>信号种类</h3><p>事件源：鼠标点击拖拽等，值改变。。。</p><h3 id="信号和槽"><a href="#信号和槽" class="headerlink" title="信号和槽"></a>信号和槽</h3><blockquote><p>所有的组件都可以产生信号，组件只负责发射信号。</p><p>信号需要连接到槽函数，才能得到处理。</p></blockquote><ul><li><p>通过QtDesigner连接信号与槽</p></li><li><p>通过手动代码连接信号与槽</p></li><li><p>装饰器方法</p></li></ul><h3 id="自定义信号"><a href="#自定义信号" class="headerlink" title="自定义信号"></a>自定义信号</h3><p>参考<a href="http://blog.csdn.net/zhulove86/article/details/52563131" target="_blank" rel="external">博客</a></p><ul><li><p>多重载的信号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 声明一个多重载版本的信号，包括了一个带int和str类型参数的信号，以及带str参数的信号</span></div><div class="line">preview_signal = pyqtSignal([int,str],[str])</div><div class="line"><span class="comment"># 参数为int，str的信号</span></div><div class="line">help_signal = pyqtSignal(int, str)</div><div class="line"></div><div class="line"><span class="comment"># 信号发射</span></div><div class="line">self.preview_signal[int, str].emit(<span class="number">1</span>, <span class="string">'ok'</span>) <span class="comment"># 指定信号的版本</span></div><div class="line">self.preview_signal[str].emit(<span class="string">'success!'</span>)</div><div class="line"><span class="comment"># 槽函数绑定，同样需要指定信号的版本</span></div><div class="line">self.preview_signal[int, str].connect(self.func_1) <span class="comment"># 指定信号的版本</span></div><div class="line">self.preview_signal[str].connect(self.func_2)</div></pre></td></tr></table></figure><p>​</p></li></ul><p><strong>一般流程如下</strong>：<br>1、定义信号<br>2、定义槽函数<br>3、绑定信号和槽<br>4、发射信号</p><p><strong>注意事项：</strong></p><p>1、自定义的信号在<strong>init</strong>()函数之前定义；<br>2、自定义型号可以传递，str、int、list、object、float、tuple、dict等很多类型的参数；<br>3、注意signal和slot的调用逻辑，避免signal和slot之间出现死循环。如在slot方法中继续发射该信号；</p><p><strong>问题描述</strong></p><blockquote><p><code>&#39;PyQt5.QtCore.pyqtSignal&#39; object has no attribute &#39;connect&#39;</code></p></blockquote><p><strong>原因</strong></p><p>pyqtSignal只有绑定了对象后才有connect方法</p><p><strong>解决方法</strong></p><ol><li><p>在Qobject对象init()初始化之前定义信号pyqtSignal, 使其成为类变量而不是实例变量</p></li><li><p>使用connect方法时，要先创建Qobject对象的实例，然后调用实例的信号变量，直接<code>Qobject.signal.connect</code>就会出现这种错误</p><p>​</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;PyQt入门&quot;&gt;&lt;a href=&quot;#PyQt入门&quot; class=&quot;headerlink&quot; title=&quot;PyQt入门&quot;&gt;&lt;/a&gt;PyQt入门&lt;/h1&gt;&lt;h2 id=&quot;开发环境配置&quot;&gt;&lt;a href=&quot;#开发环境配置&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="技术" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="GUI编程" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/GUI%E7%BC%96%E7%A8%8B/"/>
    
      <category term="PyQt5" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/GUI%E7%BC%96%E7%A8%8B/PyQt5/"/>
    
    
      <category term="PyQt5" scheme="http://shuaiyy.cn/tags/PyQt5/"/>
    
  </entry>
  
  <entry>
    <title>PyQt5 不同窗体之间传值</title>
    <link href="http://shuaiyy.cn/2017/10/11/%E6%8A%80%E6%9C%AF/PyQt5%E4%B8%8D%E5%90%8C%E7%AA%97%E4%BD%93%E4%B9%8B%E9%97%B4%E4%BC%A0%E5%80%BC/"/>
    <id>http://shuaiyy.cn/2017/10/11/技术/PyQt5不同窗体之间传值/</id>
    <published>2017-10-10T16:00:00.000Z</published>
    <updated>2017-11-07T09:35:32.634Z</updated>
    
    <content type="html"><![CDATA[<p>PyQt5 不同窗体之间传值</p><h2 id="类静态方法"><a href="#类静态方法" class="headerlink" title="类静态方法"></a>类静态方法</h2><h3 id="自定义对话框返回值给主窗体"><a href="#自定义对话框返回值给主窗体" class="headerlink" title="自定义对话框返回值给主窗体"></a>自定义对话框返回值给主窗体</h3><blockquote><p>PyQt提供了一系列的标准对话框用于获取用户输入，QFileDialog、QInputDialog、QColorDialog、QFontDialog</p></blockquote><ol><li><p>第一种，自定义的Dialog对话框，我们可以通过类静态方法实现传值</p><p>主要注意几点：<br>1、使用两个button(ok和cancel)分别连接accept()和reject()槽函数。<br>2、实现一个静态函数，将参数通过该函数传出。<br>3、在静态函数中实例化该类，并调用.exec<em>()函数来显示执行这个对话框。<br>4、通过.exec</em>()的返回值来判断用户点的是ok还是cancel按钮，进而做出下一步判断。</p><p>在主窗口中调用静态函数方法，就可以得到传递的参数值，代码如下：</p><p><code>data, ok = TestDialog.get_user()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 自定义对话框</span></div><div class="line"><span class="keyword">from</span> test <span class="keyword">import</span> Ui_Dialog <span class="keyword">as</span> Test_Ui</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestDialog</span><span class="params">(QDialog, Test_Ui)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super(TestDialog, self).__init__()</div><div class="line">        self.setupUi(self)</div><div class="line">        <span class="comment"># accept/reject关闭窗口返回 1/0</span></div><div class="line">        self.buttonBox.accepted.connect(self.accept)</div><div class="line">        self.buttonBox.rejected.connect(self.reject)</div><div class="line">        self.data = &#123;<span class="string">'ok'</span>:<span class="number">1</span>&#125;</div><div class="line"></div><div class="line"><span class="meta">    @staticmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_user</span><span class="params">(parent=None)</span>:</span></div><div class="line">        test_dialog = TestDialog()</div><div class="line">        ok = test_dialog.exec_()</div><div class="line">        data = test_dialog.data</div><div class="line">        data[<span class="string">'user'</span>] = <span class="string">'test input'</span></div><div class="line">        <span class="keyword">return</span> data, ok</div><div class="line">        </div><div class="line">        </div><div class="line"><span class="comment"># 在主窗口中使用</span></div><div class="line">data, ok = TestDialog.get_user()</div><div class="line"><span class="keyword">if</span> ok:</div><div class="line">    <span class="keyword">print</span> <span class="string">'ok button clicked!'</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'cancel button clicked!'</span></div></pre></td></tr></table></figure><p>​</p></li><li><p>第二种，在主窗体中实例化自定义对话框，然后调用其属性和方法，最后destory对话框实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">test = TestDialog()</div><div class="line">ok = test.exec_()</div><div class="line"><span class="keyword">if</span> ok:</div><div class="line"><span class="keyword">print</span> test.data</div><div class="line">test.destroy()</div></pre></td></tr></table></figure></li></ol><h2 id="信号槽"><a href="#信号槽" class="headerlink" title="信号槽"></a>信号槽</h2><p>对于自定义的信号，使用方法是：</p><ol><li>自定义的信号在<strong>init</strong>()函数之前定义<code>signal_test= pyqtSignal(str)</code></li><li>在子对话框的槽函数发射信号，或在事件中发射信号。<code>self.signal_test.emit((self.datetime.dateTime()).toString())</code></li><li>在主窗体中连接信号和槽。<code>dialog.signal_test.connect(self.getStrDate)</code></li><li>然后实现槽函数。</li></ol><ul><li><p>在自定义对话框里定义一个信号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> pyqtSignal, pyqtSlot</div><div class="line"><span class="keyword">from</span> test <span class="keyword">import</span> Ui_Dialog <span class="keyword">as</span> Test_Ui</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestDialog</span><span class="params">(QDialog, Test_Ui)</span>:</span></div><div class="line">    mysignal = pyqtSignal(dict)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super(TestDialog, self).__init__()</div><div class="line">        self.setupUi(self)</div><div class="line">        <span class="comment"># accept/reject关闭窗口返回 1/0</span></div><div class="line">        self.buttonBox.accepted.connect(self.accepted)</div><div class="line">        self.buttonBox.rejected.connect(self.reject)</div><div class="line">        self.data = &#123;<span class="string">'ok'</span>:<span class="number">1</span>&#125;</div><div class="line">    </div><div class="line"><span class="meta">    @pyqtSlot(bool)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">accepted</span><span class="params">(self, value)</span>:</span></div><div class="line">        self.accept()</div><div class="line">        data = self.data</div><div class="line">        data[<span class="string">'user'</span>] = <span class="string">'test input'</span></div><div class="line">        self.mysignal.emit(data) <span class="comment"># 发射信号，将dict数据传递出去</span></div></pre></td></tr></table></figure><p>​</p></li><li><p>在主窗体里实例化自定义对话框，并为信号绑定槽函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">test = TestDialog()</div><div class="line">test.mysignal.connect(self.process_data) <span class="comment"># 绑定槽函数，接收数据</span></div><div class="line">test.exec_()</div><div class="line">test.destroy()</div><div class="line"></div><div class="line"><span class="comment"># 处理数据的槽函数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_data</span><span class="params">(self, data)</span>:</span></div><div class="line">  <span class="keyword">print</span> data</div></pre></td></tr></table></figure><p>使用信号与槽需要注意的事项：</p></li></ul><ol><li>信号与槽机制与普通函数的调用一样，如果使用不当，在程序执行时也有可能产生死循环。所以在定义槽函数时一定要注意避免间接形成无限循环，即在槽中再次发射所接收到的同样信号。</li><li>​    如果一个信号与多个槽相连，当这个信号被发射时，与之相连的槽被激活的顺序是随机的。</li><li>​    宏定义不能用在signal 和slot的参数中。</li><li>​    信号和槽的参数个数与类型必须一致。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;PyQt5 不同窗体之间传值&lt;/p&gt;
&lt;h2 id=&quot;类静态方法&quot;&gt;&lt;a href=&quot;#类静态方法&quot; class=&quot;headerlink&quot; title=&quot;类静态方法&quot;&gt;&lt;/a&gt;类静态方法&lt;/h2&gt;&lt;h3 id=&quot;自定义对话框返回值给主窗体&quot;&gt;&lt;a href=&quot;#自定义对话框
      
    
    </summary>
    
      <category term="技术" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="GUI编程" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/GUI%E7%BC%96%E7%A8%8B/"/>
    
      <category term="PyQt5" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/GUI%E7%BC%96%E7%A8%8B/PyQt5/"/>
    
    
      <category term="PyQt5" scheme="http://shuaiyy.cn/tags/PyQt5/"/>
    
  </entry>
  
  <entry>
    <title>Bootstrap 学习笔记</title>
    <link href="http://shuaiyy.cn/2017/10/08/%E6%8A%80%E6%9C%AF/BootStrap/"/>
    <id>http://shuaiyy.cn/2017/10/08/技术/BootStrap/</id>
    <published>2017-10-07T16:00:00.000Z</published>
    <updated>2017-11-07T09:38:23.106Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Bootstrap入门"><a href="#Bootstrap入门" class="headerlink" title="Bootstrap入门"></a>Bootstrap入门</h2><ul><li>html5文件</li><li>引入css</li><li>引入jquery和bootstrap.js</li><li>查看官网<a href="http://v3.bootcss.com/" target="_blank" rel="external">文档和教程</a></li></ul><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171010/9Dfg6FKh0h.png?imageslim" alt="mark"></p><h2 id="栅格系统布局-grid"><a href="#栅格系统布局-grid" class="headerlink" title="栅格系统布局 grid"></a>栅格系统布局 grid</h2><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171010/jKBdBGi94h.png?im" alt="mark"></p><ul><li><p><a href="http://v3.bootcss.com/css/#grid" target="_blank" rel="external">grid文档</a></p></li><li><p>Bootstrap 需要为页面内容和栅格系统包裹一个 <code>.container</code> 容器</p></li><li><p>grid将屏幕横向像素12等分</p></li><li><p>媒体查询</p><p>媒体查询是进行响应式设计的核心要素，其功能非常强大<br>Bootstrap主要用到min-width,max-width以及and语法，用于在不同的分辨率下设置不同的css样式<br>  示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@media(max-width:767px)&#123;</div><div class="line">/在小于767px的屏幕里，这里的样式才生效/</div><div class="line">&#125;</div><div class="line"></div><div class="line">@media(min-width:768px) and (max-width:991px)&#123;</div><div class="line">/768-991px屏幕里，这里的样式才生效/</div><div class="line">&#125;</div><div class="line"></div><div class="line">@media(min-width:1200px)&#123;</div><div class="line">/大于1200px屏幕里，这里的样式才生效/</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>​</p><p>​</p></li></ul><h2 id="Bootstrap文本排版"><a href="#Bootstrap文本排版" class="headerlink" title="Bootstrap文本排版"></a>Bootstrap文本排版</h2><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171010/Djgl0IBfCi.png?imageslim" alt="mark"></p><h2 id="列表与代码"><a href="#列表与代码" class="headerlink" title="列表与代码"></a>列表与代码</h2><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171010/hEl3hda2lI.png?imageslim" alt="mark"></p><p>Bootstrap</p><h2 id="Bootstrap表格样式"><a href="#Bootstrap表格样式" class="headerlink" title="Bootstrap表格样式"></a>Bootstrap表格样式</h2><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171010/c5mHK4e8LJ.png?imageslim" alt="mark"></p><h2 id="Bootstrap表单样式"><a href="#Bootstrap表单样式" class="headerlink" title="Bootstrap表单样式"></a>Bootstrap表单样式</h2><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171010/894hJhFmBm.png?imageslim" alt="mark"></p><h2 id="Bootstrap按钮样式"><a href="#Bootstrap按钮样式" class="headerlink" title="Bootstrap按钮样式"></a>Bootstrap按钮样式</h2><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171011/5FC7C5DDHI.png?imageslim" alt="mark"></p><h2 id="Bootstrap图片"><a href="#Bootstrap图片" class="headerlink" title="Bootstrap图片"></a>Bootstrap图片</h2><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171011/DeHcDf8Lbf.png?imageslim" alt="mark"></p><h2 id="Bootstrap小图标"><a href="#Bootstrap小图标" class="headerlink" title="Bootstrap小图标"></a>Bootstrap小图标</h2><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171011/cKD412c35F.png?imageslim" alt="mark"></p><h2 id="Bootstrap下拉菜单"><a href="#Bootstrap下拉菜单" class="headerlink" title="Bootstrap下拉菜单"></a>Bootstrap下拉菜单</h2><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171011/b3GG8G8Ce1.png?imageslim" alt="mark"></p><h2 id="Bootstrap按钮组"><a href="#Bootstrap按钮组" class="headerlink" title="Bootstrap按钮组"></a>Bootstrap按钮组</h2><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171011/GhicBbc0lG.png?imageslim" alt="mark"></p><h2 id="Bootstrap按钮下拉菜单"><a href="#Bootstrap按钮下拉菜单" class="headerlink" title="Bootstrap按钮下拉菜单"></a>Bootstrap按钮下拉菜单</h2><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171011/55imemDe5b.png?imageslim" alt="mark"></p><h2 id="Bootstrap输入框"><a href="#Bootstrap输入框" class="headerlink" title="Bootstrap输入框"></a>Bootstrap输入框</h2><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171011/4CckG52h1g.png?imageslim" alt="mark"></p><h2 id="Bootstrap导航"><a href="#Bootstrap导航" class="headerlink" title="Bootstrap导航"></a>Bootstrap导航</h2><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171011/kE13IAaGee.png?imageslim" alt="mark"></p><h2 id="Bootstrap导航条"><a href="#Bootstrap导航条" class="headerlink" title="Bootstrap导航条"></a>Bootstrap导航条</h2><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171011/EBF7Hbd0G1.png?imageslim" alt="mark"></p><h2 id="Bootstrap面包屑导航和分页导航"><a href="#Bootstrap面包屑导航和分页导航" class="headerlink" title="Bootstrap面包屑导航和分页导航"></a>Bootstrap面包屑导航和分页导航</h2><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171011/D31Ag48FBm.png?imageslim" alt="mark"></p><h2 id="标签-徽章-大屏展播-页面标题"><a href="#标签-徽章-大屏展播-页面标题" class="headerlink" title="标签 徽章 大屏展播 页面标题"></a>标签 徽章 大屏展播 页面标题</h2><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171011/J5dfF7k910.png?imageslim" alt="mark"></p><h2 id="缩略图和警告框"><a href="#缩略图和警告框" class="headerlink" title="缩略图和警告框"></a>缩略图和警告框</h2><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171011/h64kBEHCde.png?imageslim" alt="mark"></p><ul><li><p>可关闭的警告框，data-dismiss是html5中绑定方法用的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-info alert-dismissable"</span> <span class="attr">role</span>=<span class="string">"alert"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"close "</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">data-dismiss</span>=<span class="string">"alert"</span>&gt;</span>&amp;times;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span> 登录成功！返回 <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"alert-link"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p>​</p></li></ul><p>##进度条和媒体内容</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171011/235fIi0I1A.png?imageslim" alt="mark"></p><ul><li>媒体对象：图文混排的风格</li></ul><p>##选项卡/标签页</p><blockquote><p>导航栏中点击不同的选项卡，显示其对应的面板页面</p></blockquote><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171011/m2LHBm8l1D.png?imageslim" alt="mark"></p><ul><li><p>可以用<code>date-toggle=&quot;tab&quot;</code>或<code>date-toggle=&quot;pill&quot;</code> 属性绑定面板切换动作</p><p>href指向对应面板的id，data-toggle绑定方法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!--选项卡          --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-tabs"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#pan1"</span> <span class="attr">data-toggle</span>=<span class="string">"tab"</span>&gt;</span>tab面板1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#pan2"</span>  <span class="attr">data-toggle</span>=<span class="string">"tab"</span>&gt;</span>tab面板2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#pan3"</span>  <span class="attr">data-toggle</span>=<span class="string">"tab"</span>&gt;</span>tab面板3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!--面板--&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab-content"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab-pane active"</span> <span class="attr">id</span>=<span class="string">"pan1"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">h1</span>&gt;</span>第一个面板页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab-pane"</span> <span class="attr">id</span>=<span class="string">"pan2"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">h1</span>&gt;</span>第二个面板页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab-pane"</span> <span class="attr">id</span>=<span class="string">"pan3"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">h1</span>&gt;</span>第三个面板页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>js绑定面板显示，参考<a href="http://v3.bootcss.com/javascript/#tabs" target="_blank" rel="external">文档</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"application/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">        $(<span class="string">".nav.nav-pills li  a "</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></div><div class="line"><span class="undefined">            e.preventDefault();</span></div><div class="line"><span class="javascript">            $(<span class="keyword">this</span>).tab(<span class="string">'show'</span>);</span></div><div class="line"><span class="undefined">        &#125;);</span></div><div class="line"><span class="undefined">    &#125;)</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>事件监听，当点击了某个选项卡，触发事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"JavaScript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">  $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript">    $(<span class="string">'a[data-toggle="tab"]'</span>).on(<span class="string">'shown.bs.tab'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></div><div class="line"><span class="javascript"> <span class="comment">// e.target // newly activated tab</span></span></div><div class="line"><span class="javascript"> <span class="comment">// e.relatedTarget // previous active tab</span></span></div><div class="line"><span class="javascript">      <span class="keyword">var</span> newobj=e.target.innerHTML;</span></div><div class="line"><span class="javascript">      $(<span class="string">"#testshow"</span>).html(newobj);</span></div><div class="line"><span class="undefined">&#125;);</span></div></pre></td></tr></table></figure><p>​</p></li></ul><p>##工具提示框</p><blockquote><p>移动到某个元素上弹出提示信息</p></blockquote><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171011/679ffk0c0b.png?imageslim" alt="mark"></p><ul><li><a href="http://v3.bootcss.com/javascript/#tooltips" target="_blank" rel="external">文档</a></li><li>需要声明式语法和javascript配合，指定data-toggle、data-placement、$(“select”).tooltip()</li></ul><p>##折叠 Collapse</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171011/541aHGfEL8.png?imageslim" alt="mark"></p><p>##焦点广告/轮播图 </p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171011/JJ4kcd1e3b.png?imageslim" alt="mark"> </p><p>## </p><p>## </p><p>## </p><p>## </p><p>## </p><p>## </p><p>## </p><p>## </p><p>## </p><p>## </p><p>## </p><p>## </p><p>## </p><p>## </p><p>## </p><p>## </p><p>## </p><p>## </p><p>## </p><p>## </p><p>## </p><p>## </p><p>## </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Bootstrap入门&quot;&gt;&lt;a href=&quot;#Bootstrap入门&quot; class=&quot;headerlink&quot; title=&quot;Bootstrap入门&quot;&gt;&lt;/a&gt;Bootstrap入门&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;html5文件&lt;/li&gt;
&lt;li&gt;引入css&lt;/li&gt;

      
    
    </summary>
    
      <category term="技术" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Web" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/Web/"/>
    
      <category term="前端" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/Web/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Bootstrap" scheme="http://shuaiyy.cn/tags/Bootstrap/"/>
    
  </entry>
  
  <entry>
    <title>MySQL生成测试数据</title>
    <link href="http://shuaiyy.cn/2017/10/08/%E6%8A%80%E6%9C%AF/mysql%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <id>http://shuaiyy.cn/2017/10/08/技术/mysql安装配置/</id>
    <published>2017-10-07T16:00:00.000Z</published>
    <updated>2017-11-07T09:34:22.820Z</updated>
    
    <content type="html"><![CDATA[<p>Ubuntu安装配置MySQL</p><h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h3><p><code>sudo apt-get install mysql-server</code></p><p>安装过程中会提示设置root用户的密码</p><ul><li>启动<code>sudo service mysql start</code></li><li>重启<code>sudo service mysql restart</code></li><li>停止<code>sudo service mysql stop</code></li></ul><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>主配置入口文件<code>/etc/mysql/mysql.cnf</code>, 这个文件里是全局配置，默认只设置了2个目录，告诉我们其中的配置文件，文件名后缀为cnf。</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">!includedir /etc/mysql/conf.d/</div><div class="line">!includedir /etc/mysql/mysql.conf.d/</div></pre></td></tr></table></figure><p>挨个查看后发现<code>mysql.conf.d/mysqld.cnf</code>文件配置[client]和[mysqld]。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="section">[client]</span></div><div class="line"><span class="comment"># 设置utf8可以支持中文</span></div><div class="line"><span class="attr">default-character-set</span> = utf8</div><div class="line"></div><div class="line"><span class="section">[mysqld_safe]</span></div><div class="line"><span class="attr">socket</span>= /var/run/mysqld/mysqld.sock</div><div class="line"><span class="attr">nice</span>= <span class="number">0</span></div><div class="line"></div><div class="line"><span class="section">[mysqld]</span></div><div class="line"><span class="attr">user</span>= mysql</div><div class="line"><span class="attr">pid-file</span>= /var/run/mysqld/mysqld.pid</div><div class="line"><span class="attr">socket</span>= /var/run/mysqld/mysqld.sock</div><div class="line"><span class="attr">port</span>= <span class="number">3306</span></div><div class="line"><span class="attr">basedir</span>= /usr</div><div class="line"></div><div class="line"><span class="comment"># 需要远程连接时，注释掉下面语句</span></div><div class="line"><span class="attr">bind-address</span>= <span class="number">0.0</span>.<span class="number">0.0</span>  </div><div class="line"></div><div class="line"><span class="attr">datadir</span>= /var/lib/mysql</div><div class="line"><span class="attr">tmpdir</span>= /tmp</div><div class="line"><span class="attr">lc-messages-dir</span>= /usr/share/mysql</div><div class="line"></div><div class="line"><span class="attr">myisam-recover-options</span>  = BACKUP</div><div class="line"><span class="attr">query_cache_limit</span>= <span class="number">1</span>M</div><div class="line"><span class="attr">query_cache_size</span>        = <span class="number">16</span>M</div><div class="line"><span class="attr">log_error</span> = /var/log/mysql/error.log</div></pre></td></tr></table></figure><h3 id="设置MySQL允许远程访问"><a href="#设置MySQL允许远程访问" class="headerlink" title="设置MySQL允许远程访问"></a>设置MySQL允许远程访问</h3><p>注释掉<code>bind-address = 0.0.0.0</code></p><h3 id="设置用户允许远程登录"><a href="#设置用户允许远程登录" class="headerlink" title="设置用户允许远程登录"></a>设置用户允许远程登录</h3><p><code>mysql -h localhost -u root -p</code>, 连接数据库，在命令台输入命令：</p><ul><li><code>use mysql;</code></li><li><code>select host, user from user;</code></li><li><code>GRANT ALL PRIVILEGES ON  *.*  TO root@&quot;%&quot; IDENTIFIED BY &#39;用户root的密码&#39;;</code></li></ul><p>现在root可以支持远程登陆了，root的host变为<code>%</code>通配符。</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171101/Bi12FD4lH2.png?imageslim" alt="mark"></p><p>允许root用户以任意ip地址远程登陆，一旦密码泄露是非常危险的。</p><p>推荐的做法:</p><ol><li><p>允许root从内网ip 192.168.1.122上登陆，指定内网单个ip</p><p><code>GRANT ALL PRIVILEGES ON  *.*  TO root@&quot;192.168.1.122&quot; IDENTIFIED BY &#39;用户root的密码&#39;;</code></p></li><li><p>创建新的用户，为其分配有限的权限，指定ip</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//创建库</div><div class="line">create database dbTest;</div><div class="line">//创建用户，设置密码</div><div class="line">create user &apos;useTest&apos;@&apos;%&apos; IDENTIFIED BY &apos;pwdTest&apos;;</div><div class="line">// 赋给该用户在dbTest数据上增删查，插入的权限， 连接ip为%，任意ip</div><div class="line">grant select,update,delete,insert on dbTest.* to useTest@&apos;%&apos;;</div><div class="line">flush privileges;</div><div class="line">use dbTest;</div></pre></td></tr></table></figure><p>​</p></li></ol><h3 id="设置utf8字符集"><a href="#设置utf8字符集" class="headerlink" title="设置utf8字符集"></a>设置utf8字符集</h3><p>解决中文乱码问题，打开mysql控制台，输入命令<code>show variables like &#39;character%&#39;;</code>查看字符集。</p><ol><li>修改配置文件</li></ol><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="section">[client]</span></div><div class="line"><span class="attr">default-character-set</span>=utf8</div><div class="line"></div><div class="line"><span class="section">[mysqld]</span></div><div class="line"><span class="attr">default-storage-engine</span>=INNODB</div><div class="line"><span class="attr">character-set-server</span>=utf8</div><div class="line"><span class="attr">collation-server</span>=utf8_general_ci</div></pre></td></tr></table></figure><ol><li><p>在命令台输入命令<code>set names utf8;</code></p></li><li><p>重启mysql后，使用命令查看字符集。</p><ul><li>character_set_client    </li><li>character_set_connection</li><li>character_set_results</li></ul><p>　　　以上三个控制mysql client的字符集</p><ul><li>character_set_database  </li></ul><p>​          设置数据库的默认字符集</p><ul><li>character_set_server    </li></ul><p>​          设置以上所有的默认字符集</p></li></ol><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171101/dDEkF9KfHf.png?imageslim" alt="mark"></p><h3 id="安装MySQL驱动"><a href="#安装MySQL驱动" class="headerlink" title="安装MySQL驱动"></a>安装MySQL驱动</h3><p>Python </p><p>sudo apt-get install python-pip<br>sudo apt-get install python-dev<br>sudo pip install mysql-python</p><p><code>pip install mysql-python</code></p><p>mysql-python安装时EnvironmentError: mysql_config not found</p><p>在安装 mysql-python时，会出现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">sh: mysql_config: not found</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;setup.py&quot;, line 15, in &lt;module&gt;</div><div class="line">    metadata, options = get_config()</div><div class="line">  File &quot;/home/zhxia/apps/source/MySQL-python-1.2.3/setup_posix.py&quot;, line 43, in get_config</div><div class="line">    libs = mysql_config(&quot;libs_r&quot;)</div><div class="line">  File &quot;/home/zhxia/apps/source/MySQL-python-1.2.3/setup_posix.py&quot;, line 24, in mysql_config</div><div class="line">    raise EnvironmentError(&quot;%s not found&quot; % (mysql_config.path,))</div><div class="line">EnvironmentError: mysql_config not found</div></pre></td></tr></table></figure><p>只要原因是没有安装:libmysqlclient-dev</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install libmysqlclient-dev</div></pre></td></tr></table></figure><p>找到mysql_config文件的路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo updatedb</div><div class="line">locate mysql_config</div></pre></td></tr></table></figure><p>mysql_config的位置为：/usr/bin/mysql_config</p><p>在mysql-python源码包下找到：setup_posix.py 文件，然后找到文件中的 mysql_config.path 将其值改为：/usr/bin/mysql_config,然后 sudo python setup.py install ,就ok了</p><h3 id="创建测试数据"><a href="#创建测试数据" class="headerlink" title="创建测试数据"></a>创建测试数据</h3><h4 id="使用DB-存储过程生成数据"><a href="#使用DB-存储过程生成数据" class="headerlink" title="使用DB 存储过程生成数据"></a>使用DB 存储过程生成数据</h4><blockquote><p>存储过程比较复杂，且sql提供的函数无法实现高级的数据处理功能</p></blockquote><ul><li><p>创建库和用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">database</span> dbTest;</div><div class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">'useTest'</span>@<span class="string">'%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'pwdTest'</span>;</div><div class="line"><span class="keyword">grant</span> <span class="keyword">select</span>,<span class="keyword">update</span>,<span class="keyword">delete</span>,<span class="keyword">insert</span> <span class="keyword">on</span> dbTest.* <span class="keyword">to</span> useTest@<span class="string">'%'</span>;</div><div class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</div><div class="line"><span class="keyword">use</span> dbTest;</div></pre></td></tr></table></figure></li><li><p>创建表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`tabTest`</span>;</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`tabTest`</span> (</div><div class="line">  <span class="string">`testID`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'ID'</span>,</div><div class="line">  <span class="string">`testTitle`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'title'</span>,</div><div class="line">  <span class="string">`testBody`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'boey'</span>,</div><div class="line">  <span class="string">`testType`</span> tinyint(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'title len'</span>,</div><div class="line">  <span class="string">`testValue`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'body len'</span>,</div><div class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`testID`</span>)</div><div class="line">) <span class="keyword">ENGINE</span>=MyISAM AUTO_INCREMENT=<span class="number">3</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COMMENT</span>=<span class="string">'test'</span>;</div><div class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tabTest auto_increment=<span class="number">1</span>;</div></pre></td></tr></table></figure></li><li><p>创建存储过程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">//创建存储过程，里面一长段汉字，用于随机抽取内容，可以随便改这段文字，但其中最好不要含用符号。</div><div class="line"></div><div class="line">DELIMITER $$</div><div class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`addTest`</span>$$</div><div class="line"><span class="keyword">CREATE</span> DEFINER=<span class="string">`root`</span>@<span class="string">`localhost`</span> <span class="keyword">PROCEDURE</span> <span class="string">`addTest`</span>(<span class="keyword">IN</span> insSum <span class="built_in">int</span>,<span class="keyword">IN</span> lenTitle <span class="built_in">int</span>,<span class="keyword">IN</span> lenBody <span class="built_in">int</span>)</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">    <span class="keyword">DECLARE</span> i <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">SET</span> i=<span class="number">0</span>;</div><div class="line">    <span class="keyword">set</span> @<span class="keyword">str</span>=<span class="string">'据新华社电日前，中共中央政治局常委、国务院总理李克强主持国务院专题讲座，讨论加快发展先进制造与3D打印等问题。李克强指出，推动中国制造由大变强，要紧紧依靠深化改革和创新驱动'</span></div><div class="line">    loop1: <span class="keyword">LOOP</span></div><div class="line">      <span class="keyword">SET</span> i=i+<span class="number">1</span>;</div><div class="line">      if i&gt;insSum then</div><div class="line">      LEAVE loop1;</div><div class="line">      <span class="keyword">end</span> <span class="keyword">if</span>;</div><div class="line"></div><div class="line">      <span class="keyword">set</span> @<span class="keyword">key</span>=<span class="keyword">SUBSTRING</span>(@<span class="keyword">str</span>,<span class="keyword">FLOOR</span>(<span class="keyword">rand</span>()*(<span class="keyword">length</span>(@<span class="keyword">str</span>)/<span class="number">3</span><span class="number">-10</span>)),<span class="number">2</span>+<span class="keyword">FLOOR</span>(<span class="keyword">rand</span>()*lenTitle));</div><div class="line">      <span class="keyword">set</span> @title=<span class="keyword">SUBSTRING</span>(@<span class="keyword">str</span>,<span class="keyword">FLOOR</span>(<span class="keyword">rand</span>()*(<span class="keyword">length</span>(@<span class="keyword">str</span>)/<span class="number">3</span><span class="number">-20</span>)),<span class="number">5</span>+<span class="keyword">FLOOR</span>(<span class="keyword">rand</span>()*lenBody));</div><div class="line">      <span class="keyword">insert</span> <span class="keyword">INTO</span> tabTest(testTitle,testBody,testType,testValue) <span class="keyword">values</span> (@<span class="keyword">key</span>,@title,<span class="keyword">length</span>(@title),<span class="keyword">length</span>(@<span class="keyword">key</span>));</div><div class="line">      </div><div class="line">      <span class="keyword">select</span> i,insSum-i;</div><div class="line">    <span class="keyword">END</span> <span class="keyword">LOOP</span> loop1;</div><div class="line"><span class="keyword">END</span>$$</div><div class="line">DELIMITER ;</div></pre></td></tr></table></figure><p>​</p></li><li><p>调用存储过程插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//调用过程开始添加数据，数字为要添加的条数</div><div class="line"><span class="keyword">call</span> addTest(<span class="number">2</span>,<span class="number">5</span>,<span class="number">80</span>);</div></pre></td></tr></table></figure></li></ul><h4 id="使用Python生成数据"><a href="#使用Python生成数据" class="headerlink" title="使用Python生成数据"></a>使用Python生成数据</h4><ul><li><p>使用Python批量插入数据</p><p>表结构：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS=<span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="comment">-- Table structure for major</span></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`major`</span>;</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`major`</span> (</div><div class="line">  <span class="string">`majorID`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">  <span class="string">`schooltype`</span> <span class="built_in">varchar</span>(<span class="number">40</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`major_name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`major_category`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`major_hot`</span> <span class="built_in">int</span>(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`majorID`</span>)</div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">3787</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</div><div class="line"></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="comment">-- Table structure for school</span></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`school`</span>;</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`school`</span> (</div><div class="line">  <span class="string">`schoolID`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">  <span class="string">`sname`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`location`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`school_type`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`school_category`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`school_hot`</span> <span class="built_in">int</span>(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`schoolID`</span>)</div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">2779</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</div><div class="line"></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="comment">-- Table structure for student</span></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`student`</span>;</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`student`</span> (</div><div class="line">  <span class="string">`studentID`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">  <span class="string">`studentName`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`age`</span> <span class="built_in">int</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`schoolID`</span> <span class="built_in">int</span>(<span class="number">3</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`majorID`</span> <span class="built_in">int</span>(<span class="number">3</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`sex`</span> <span class="built_in">varchar</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'男'</span>,</div><div class="line">  <span class="string">`score_4`</span> <span class="built_in">int</span>(<span class="number">3</span>) <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,</div><div class="line">  <span class="string">`score_6`</span> <span class="built_in">int</span>(<span class="number">3</span>) <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,</div><div class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`studentID`</span>)</div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">250708001</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</div></pre></td></tr></table></figure><p>一次插入多条数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">conn = MySQLdb.Connection(<span class="string">"123.207.235.76"</span>, <span class="string">"root"</span>, <span class="string">"123456"</span>, <span class="string">"dbTest"</span>, charset=<span class="string">'utf8'</span>)</div><div class="line">data = [(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>), (<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>)]</div><div class="line">cursor = conn.cursor()</div><div class="line">sql = <span class="string">"insert into student(schoolID, score_4, score_6) "</span> \</div><div class="line">              <span class="string">"VALUES (%s, %s, %s)"</span></div><div class="line">cursor.executemany(sql, data)</div><div class="line">conn.commit()</div></pre></td></tr></table></figure><p>生成随机数据：</p><p>forgery_py模块可以生成随机的英文名，地址，ip，品牌等测试数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding:utf-8</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> MySQLdb</div><div class="line"><span class="keyword">import</span> csv</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> forgery_py</div><div class="line"></div><div class="line"><span class="string">''' 写入major table'''</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_major</span><span class="params">()</span>:</span></div><div class="line">    t1 = time.time()</div><div class="line">    reader = csv.reader(file(<span class="string">'major_result.csv'</span>))</div><div class="line">    reader.next()  <span class="comment"># 调过csv的第一行</span></div><div class="line"></div><div class="line">    data  = [(x[<span class="number">0</span>], x[<span class="number">1</span>], int(x[<span class="number">2</span>]), x[<span class="number">3</span>]) <span class="keyword">for</span> x <span class="keyword">in</span> reader ]</div><div class="line">    conn = MySQLdb.Connection(<span class="string">"123.207.235.76"</span>,<span class="string">"root"</span>,<span class="string">"123456"</span>,<span class="string">"dbTest"</span>, charset=<span class="string">'utf8'</span>)</div><div class="line">    cursor = conn.cursor()</div><div class="line">    sql = <span class="string">"""insert into major(major_name, major_category, major_hot,schooltype) VALUES (%s, %s, %s, %s)"""</span></div><div class="line">    cursor.executemany(sql, data)</div><div class="line">    conn.commit()</div><div class="line">    cursor.close()</div><div class="line">    conn.close()</div><div class="line">    <span class="keyword">print</span> time.time() - t1  <span class="comment"># 1.23699998856</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="string">''' 写入school table'''</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_school</span><span class="params">()</span>:</span></div><div class="line">    reader = csv.reader(file(<span class="string">'result.csv'</span>))</div><div class="line">    reader.next()</div><div class="line">    data  = [(x[<span class="number">0</span>], x[<span class="number">1</span>], x[<span class="number">2</span>], x[<span class="number">4</span>], int(x[<span class="number">3</span>])) <span class="keyword">for</span> x <span class="keyword">in</span> reader ]</div><div class="line">    t1 = time.time()</div><div class="line">    conn = MySQLdb.Connection(<span class="string">"123.207.235.76"</span>,<span class="string">"root"</span>,<span class="string">"123456"</span>,<span class="string">"dbTest"</span>, charset=<span class="string">'utf8'</span>)</div><div class="line">    cursor = conn.cursor()</div><div class="line">    sql = <span class="string">"""insert into school(sname, location, school_type, school_category, school_hot) VALUES (%s, %s, %s, %s, %s)"""</span></div><div class="line">    cursor.executemany(sql, data)</div><div class="line">    conn.commit()</div><div class="line">    cursor.close()</div><div class="line">    conn.close()</div><div class="line">    <span class="keyword">print</span> time.time() - t1  <span class="comment">#0.851999998093</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="string">''' 写入school table'''</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_one</span><span class="params">()</span>:</span></div><div class="line">    name = forgery_py.name.full_name()</div><div class="line">    sid = forgery_py.name.random.randint(<span class="number">1</span>, <span class="number">2778</span>)</div><div class="line">    mid = forgery_py.name.random.randint(<span class="number">2525</span>, <span class="number">3786</span>)</div><div class="line">    age = forgery_py.name.random.randint(<span class="number">18</span>, <span class="number">35</span>)</div><div class="line">    score_4 = forgery_py.name.random.uniform(<span class="number">400</span>, <span class="number">750</span>)</div><div class="line">    score_6 = forgery_py.name.random.uniform(<span class="number">400</span>, <span class="number">750</span>)</div><div class="line">    sex = forgery_py.name.random.choice([<span class="string">u'男'</span>, <span class="string">u'女'</span>])</div><div class="line">    <span class="keyword">return</span> (name, age, sid, mid, sex, score_4, score_6)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_student</span><span class="params">()</span>:</span></div><div class="line">    conn = MySQLdb.Connection(<span class="string">"localhost"</span>, <span class="string">"root"</span>, <span class="string">"123456"</span>, <span class="string">"dbTest"</span>, charset=<span class="string">'utf8'</span>)</div><div class="line">    cursor = conn.cursor()</div><div class="line">    t1 = time.time()</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">200</span>):</div><div class="line">        data = [create_one() <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">2000</span>)]</div><div class="line">        sql = <span class="string">"insert into student(studentName, age, schoolID, majorID, sex, score_4, score_6) "</span> \</div><div class="line">              <span class="string">"VALUES (%s, %s, %s, %s, %s, %s, %s)"</span></div><div class="line">        cursor.executemany(sql, data)</div><div class="line">        conn.commit()</div><div class="line">        <span class="keyword">del</span> data</div><div class="line">    cursor.close()</div><div class="line">    conn.close()</div><div class="line">    <span class="keyword">print</span> time.time() - t1 <span class="comment"># 1.23699998856</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    insert_major()</div><div class="line">    insert_school()</div><div class="line">    insert_student()</div></pre></td></tr></table></figure><p>​</p></li></ul><h3 id="查询测试"><a href="#查询测试" class="headerlink" title="查询测试"></a>查询测试</h3><h4 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h4><ol><li><p>在有索引的情况下执行查询：</p><p>表的主键、外键是必须有索引的，经常与其他表连接的字段，经常出现在where子句中的字段都应该有索引。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">SELECT * <span class="keyword">from</span> student where studentID=<span class="number">250000000</span>;</div><div class="line"></div><div class="line">/*</div><div class="line">受影响的行: <span class="number">0</span></div><div class="line">时间: <span class="number">0.037</span>s</div><div class="line">*/</div><div class="line"></div><div class="line">UPDATE student </div><div class="line">SET studentName = <span class="string">'Wanda Lawrence1'</span> </div><div class="line">WHERE studentID=<span class="number">250000000</span>;</div><div class="line"></div><div class="line">/*</div><div class="line">受影响的行: <span class="number">1</span></div><div class="line">时间: <span class="number">0.101</span>s</div><div class="line">*/</div></pre></td></tr></table></figure></li><li><p>在没有索引的字段执行查询</p><ul><li>使用LIMIT进行分页查询，一次查询想要拿到的结果越多，扫描权标花费的时间就越多。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">from</span> student <span class="keyword">where</span> studentName = <span class="string">'Wanda Lawrence1'</span>;</div><div class="line"></div><div class="line"><span class="comment">/* </span></div><div class="line"><span class="comment">studentName = 'Wanda Lawrence1'的记录仅有一条，且是第第2.5亿条记录</span></div><div class="line"><span class="comment">受影响的行: 0</span></div><div class="line"><span class="comment">时间: 1651.702s， 27分钟。</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student</div><div class="line"><span class="keyword">WHERE</span> studentName = <span class="string">'Wanda Lawrence'</span></div><div class="line"><span class="keyword">LIMIT</span> <span class="number">0</span>, <span class="number">100</span>;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">受影响的行: 0</span></div><div class="line"><span class="comment">时间: 6.525s </span></div><div class="line"><span class="comment">第100个符合条件的记录，其位置为2297114，也就是条件查询6.5s遍历了229万条数据。</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line">[SQL]<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student</div><div class="line"><span class="keyword">WHERE</span> studentName = <span class="string">'Wanda Lawrence'</span></div><div class="line"><span class="keyword">LIMIT</span> <span class="number">0</span>, <span class="number">100</span>;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">受影响的行: 0</span></div><div class="line"><span class="comment">时间: 1.599s</span></div><div class="line"><span class="comment">第100个符合条件的记录，其位置为2297114。</span></div><div class="line"><span class="comment">相比上次的6.525秒的执行速度，这次只用了1.599s,说明mysql内部有缓存机制</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line">[SQL]<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student</div><div class="line"><span class="keyword">WHERE</span> studentName = <span class="string">'Wanda Lawrence'</span></div><div class="line"><span class="keyword">LIMIT</span> <span class="number">0</span>, <span class="number">10</span>;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">受影响的行: 0</span></div><div class="line"><span class="comment">时间: 0.257s</span></div><div class="line"><span class="comment">第10个符合条件的记录，其位置为289394， 0.257s遍历了29万条记录， 可能会受到缓存的影响</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line">[SQL]<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student</div><div class="line"><span class="keyword">WHERE</span> studentName = <span class="string">'Michelle Warren'</span></div><div class="line"><span class="keyword">LIMIT</span> <span class="number">0</span>, <span class="number">10</span>;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">受影响的行: 0</span></div><div class="line"><span class="comment">时间: 0.161s</span></div><div class="line"><span class="comment">第10个符合条件的记录，其位置为236033， 与上面的结果相比，mysql内部缓存机制对于30万级别的记录影响不大。</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure></li><li><p>数据库中避免使用空值变量null</p><p>对于一个数值字段可以设置0代替null,速度差别10倍</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[SQL]<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student</div><div class="line"><span class="keyword">WHERE</span> age = <span class="literal">null</span></div><div class="line"><span class="keyword">LIMIT</span> <span class="number">0</span>, <span class="number">10</span>;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">受影响的行: 0</span></div><div class="line"><span class="comment">时间: 2.161s</span></div><div class="line"><span class="comment">第10个符合条件的记录，其位置为199712</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line">[SQL]<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student</div><div class="line"><span class="keyword">WHERE</span> age = <span class="number">0</span></div><div class="line"><span class="keyword">LIMIT</span> <span class="number">0</span>, <span class="number">10</span>;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">受影响的行: 0</span></div><div class="line"><span class="comment">时间: 0.191s</span></div><div class="line"><span class="comment">第10个符合条件的记录，其位置为2558733</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure></li><li><p>避免在where子句中使用or</p><p>使用Union all 连接2个子查询，比使用or的逻辑条件查询速度快很多。</p><p>从下面的执行结果可以看出二者相差8倍，这还是在查询字段有索引的情况下。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 有索引的字段</span></div><div class="line">[SQL]<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student</div><div class="line"><span class="keyword">WHERE</span> studentID = <span class="number">254000</span> <span class="keyword">or</span> studentID = <span class="number">220000000</span>;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">受影响的行: 0</span></div><div class="line"><span class="comment">时间: 0.224s</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line">[SQL]<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student</div><div class="line"><span class="keyword">WHERE</span> studentID = <span class="number">254000</span> </div><div class="line"><span class="keyword">UNION</span> ALL</div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student</div><div class="line"><span class="keyword">WHERE</span> studentID = <span class="number">220000000</span>;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">受影响的行: 0</span></div><div class="line"><span class="comment">时间: 0.038s</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"><span class="comment">-- 没有索引的字段</span></div><div class="line"><span class="comment">-- union 联合查询无法配合分页Limit使用，下面的sql语句语法错误</span></div><div class="line">[SQL]<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student</div><div class="line"><span class="keyword">WHERE</span> studentName = <span class="string">'Carol Henderson'</span></div><div class="line"><span class="keyword">UNION</span> ALL</div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student</div><div class="line"><span class="keyword">WHERE</span> studentName = <span class="string">'Andrea Griffin'</span></div><div class="line"><span class="keyword">LIMIT</span> <span class="number">0</span>, <span class="number">100</span>;</div></pre></td></tr></table></figure></li><li><p>不要用模糊匹配，如果有必要可以使用全文检索提高效率。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[SQL]<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student</div><div class="line"><span class="keyword">WHERE</span> studentName <span class="keyword">LIKE</span> <span class="string">'Wanda%2'</span> <span class="keyword">LIMIT</span> <span class="number">1</span>;</div><div class="line"><span class="comment">/*  </span></div><div class="line"><span class="comment">受影响的行: 0</span></div><div class="line"><span class="comment">时间: 1.046s</span></div><div class="line"><span class="comment">*/</span></div><div class="line">[SQL]<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student</div><div class="line"><span class="keyword">WHERE</span> studentName = <span class="string">'Wanda Lawrence2'</span> <span class="keyword">LIMIT</span> <span class="number">1</span>;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">受影响的行: 0</span></div><div class="line"><span class="comment">时间: 0.975s</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure></li><li><p>in和 not in也要慎用，否则会导致全表扫描：</p><p>当查询条件是连续型数值时，使用between替换in语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[SQL]<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student</div><div class="line"><span class="keyword">WHERE</span> majorID <span class="keyword">in</span> (<span class="number">2841</span>, <span class="number">2842</span>, <span class="number">2843</span>, <span class="number">2844</span>, <span class="number">2845</span>)</div><div class="line"><span class="keyword">LIMIT</span> <span class="number">10000</span>;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">受影响的行: 0</span></div><div class="line"><span class="comment">时间: 7.291s</span></div><div class="line"><span class="comment">*/</span></div><div class="line">[SQL]<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student</div><div class="line"><span class="keyword">WHERE</span> majorID <span class="keyword">BETWEEN</span> <span class="number">2841</span> <span class="keyword">AND</span> <span class="number">2845</span></div><div class="line"><span class="keyword">LIMIT</span> <span class="number">10000</span>;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">受影响的行: 0</span></div><div class="line"><span class="comment">时间: 7.019s</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure></li><li><p>、应尽量避免在 where子句中对字段进行表达式操作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[SQL]<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student</div><div class="line"><span class="keyword">WHERE</span> majorID/<span class="number">2</span> = <span class="number">1422</span></div><div class="line"><span class="keyword">LIMIT</span> <span class="number">1000</span>;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">受影响的行: 0</span></div><div class="line"><span class="comment">时间: 3.733s</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line">[SQL]<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student</div><div class="line"><span class="keyword">WHERE</span> majorID = <span class="number">1422</span>*<span class="number">2</span></div><div class="line"><span class="keyword">LIMIT</span> <span class="number">1000</span>;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">受影响的行: 0</span></div><div class="line"><span class="comment">时间: 1.174s</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure></li><li><p>应尽量避免在where子句中对字段进行函数操作,不要在 where子句中的“=”左边进行函数、算术运算或其他表达式运算</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[SQL]<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student</div><div class="line"><span class="keyword">WHERE</span> <span class="keyword">SUBSTRING</span>(studentName, <span class="number">1</span>, <span class="number">5</span>) = <span class="string">'Wanda'</span></div><div class="line"><span class="keyword">LIMIT</span> <span class="number">10000</span>;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">受影响的行: 0</span></div><div class="line"><span class="comment">时间: 3.015s</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line">[SQL]<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student</div><div class="line"><span class="keyword">WHERE</span> studentName <span class="keyword">LIKE</span> <span class="string">'Wanda%'</span></div><div class="line"><span class="keyword">LIMIT</span> <span class="number">10000</span>;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">受影响的行: 0</span></div><div class="line"><span class="comment">时间: 2.871s</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure></li></ol><h4 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h4><ol><li><p>用 exists代替 in执行嵌套查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">[SQL]<span class="keyword">SELECT</span> *</div><div class="line"><span class="keyword">FROM</span> student st</div><div class="line"><span class="keyword">WHERE</span> st.majorID <span class="keyword">in</span> (<span class="keyword">SELECT</span> majorID <span class="keyword">FROM</span> major mj</div><div class="line"><span class="keyword">WHERE</span> mj.major_category = <span class="string">'财经类'</span></div><div class="line"><span class="keyword">AND</span> mj.major_name = <span class="string">'证券投资与管理'</span>)</div><div class="line"><span class="keyword">AND</span> st.schoolID <span class="keyword">in</span> (<span class="keyword">SELECT</span> schoolID <span class="keyword">FROM</span> school sc</div><div class="line"><span class="keyword">WHERE</span> sc.school_category = <span class="string">'财经类'</span></div><div class="line"><span class="keyword">AND</span> sc.school_type = <span class="string">'高职高专'</span></div><div class="line"><span class="keyword">AND</span> sc.location = <span class="string">'上海'</span>)</div><div class="line"><span class="keyword">AND</span> st.age = <span class="number">33</span></div><div class="line"><span class="keyword">AND</span> st.sex = <span class="string">'女'</span></div><div class="line"><span class="keyword">LIMIT</span> <span class="number">1</span>;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">受影响的行: 0</span></div><div class="line"><span class="comment">时间: 62.578s</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line">[SQL]<span class="keyword">SELECT</span> *</div><div class="line"><span class="keyword">FROM</span> student st</div><div class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> major mj</div><div class="line"><span class="keyword">WHERE</span> st.majorID = mj.majorID</div><div class="line"><span class="keyword">AND</span> mj.major_category = <span class="string">'财经类'</span></div><div class="line"><span class="keyword">AND</span> mj.major_name = <span class="string">'证券投资与管理'</span>)</div><div class="line"><span class="keyword">AND</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> school sc</div><div class="line"><span class="keyword">WHERE</span> sc.schoolID=st.schoolID</div><div class="line"><span class="keyword">AND</span> sc.school_category = <span class="string">'财经类'</span></div><div class="line"><span class="keyword">AND</span> sc.school_type = <span class="string">'高职高专'</span></div><div class="line"><span class="keyword">AND</span> sc.location = <span class="string">'上海'</span>)</div><div class="line"><span class="keyword">AND</span> st.age = <span class="number">33</span></div><div class="line"><span class="keyword">AND</span> st.sex = <span class="string">'女'</span></div><div class="line"><span class="keyword">LIMIT</span> <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">受影响的行: 0</span></div><div class="line"><span class="comment">时间: 68.563s</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure></li><li><p>join</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">[SQL]<span class="keyword">SELECT</span> *</div><div class="line"><span class="keyword">FROM</span> student st, major mj, school sc</div><div class="line"><span class="keyword">WHERE</span> st.age = <span class="number">33</span></div><div class="line"><span class="keyword">AND</span> st.sex = <span class="string">'女'</span></div><div class="line"> <span class="keyword">AND</span> st.majorID = mj.majorID </div><div class="line"><span class="keyword">AND</span> st.schoolID = sc.schoolID</div><div class="line"><span class="keyword">AND</span> sc.school_category = <span class="string">'财经类'</span></div><div class="line"><span class="keyword">AND</span> sc.school_type = <span class="string">'高职高专'</span></div><div class="line"><span class="keyword">AND</span> sc.location = <span class="string">'上海'</span></div><div class="line"><span class="keyword">AND</span> mj.major_category = <span class="string">'财经类'</span></div><div class="line"><span class="keyword">AND</span> mj.major_name = <span class="string">'证券投资与管理'</span></div><div class="line"><span class="keyword">LIMIT</span> <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">受影响的行: 0</span></div><div class="line"><span class="comment">时间: 76.140s</span></div><div class="line"><span class="comment">扫描到第200万行记录</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line">[SQL]<span class="keyword">SELECT</span> *</div><div class="line"><span class="keyword">FROM</span> student st</div><div class="line"><span class="keyword">JOIN</span> major mj <span class="keyword">ON</span> (st.majorID = mj.majorID </div><div class="line"><span class="keyword">AND</span> mj.major_category = <span class="string">'财经类'</span></div><div class="line"><span class="keyword">AND</span> mj.major_name = <span class="string">'证券投资与管理'</span>)</div><div class="line"><span class="keyword">JOIN</span> school sc <span class="keyword">ON</span> (st.schoolID = sc.schoolID</div><div class="line"><span class="keyword">AND</span> sc.school_category = <span class="string">'财经类'</span></div><div class="line"><span class="keyword">AND</span> sc.school_type = <span class="string">'高职高专'</span></div><div class="line"><span class="keyword">AND</span> sc.location = <span class="string">'上海'</span>)</div><div class="line"><span class="keyword">WHERE</span> st.age = <span class="number">33</span></div><div class="line"><span class="keyword">AND</span> st.sex = <span class="string">'女'</span></div><div class="line"><span class="keyword">LIMIT</span> <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">受影响的行: 0</span></div><div class="line"><span class="comment">时间: 65.335s</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure><p>​</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Ubuntu安装配置MySQL&lt;/p&gt;
&lt;h3 id=&quot;安装mysql&quot;&gt;&lt;a href=&quot;#安装mysql&quot; class=&quot;headerlink&quot; title=&quot;安装mysql&quot;&gt;&lt;/a&gt;安装mysql&lt;/h3&gt;&lt;p&gt;&lt;code&gt;sudo apt-get install 
      
    
    </summary>
    
      <category term="技术" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="数据库" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://shuaiyy.cn/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>hexo lightum 博客折腾之旅</title>
    <link href="http://shuaiyy.cn/2017/10/07/%E6%8A%80%E6%9C%AF/hexo-lightum/"/>
    <id>http://shuaiyy.cn/2017/10/07/技术/hexo-lightum/</id>
    <published>2017-10-06T16:00:00.000Z</published>
    <updated>2017-11-07T09:05:16.362Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近打算将原来的博客从jekyll转到hexo，瞎折腾了好久。最初用的是next主题，好处是next文档丰富，插件齐全。</p><p>后来又看上了light主题，但是light用的人不多，相关的插件、功能只好参考next以及其他hexo主题提供的解决方案，自己整合。</p></blockquote><h2 id="我喜欢的博客主题风格"><a href="#我喜欢的博客主题风格" class="headerlink" title="我喜欢的博客主题风格"></a>我喜欢的博客主题风格</h2><ul><li><p><a href="https://www.zhihu.com/question/20223939" target="_blank" rel="external">有哪些简洁明快的jekyll模板</a></p><p>我最开始用的是jekyll，主题是<a href="painterlin.com">首页 | 林安亚的博客</a> </p><p><a href="http://yansu.org" target="_blank" rel="external">闫肃的博客</a>  现在依然觉得这个博客好看且实用</p></li><li><p><a href="http://theme-next.iissnan.com/" target="_blank" rel="external">hexo-next</a></p><p>用了一段时间，功能丰富，配置简单。不过后来看到了light主题，个人审美更喜欢light</p></li><li><p>hexo-lightum</p><p>基于light的改进主题，也是我现在在使用的</p></li></ul><p><strong>其他好看的博客</strong></p><ul><li><p><a href="http://www.lyun.me/" target="_blank" rel="external">琉璃之鸟</a></p><p>wordpress的博客，当初玩饥荒查攻略时进入的网站，感觉挺不错的。</p></li><li><p><a href="https://sunflyer.cn/" target="_blank" rel="external">Crazy Coder</a></p><p>SimplyNetKeeper电信E信路由器破解连接软件，作者的博客。</p></li><li><p><a href="http://iconmoon.com/about/" target="_blank" rel="external">图月志</a></p><p>这个很酷炫，不过是Bo-Blog，mysql+PHP，模板不清楚。</p></li></ul><h2 id="Hexo博客折腾之路"><a href="#Hexo博客折腾之路" class="headerlink" title="Hexo博客折腾之路"></a>Hexo博客折腾之路</h2><a id="more"></a><h3 id="确定主题模板"><a href="#确定主题模板" class="headerlink" title="确定主题模板"></a>确定主题模板</h3><ul><li>基于light改进的<a href="https://github.com/zippera/lightum" target="_blank" rel="external">lightum</a></li><li>提供我现在博客的模板及配置</li></ul><h3 id="更改category分级"><a href="#更改category分级" class="headerlink" title="更改category分级"></a>更改category分级</h3><ul><li><p><a href="http://lupeng.me/2015/06/23/%E6%B7%BB%E5%8A%A0%E5%A4%9A%E7%BA%A7%E5%88%86%E7%B1%BB.html" target="_blank" rel="external">参考</a></p></li><li><p>分级可以设置显示到几级</p><p>在theme的config中设置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># category显示的层级</span></div><div class="line"><span class="comment"># 0显示所有分级，-1显示所有但不分级，1 只显示第一层的分类， n显示n层分级。</span></div><div class="line"><span class="comment"># 不想分级时设值为1</span></div><div class="line"><span class="attr">category_depth:</span> <span class="number">3</span></div></pre></td></tr></table></figure><p>​</p></li><li><p>在每篇post文章的Front-matter 中<code>category:</code> 可以设置多个值</p></li></ul><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171008/gAh6eib0BE.png?imageslim" alt="mark"></p><h3 id="归档和文章目录"><a href="#归档和文章目录" class="headerlink" title="归档和文章目录"></a>归档和文章目录</h3><ul><li><p><a href="http://lupeng.me/2015/06/11/%E6%B7%BB%E5%8A%A0toc%E4%BB%A5%E5%8F%8Aarchive.html" target="_blank" rel="external"></a></p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171008/hiG0C53I97.png?imageslim" alt="mark"></p></li></ul><h3 id="日历云挂件"><a href="#日历云挂件" class="headerlink" title="日历云挂件"></a>日历云挂件</h3><ul><li><p><a href="http://howiefh.github.io/2016/04/29/hexo-s-calendar-plugin/?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">参考</a></p></li><li><p>配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">calendar:</span></div><div class="line"><span class="attr">  language:</span> <span class="string">zh-CN</span></div></pre></td></tr></table></figure><p>​</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171008/48hhCIEFCi.png?imageslim" alt="mark"></p><p>​</p></li></ul><h3 id="自定义layout"><a href="#自定义layout" class="headerlink" title="自定义layout"></a>自定义layout</h3><blockquote><p>一个md文件或html，txt，采用哪种layout渲染，是由Front-matter中的layout字段定义的。默认使用post，如果使用样式，则<code>layout:false</code></p><p>hexo默认提供了post和scraft两种样式，这里我自己定义了resume、game、book三种样式。</p><p>看了这2个例子，应该就会写自己的layout了，关键还是看网页设计的能力</p></blockquote><h4 id="resume简历"><a href="#resume简历" class="headerlink" title="resume简历"></a>resume简历</h4><ul><li>参考<a href="http://lupeng.me/2015/06/10/%E6%B7%BB%E5%8A%A0resume%E5%B8%83%E5%B1%80.html" target="_blank" rel="external">教程</a></li></ul><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171008/jA4fjClICD.png?imageslim" alt="mark"></p><h4 id="book和game"><a href="#book和game" class="headerlink" title="book和game"></a>book和game</h4><ul><li><p>ejs语法和百度静态文件cdn</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ejs语法</span></div><div class="line"><span class="comment">//for ，if-else-if</span></div><div class="line">&lt;% <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> page.books)&#123; %&gt;</div><div class="line">&lt;% <span class="keyword">if</span> (page.books[i].status == <span class="string">'已读'</span>) &#123;%&gt;</div><div class="line">&lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"label label-success"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">page.books</span>[<span class="attr">i</span>]<span class="attr">.status</span> %&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></div><div class="line">&lt;% &#125; <span class="keyword">else</span> <span class="keyword">if</span> (page.books[i].status == <span class="string">'在读'</span>)&#123; %&gt;</div><div class="line">&lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"label label-info"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">page.books</span>[<span class="attr">i</span>]<span class="attr">.status</span> %&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></div><div class="line">&lt;% &#125; <span class="keyword">else</span> <span class="keyword">if</span> (page.books[i].status == <span class="string">'未读'</span>) &#123; %&gt;</div><div class="line">&lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"label label-default"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">page.books</span>[<span class="attr">i</span>]<span class="attr">.status</span> %&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></div><div class="line">&lt;% &#125; %&gt;</div><div class="line">&lt;% &#125; %&gt;</div><div class="line">  </div><div class="line"><span class="comment">//forEach</span></div><div class="line">&lt;% item.photos.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">photo</span>)</span>&#123; %&gt;</div><div class="line">  &lt;%- photo.url %&gt;</div><div class="line">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure></li><li><p>使用了bootstrap</p><p> <a href="http://cdn.code.baidu.com/" target="_blank" rel="external">百度静态文件cdn资源</a></p><p>在<code>lightum\layout\_partial\head.ejs</code>引入js和css文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;% <span class="keyword">if</span> (page.books || page.games)&#123; %&gt;<span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//apps.bdimg.com/libs/bootstrap/3.2.0/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span></div><div class="line">&lt;% if (page.books || page.games) &#123; %&gt;&lt;link rel="stylesheet" href="http://apps.bdimg.com/libs/bootstrap/3.2.0/css/bootstrap.min.css"  type="text/css"&gt;&lt;%&#125; %&gt;</div></pre></td></tr></table></figure><p>​</p></li><li><p>添加源码 <code>lightum\layout\game.ejs</code></p><p>内容指向实际存放模板的位置<code>&lt;%- partial(&#39;_partial/game&#39;) %&gt;</code></p></li><li><p><code>lightum\layout\_partial/game.ejs</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row"</span>&gt;</div><div class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-13 aside3-title"</span>&gt;</div><div class="line">    &lt;br&gt;</div><div class="line">    &lt;h2 id=<span class="string">"#identifier"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">page.title</span> %&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></div><div class="line">  &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">  &lt;div class="col-md-13 aside3-content"&gt;</span></div><div class="line"><span class="regexp">    &lt;br /</span>&gt;</div><div class="line">    &lt;br /&gt;</div><div class="line"> &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row"</span>&gt;</div><div class="line">  &lt;% page.games.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">game</span>)</span>&#123; %&gt;</div><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-12"</span>&gt;</div><div class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"panel panel-primary"</span>&gt;</div><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"panel-heading"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">game.title</span> %&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"panel-body"</span>&gt;</div><div class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row"</span>&gt;</div><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-4 col-xs-12 center"</span>&gt;</div><div class="line">  &lt;img src=<span class="string">"&lt;%- game.cover %&gt;"</span> alt=<span class="string">"cover"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"img-thumbnail"</span>&gt;</div><div class="line">&lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">&lt;div class="col-md-8 col-xs-12"&gt;</span></div><div class="line"><span class="regexp">  &lt;table class="table table-bordered"&gt;</span></div><div class="line"><span class="regexp">&lt;tbody&gt;</span></div><div class="line"><span class="regexp">  &lt;tr&gt;&lt;td style="width:80px;"&gt;游戏平台&lt;/</span>td&gt;<span class="xml"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">%-</span> <span class="attr">game.platform</span> %&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></div><div class="line">  &lt;tr&gt;<span class="xml"><span class="tag">&lt;<span class="name">td</span>&gt;</span>出版商<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">%-</span> <span class="attr">game.publisher</span> %&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></div><div class="line">  &lt;tr&gt;<span class="xml"><span class="tag">&lt;<span class="name">td</span>&gt;</span>语言<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">%-</span> <span class="attr">game.language</span> %&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></div><div class="line">  &lt;tr&gt;</div><div class="line">&lt;td&gt;链接&lt;<span class="regexp">/td&gt;&lt;td&gt;</span></div><div class="line"><span class="regexp">&lt;a href="&lt;%- game.link %&gt;" title="&lt;%- game.link %&gt;"&gt;游戏链接&lt;/</span>a&gt;</div><div class="line">  &lt;<span class="regexp">/td&gt;&lt;/</span>tr&gt;</div><div class="line">  &lt;tr&gt;</div><div class="line">&lt;td&gt;状态&lt;<span class="regexp">/td&gt;</span></div><div class="line"><span class="regexp">&lt;td&gt;</span></div><div class="line"><span class="regexp">  &lt;% if (game.status == '已通关')&#123; %&gt;</span></div><div class="line"><span class="regexp">&lt;span class="label label-success"&gt;&lt;%- game.status %&gt;&lt;/</span>span&gt;</div><div class="line">  &lt;% &#125; <span class="keyword">else</span> <span class="keyword">if</span> (game.status == <span class="string">'进行中'</span>) &#123; %&gt;</div><div class="line">&lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"label label-info"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">game.status</span> %&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></div><div class="line">  &lt;% &#125; <span class="keyword">else</span> <span class="keyword">if</span> (game.status == <span class="string">'未开始'</span>) &#123;%&gt;</div><div class="line">&lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"label label-default"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">game.status</span> %&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></div><div class="line">  &lt;% &#125;%&gt;</div><div class="line">&lt;<span class="regexp">/td&gt;&lt;/</span>tr&gt;</div><div class="line">  &lt;tr&gt;<span class="xml"><span class="tag">&lt;<span class="name">td</span>&gt;</span>类型<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">%-</span> <span class="attr">game.type</span> %&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></div><div class="line">  &lt;tr&gt;<span class="xml"><span class="tag">&lt;<span class="name">td</span>&gt;</span>评价<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">%-</span> <span class="attr">game.description</span> %&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></div><div class="line">&lt;<span class="regexp">/tbody&gt;</span></div><div class="line"><span class="regexp">  &lt;/</span>table&gt;</div><div class="line">&lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">  &lt;/</span>div&gt;  </div><div class="line">&lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">  &lt;/</span>div&gt;      </div><div class="line">&lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp"> &lt;% &#125;) %&gt;</span></div><div class="line"><span class="regexp"> </span></div><div class="line"><span class="regexp">&lt;/</span>div&gt; </div><div class="line">&lt;<span class="regexp">/div&gt;      </span></div><div class="line"><span class="regexp">&lt;/</span>div&gt;</div></pre></td></tr></table></figure><p>​</p></li><li><p>front-matter</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">layout:</span> <span class="string">game</span></div><div class="line"><span class="attr">title:</span> <span class="number">2016</span><span class="string">年玩过的游戏</span></div><div class="line"><span class="attr">category:</span> </div><div class="line"><span class="bullet">  -</span> <span class="string">生活</span></div><div class="line"><span class="bullet">  -</span> <span class="string">游戏</span></div><div class="line"><span class="attr">keywords:</span> </div><div class="line"><span class="bullet">  -</span> <span class="string">游戏</span></div><div class="line"><span class="bullet">  -</span> <span class="string">娱乐</span></div><div class="line"><span class="bullet">  -</span> <span class="number">2016</span></div><div class="line"><span class="attr">tags:</span> </div><div class="line"><span class="bullet">  -</span> <span class="string">Enjoy</span></div><div class="line"><span class="attr">games:</span> </div><div class="line"><span class="attr">    - title:</span> <span class="string">饥荒联机版（Don't</span> <span class="string">starve</span> <span class="string">together）</span></div><div class="line"><span class="attr">      cover:</span> <span class="attr">http://ww4.sinaimg.cn/large/af9df239gw1f5dmat61rdj209q0d3jrq.jpg</span></div><div class="line"><span class="attr">      link:</span> <span class="attr">http://www.gamersky.com/z/dontstarve/</span></div><div class="line"><span class="attr">      publisher:</span> <span class="string">Klei</span> <span class="string">Entertainment</span></div><div class="line"><span class="attr">      platform:</span> <span class="string">steam</span></div><div class="line"><span class="attr">      type:</span> <span class="string">动作冒险，收集生存类沙盒游戏，2D画风,背景音乐超赞，在线多人联机</span></div><div class="line"><span class="attr">      description:</span> <span class="string">steam好评如潮</span></div><div class="line"><span class="attr">      status:</span> <span class="string">进行中</span></div><div class="line"><span class="attr">      language:</span> <span class="string">可用中文mod</span></div><div class="line"><span class="attr">    - title:</span> <span class="string">传送门2（Portal</span> <span class="number">2</span><span class="string">）</span></div><div class="line"><span class="attr">      cover:</span> <span class="attr">http://ww2.sinaimg.cn/large/af9df239gw1f5dmc8dce8j20dw0jjabi.jpg</span></div><div class="line"><span class="attr">      link:</span> <span class="attr">http://www.gamersky.com/z/portal2/</span></div><div class="line"><span class="attr">      publisher:</span> <span class="string">Valve</span> <span class="string">Software</span></div><div class="line"><span class="attr">      language:</span> <span class="string">支持中文</span></div><div class="line"><span class="attr">      platform:</span> <span class="string">steam</span></div><div class="line"><span class="attr">      type:</span> <span class="string">第一人称视角，解迷，冒险，科幻,在线双人合作</span></div><div class="line"><span class="attr">      description:</span> <span class="string">steam好评如潮</span></div><div class="line"><span class="attr">      status:</span> <span class="string">进行中</span></div><div class="line"><span class="meta">---</span></div></pre></td></tr></table></figure><p>​</p></li><li><p>效果</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171008/CbG4LCGHhG.png?imageslim" alt="mark"></p></li></ul><h3 id="添加导航栏icon图标"><a href="#添加导航栏icon图标" class="headerlink" title="添加导航栏icon图标"></a>添加导航栏icon图标</h3><p>hexo theme大多数都是用的font-awesome字体图标库，在主题下的config文件，导航栏配置相应的icon即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">menu:</div><div class="line">  home: /</div><div class="line">  archives: /archives</div><div class="line">  about: /resume</div><div class="line">  Books: /books     #This is your books page</div><div class="line">  Movies: /movies   #This is your movies page</div><div class="line">  #Leetcode: /leetcode</div><div class="line">  #tools: /tools</div><div class="line"></div><div class="line">menu_icon:</div><div class="line">  home: home</div><div class="line">  archives: archive</div><div class="line">  about: user</div><div class="line">  Books: book</div><div class="line">  Movies: play-circle</div><div class="line">  #Leetcode: file-text</div><div class="line">  #tools: user</div></pre></td></tr></table></figure><h3 id="添加打赏"><a href="#添加打赏" class="headerlink" title="添加打赏"></a>添加打赏</h3><ul><li><p>挂件中的打赏，直接替换支付宝图片的url即可</p></li><li><p>文章内的打赏，我用的是github上别人的<a href="https://github.com/shuaiyy/vdonate" target="_blank" rel="external">代码</a></p><p>在主题的配置文件中设置donate为true</p><p>功能实现代码在<code>\themes\lightum\layout\_partial\post\donate.ejs</code></p><p>在<code>\themes\lightum\layout\_partial\article.ejs</code>中引用上述文件</p></li></ul><h3 id="百度分享"><a href="#百度分享" class="headerlink" title="百度分享"></a>百度分享</h3><ul><li><p>去百度分享获取<a href="http://share.baidu.com/code" target="_blank" rel="external">分享代码</a></p></li><li><p>功能实现</p><p><code>\themes\lightum\layout\_partial\post\share.ejs</code></p></li><li><p>在article的样式中引用</p><p><code>\themes\lightum\layout\_partial\article.ejs</code></p></li><li><p>在主题config中添加一个开关</p><p><code>share: true</code></p></li></ul><h3 id="百度统计和谷歌统计"><a href="#百度统计和谷歌统计" class="headerlink" title="百度统计和谷歌统计"></a>百度统计和谷歌统计</h3><blockquote><p>还有百度收录和谷歌收录</p></blockquote><ul><li><p>获取百度和谷歌统计的代码，将其中的id或content写入主题配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="attr">google_analytics:</span> <span class="string">UA-107525911-1</span></div><div class="line"><span class="comment"># &lt;meta name="google-site-verification" content="hLu-CnRbqpthWxa76MJ-vpnGr7yMChNtTW6KA0pRMQo" /&gt;</span></div><div class="line"><span class="attr">google_site_verification:</span> <span class="string">hLu-CnRbqpthWxa76MJ-vpnGr7yMChNtTW6KA0pRMQo</span></div><div class="line"><span class="comment"># &lt;meta name="baidu-site-verification" content="SOcrumVYOq" /&gt;</span></div><div class="line"><span class="comment"># hm.src = "https://hm.baidu.com/hm.js?02f792017724a2c2af494ece7edc5fd1";</span></div><div class="line"><span class="attr">baidu_analytics:</span> <span class="number">02</span><span class="string">f792017724a2c2af494ece7edc5fd1</span></div><div class="line"><span class="attr">baidu_site_verification:</span> <span class="string">WTddywKheI</span></div></pre></td></tr></table></figure></li><li><p>安装sitemap和baidu-sitemap插件</p><p>站点配置文件中生成sitemap的选项</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 自动生成sitemap</span></div><div class="line"><span class="attr">sitemap:</span></div><div class="line"><span class="attr">  path:</span> <span class="string">sitemap.xml</span></div><div class="line"><span class="attr">baidusitemap:</span></div><div class="line"><span class="attr">  path:</span> <span class="string">baidusitemap.xml</span></div></pre></td></tr></table></figure><p>在谷歌或百度中设置自动爬取sitemap或手动提交</p><p>百度有个自动提交push脚本，放在每个页面的head中的。</p><p>​</p></li></ul><h3 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h3><ul><li><p>参考<a href="http://www.hahack.com/codes/local-search-engine-for-hexo/" target="_blank" rel="external">教程1</a></p></li><li><p>参考<a href="http://moxfive.xyz/2016/05/31/hexo-local-search/" target="_blank" rel="external">教程2</a></p></li><li><p>需要安装插件本地搜索的插件</p></li><li><p>在站点配置文件中设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">search:</div><div class="line">  path: search.xml</div><div class="line">  field: post</div><div class="line">  format: html</div><div class="line">  limit: 10000</div></pre></td></tr></table></figure></li></ul><h3 id="微博秀"><a href="#微博秀" class="headerlink" title="微博秀"></a>微博秀</h3><p>微博秀的<a href="http://app.weibo.com/tool/weiboshow" target="_blank" rel="external">API接口</a>，获取代码后贴到微博挂件的ejs文件里即可。</p><h3 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h3><blockquote><p>disqus国内被q，多说倒闭，其他的不知道还能挺多久。我用的是来必力，支持qq、微博、微信登录后评论</p></blockquote><ul><li><p>在主题配置文件中添加<code>livere_uid: MTAyMC8yOTQxxxxxxooooo</code></p><p>id去官网注册获取</p></li><li><p>相关代码在<code>article.ejs</code>中引用<code>comment.ejs</code>，更换其他评论系统也不难</p></li></ul><h3 id="豆瓣读书和电影"><a href="#豆瓣读书和电影" class="headerlink" title="豆瓣读书和电影"></a>豆瓣读书和电影</h3><ul><li><p>使用了hexo-douban插件</p><p><code>npm install hexo-douban</code></p><p>安装插件，然后站点配置文件，填入豆瓣ID</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># hexo-douban</span></div><div class="line"><span class="attr">douban:</span></div><div class="line"><span class="attr">  user:</span> <span class="string">shuaiyy</span></div><div class="line"><span class="attr">  book:</span></div><div class="line"><span class="attr">    title:</span> <span class="string">我的阅读</span></div><div class="line"><span class="attr">    quote:</span> <span class="number">2017</span><span class="string">年，我使用&lt;a</span> <span class="string">href="https://www.douban.com/people/shuaiyy/"</span> <span class="string">target="_blank"&gt;豆瓣&lt;/a&gt;记录我的阅读。</span></div><div class="line"><span class="attr">  movie:</span></div><div class="line"><span class="attr">   title:</span> <span class="string">我的电影</span></div><div class="line"><span class="attr">   quote:</span> <span class="number">2017</span><span class="string">年，我使用&lt;a</span> <span class="string">href="https://www.douban.com/people/shuaiyy/"</span> <span class="string">target="_blank"&gt;豆瓣&lt;/a&gt;记录我看的电影。</span></div></pre></td></tr></table></figure><p>​</p></li><li><p>详细参考<a href="https://github.com/mythsman/hexo-douban" target="_blank" rel="external">插件地址</a></p></li></ul><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171008/990I7Bk1lH.png?imageslim" alt="mark"></p><h2 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h2><h3 id="markdown神器-Typora"><a href="#markdown神器-Typora" class="headerlink" title="markdown神器 Typora"></a>markdown神器 Typora</h3><p>不多BB，本文就是这么写的。</p><h3 id="插入网易云音乐歌曲"><a href="#插入网易云音乐歌曲" class="headerlink" title="插入网易云音乐歌曲"></a>插入网易云音乐歌曲</h3><p>点击生成外链播放器，获取分享的html代码，直接黏贴，比如下面的</p><p>flash的代码</p><embed src="//music.163.com/style/swf/widget.swf?sid=28442976&type=2&auto=0&width=320&height=66" width="340" height="86" allownetworking="all"><p>iframe的代码</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=28442976&auto=0&height=66"></iframe><h2 id="部署和发布"><a href="#部署和发布" class="headerlink" title="部署和发布"></a>部署和发布</h2><blockquote><p>部署到github和coding上，域名解析国内解析到coding，国外解析到github</p><p>使用ssh git部署</p></blockquote><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><ul><li><p>创建代码仓库并配置ssh公钥</p></li><li><p>在站点config中添加</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">deploy:</span></div><div class="line"><span class="attr">  type:</span> <span class="string">git</span></div><div class="line"><span class="attr">  repo:</span> </div><div class="line"><span class="attr">    coding:</span> <span class="string">git@git.coding.net:shuaiyy/shuaiyy.git,master</span></div><div class="line"><span class="attr">    github:</span> <span class="string">git@github.com:shuaiyy/shuaiyy.github.io.git,master</span></div></pre></td></tr></table></figure><p>​</p></li><li><p>在git bash中使用ssh-add 添加ssh私钥</p><p>这样主机就能和github或coding ssh上传数据了</p></li><li><p>执行命令<code>hexo d</code></p></li></ul><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><p>绑定域名</p><blockquote><p>首先去github，告诉github <code>xxx.com</code>对应的是哪个blog。</p><p>然后去域名解析商那里，告诉任何访问xxx.com的人，<code>xxx.com</code>是github的服务器提供的。</p></blockquote><ul><li><p>github</p><p>github的CNAME文件指定你的域名xxx.com，然后域名解析商那里的CNAME记录国外线路指定’xxx.github.io’,即github page给你的二级域名</p><p>​</p></li><li><p>coding</p><p>coding是由<code>pages.coding.me</code>服务器为你做的地址跳转，因此国内DNS解析的CNAME记录指向<code>pages.coding.me</code>，而不是coding为你博客提供的二级域名。</p><p>github使用网站根目录的CNAME文件绑定域名，而coding需要在项目的page服务选项里设置绑定域名。</p></li><li><p>示例</p><p>github：<strong>source</strong>目录下的CNAME文件下，写入你的域名。CNAME文件名必须大写</p><p>coding：可以最多绑定5个，github由于是CNAME文件，只能绑定一个</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171008/JA0h4iGmh6.png?imageslim" alt="mark"></p><p>dns解析：我的是dnspod解析商</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171008/LA5k44iLDC.png?imageslim" alt="mark"></p></li></ul><h3 id="404页面"><a href="#404页面" class="headerlink" title="404页面"></a>404页面</h3><p>你的404.html的Front-matter中要设置<code>layout: false title: 404</code>。</p><p>然后把他丢到source根目录下即可。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">layout:</span> <span class="literal">false</span></div><div class="line"><span class="attr">title:</span> <span class="string">"404"</span></div><div class="line"><span class="meta">---</span></div><div class="line"><span class="string">&lt;html&gt;</span></div><div class="line"><span class="string">你访问的页面找不到了！</span></div><div class="line"><span class="string">&lt;/html&gt;</span></div></pre></td></tr></table></figure><h3 id="网站的icon图标"><a href="#网站的icon图标" class="headerlink" title="网站的icon图标"></a>网站的icon图标</h3><p>将favicon.ico文件丢入source目录即可</p><h2 id="待改进的地方"><a href="#待改进的地方" class="headerlink" title="待改进的地方"></a>待改进的地方</h2><h3 id="代码高亮的样式"><a href="#代码高亮的样式" class="headerlink" title="代码高亮的样式"></a>代码高亮的样式</h3><p>这个不会改，如果可以，我想换成night的代码高亮主题</p><h3 id="重写标签云"><a href="#重写标签云" class="headerlink" title="重写标签云"></a>重写标签云</h3><blockquote><p>现在的标签云挂件是一排的，占的地方多且不美观，有空改成一行好几个tag的那种。</p></blockquote><h3 id="点击回到顶部按钮"><a href="#点击回到顶部按钮" class="headerlink" title="点击回到顶部按钮"></a>点击回到顶部按钮</h3>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近打算将原来的博客从jekyll转到hexo，瞎折腾了好久。最初用的是next主题，好处是next文档丰富，插件齐全。&lt;/p&gt;
&lt;p&gt;后来又看上了light主题，但是light用的人不多，相关的插件、功能只好参考next以及其他hexo主题提供的解决方案，自己整合。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;我喜欢的博客主题风格&quot;&gt;&lt;a href=&quot;#我喜欢的博客主题风格&quot; class=&quot;headerlink&quot; title=&quot;我喜欢的博客主题风格&quot;&gt;&lt;/a&gt;我喜欢的博客主题风格&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/20223939&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;有哪些简洁明快的jekyll模板&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我最开始用的是jekyll，主题是&lt;a href=&quot;painterlin.com&quot;&gt;首页 | 林安亚的博客&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://yansu.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;闫肃的博客&lt;/a&gt;  现在依然觉得这个博客好看且实用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://theme-next.iissnan.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo-next&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;用了一段时间，功能丰富，配置简单。不过后来看到了light主题，个人审美更喜欢light&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;hexo-lightum&lt;/p&gt;
&lt;p&gt;基于light的改进主题，也是我现在在使用的&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;其他好看的博客&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.lyun.me/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;琉璃之鸟&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;wordpress的博客，当初玩饥荒查攻略时进入的网站，感觉挺不错的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://sunflyer.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Crazy Coder&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SimplyNetKeeper电信E信路由器破解连接软件，作者的博客。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://iconmoon.com/about/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;图月志&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个很酷炫，不过是Bo-Blog，mysql+PHP，模板不清楚。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Hexo博客折腾之路&quot;&gt;&lt;a href=&quot;#Hexo博客折腾之路&quot; class=&quot;headerlink&quot; title=&quot;Hexo博客折腾之路&quot;&gt;&lt;/a&gt;Hexo博客折腾之路&lt;/h2&gt;
    
    </summary>
    
      <category term="折腾" scheme="http://shuaiyy.cn/categories/%E6%8A%98%E8%85%BE/"/>
    
      <category term="博客" scheme="http://shuaiyy.cn/categories/%E6%8A%98%E8%85%BE/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Hexo" scheme="http://shuaiyy.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo lightum 博客折腾之旅</title>
    <link href="http://shuaiyy.cn/2017/10/07/%E6%8A%98%E8%85%BE/hexo-lightum/"/>
    <id>http://shuaiyy.cn/2017/10/07/折腾/hexo-lightum/</id>
    <published>2017-10-06T16:00:00.000Z</published>
    <updated>2017-11-07T09:05:16.362Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近打算将原来的博客从jekyll转到hexo，瞎折腾了好久。最初用的是next主题，好处是next文档丰富，插件齐全。</p><p>后来又看上了light主题，但是light用的人不多，相关的插件、功能只好参考next以及其他hexo主题提供的解决方案，自己整合。</p></blockquote><h2 id="我喜欢的博客主题风格"><a href="#我喜欢的博客主题风格" class="headerlink" title="我喜欢的博客主题风格"></a>我喜欢的博客主题风格</h2><ul><li><p><a href="https://www.zhihu.com/question/20223939" target="_blank" rel="external">有哪些简洁明快的jekyll模板</a></p><p>我最开始用的是jekyll，主题是<a href="painterlin.com">首页 | 林安亚的博客</a> </p><p><a href="http://yansu.org" target="_blank" rel="external">闫肃的博客</a>  现在依然觉得这个博客好看且实用</p></li><li><p><a href="http://theme-next.iissnan.com/" target="_blank" rel="external">hexo-next</a></p><p>用了一段时间，功能丰富，配置简单。不过后来看到了light主题，个人审美更喜欢light</p></li><li><p>hexo-lightum</p><p>基于light的改进主题，也是我现在在使用的</p></li></ul><p><strong>其他好看的博客</strong></p><ul><li><p><a href="http://www.lyun.me/" target="_blank" rel="external">琉璃之鸟</a></p><p>wordpress的博客，当初玩饥荒查攻略时进入的网站，感觉挺不错的。</p></li><li><p><a href="https://sunflyer.cn/" target="_blank" rel="external">Crazy Coder</a></p><p>SimplyNetKeeper电信E信路由器破解连接软件，作者的博客。</p></li><li><p><a href="http://iconmoon.com/about/" target="_blank" rel="external">图月志</a></p><p>这个很酷炫，不过是Bo-Blog，mysql+PHP，模板不清楚。</p></li></ul><h2 id="Hexo博客折腾之路"><a href="#Hexo博客折腾之路" class="headerlink" title="Hexo博客折腾之路"></a>Hexo博客折腾之路</h2><a id="more"></a><h3 id="确定主题模板"><a href="#确定主题模板" class="headerlink" title="确定主题模板"></a>确定主题模板</h3><ul><li>基于light改进的<a href="https://github.com/zippera/lightum" target="_blank" rel="external">lightum</a></li><li>提供我现在博客的模板及配置</li></ul><h3 id="更改category分级"><a href="#更改category分级" class="headerlink" title="更改category分级"></a>更改category分级</h3><ul><li><p><a href="http://lupeng.me/2015/06/23/%E6%B7%BB%E5%8A%A0%E5%A4%9A%E7%BA%A7%E5%88%86%E7%B1%BB.html" target="_blank" rel="external">参考</a></p></li><li><p>分级可以设置显示到几级</p><p>在theme的config中设置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># category显示的层级</span></div><div class="line"><span class="comment"># 0显示所有分级，-1显示所有但不分级，1 只显示第一层的分类， n显示n层分级。</span></div><div class="line"><span class="comment"># 不想分级时设值为1</span></div><div class="line"><span class="attr">category_depth:</span> <span class="number">3</span></div></pre></td></tr></table></figure><p>​</p></li><li><p>在每篇post文章的Front-matter 中<code>category:</code> 可以设置多个值</p></li></ul><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171008/gAh6eib0BE.png?imageslim" alt="mark"></p><h3 id="归档和文章目录"><a href="#归档和文章目录" class="headerlink" title="归档和文章目录"></a>归档和文章目录</h3><ul><li><p><a href="http://lupeng.me/2015/06/11/%E6%B7%BB%E5%8A%A0toc%E4%BB%A5%E5%8F%8Aarchive.html" target="_blank" rel="external"></a></p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171008/hiG0C53I97.png?imageslim" alt="mark"></p></li></ul><h3 id="日历云挂件"><a href="#日历云挂件" class="headerlink" title="日历云挂件"></a>日历云挂件</h3><ul><li><p><a href="http://howiefh.github.io/2016/04/29/hexo-s-calendar-plugin/?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">参考</a></p></li><li><p>配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">calendar:</span></div><div class="line"><span class="attr">  language:</span> <span class="string">zh-CN</span></div></pre></td></tr></table></figure><p>​</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171008/48hhCIEFCi.png?imageslim" alt="mark"></p><p>​</p></li></ul><h3 id="自定义layout"><a href="#自定义layout" class="headerlink" title="自定义layout"></a>自定义layout</h3><blockquote><p>一个md文件或html，txt，采用哪种layout渲染，是由Front-matter中的layout字段定义的。默认使用post，如果使用样式，则<code>layout:false</code></p><p>hexo默认提供了post和scraft两种样式，这里我自己定义了resume、game、book三种样式。</p><p>看了这2个例子，应该就会写自己的layout了，关键还是看网页设计的能力</p></blockquote><h4 id="resume简历"><a href="#resume简历" class="headerlink" title="resume简历"></a>resume简历</h4><ul><li>参考<a href="http://lupeng.me/2015/06/10/%E6%B7%BB%E5%8A%A0resume%E5%B8%83%E5%B1%80.html" target="_blank" rel="external">教程</a></li></ul><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171008/jA4fjClICD.png?imageslim" alt="mark"></p><h4 id="book和game"><a href="#book和game" class="headerlink" title="book和game"></a>book和game</h4><ul><li><p>ejs语法和百度静态文件cdn</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ejs语法</span></div><div class="line"><span class="comment">//for ，if-else-if</span></div><div class="line">&lt;% <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> page.books)&#123; %&gt;</div><div class="line">&lt;% <span class="keyword">if</span> (page.books[i].status == <span class="string">'已读'</span>) &#123;%&gt;</div><div class="line">&lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"label label-success"</span>&gt;&lt;%- page.books[i].status %&gt;&lt;/span&gt;</div><div class="line">&lt;% &#125; <span class="keyword">else</span> <span class="keyword">if</span> (page.books[i].status == <span class="string">'在读'</span>)&#123; %&gt;</div><div class="line">&lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"label label-info"</span>&gt;&lt;%- page.books[i].status %&gt;&lt;/span&gt;</div><div class="line">&lt;% &#125; <span class="keyword">else</span> <span class="keyword">if</span> (page.books[i].status == <span class="string">'未读'</span>) &#123; %&gt;</div><div class="line">&lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"label label-default"</span>&gt;&lt;%- page.books[i].status %&gt;&lt;/span&gt;</div><div class="line">&lt;% &#125; %&gt;</div><div class="line">&lt;% &#125; %&gt;</div><div class="line">  </div><div class="line"><span class="comment">//forEach</span></div><div class="line">&lt;% item.photos.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">photo</span>)</span>&#123; %&gt;</div><div class="line">  &lt;%- photo.url %&gt;</div><div class="line">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure></li><li><p>使用了bootstrap</p><p> <a href="http://cdn.code.baidu.com/" target="_blank" rel="external">百度静态文件cdn资源</a></p><p>在<code>lightum\layout\_partial\head.ejs</code>引入js和css文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;% <span class="keyword">if</span> (page.books || page.games)&#123; %&gt;&lt;script src="//apps.bdimg.com/libs/bootstrap/3.2.0/js/bootstrap.min.js"&gt;&lt;/script&gt;&lt;% &#125; %&gt;</div><div class="line">&lt;% if (page.books || page.games) &#123; %&gt;&lt;link rel="stylesheet" href="http://apps.bdimg.com/libs/bootstrap/3.2.0/css/bootstrap.min.css"  type="text/css"&gt;&lt;%&#125; %&gt;</div></pre></td></tr></table></figure><p>​</p></li><li><p>添加源码 <code>lightum\layout\game.ejs</code></p><p>内容指向实际存放模板的位置<code>&lt;%- partial(&#39;_partial/game&#39;) %&gt;</code></p></li><li><p><code>lightum\layout\_partial/game.ejs</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row"</span>&gt;</div><div class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-13 aside3-title"</span>&gt;</div><div class="line">    &lt;br&gt;</div><div class="line">    &lt;h2 id=<span class="string">"#identifier"</span>&gt;&lt;%- page.title %&gt;&lt;/h2&gt;</div><div class="line">  &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">  &lt;div class="col-md-13 aside3-content"&gt;</span></div><div class="line"><span class="regexp">    &lt;br /</span>&gt;</div><div class="line">    &lt;br /&gt;</div><div class="line"> &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row"</span>&gt;</div><div class="line">  &lt;% page.games.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">game</span>)</span>&#123; %&gt;</div><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-12"</span>&gt;</div><div class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"panel panel-primary"</span>&gt;</div><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"panel-heading"</span>&gt;&lt;%- game.title %&gt;&lt;/div&gt;</div><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"panel-body"</span>&gt;</div><div class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row"</span>&gt;</div><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-4 col-xs-12 center"</span>&gt;</div><div class="line">  &lt;img src=<span class="string">"&lt;%- game.cover %&gt;"</span> alt=<span class="string">"cover"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"img-thumbnail"</span>&gt;</div><div class="line">&lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">&lt;div class="col-md-8 col-xs-12"&gt;</span></div><div class="line"><span class="regexp">  &lt;table class="table table-bordered"&gt;</span></div><div class="line"><span class="regexp">&lt;tbody&gt;</span></div><div class="line"><span class="regexp">  &lt;tr&gt;&lt;td style="width:80px;"&gt;游戏平台&lt;/</span>td&gt;&lt;td&gt;&lt;%- game.platform %&gt;&lt;/td&gt;&lt;/tr&gt;</div><div class="line">  &lt;tr&gt;&lt;td&gt;出版商&lt;/td&gt;&lt;td&gt;&lt;%- game.publisher %&gt;&lt;/td&gt;&lt;/tr&gt;</div><div class="line">  &lt;tr&gt;&lt;td&gt;语言&lt;/td&gt;&lt;td&gt;&lt;%- game.language %&gt;&lt;/td&gt;&lt;/tr&gt;</div><div class="line">  &lt;tr&gt;</div><div class="line">&lt;td&gt;链接&lt;<span class="regexp">/td&gt;&lt;td&gt;</span></div><div class="line"><span class="regexp">&lt;a href="&lt;%- game.link %&gt;" title="&lt;%- game.link %&gt;"&gt;游戏链接&lt;/</span>a&gt;</div><div class="line">  &lt;<span class="regexp">/td&gt;&lt;/</span>tr&gt;</div><div class="line">  &lt;tr&gt;</div><div class="line">&lt;td&gt;状态&lt;<span class="regexp">/td&gt;</span></div><div class="line"><span class="regexp">&lt;td&gt;</span></div><div class="line"><span class="regexp">  &lt;% if (game.status == '已通关')&#123; %&gt;</span></div><div class="line"><span class="regexp">&lt;span class="label label-success"&gt;&lt;%- game.status %&gt;&lt;/</span>span&gt;</div><div class="line">  &lt;% &#125; <span class="keyword">else</span> <span class="keyword">if</span> (game.status == <span class="string">'进行中'</span>) &#123; %&gt;</div><div class="line">&lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"label label-info"</span>&gt;&lt;%- game.status %&gt;&lt;/span&gt;</div><div class="line">  &lt;% &#125; <span class="keyword">else</span> <span class="keyword">if</span> (game.status == <span class="string">'未开始'</span>) &#123;%&gt;</div><div class="line">&lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"label label-default"</span>&gt;&lt;%- game.status %&gt;&lt;/span&gt;</div><div class="line">  &lt;% &#125;%&gt;</div><div class="line">&lt;<span class="regexp">/td&gt;&lt;/</span>tr&gt;</div><div class="line">  &lt;tr&gt;&lt;td&gt;类型&lt;/td&gt;&lt;td&gt;&lt;%- game.type %&gt;&lt;/td&gt;&lt;/tr&gt;</div><div class="line">  &lt;tr&gt;&lt;td&gt;评价&lt;/td&gt;&lt;td&gt;&lt;%- game.description %&gt;&lt;/td&gt;&lt;/tr&gt;</div><div class="line">&lt;<span class="regexp">/tbody&gt;</span></div><div class="line"><span class="regexp">  &lt;/</span>table&gt;</div><div class="line">&lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">  &lt;/</span>div&gt;  </div><div class="line">&lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">  &lt;/</span>div&gt;      </div><div class="line">&lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp"> &lt;% &#125;) %&gt;</span></div><div class="line"><span class="regexp"> </span></div><div class="line"><span class="regexp">&lt;/</span>div&gt; </div><div class="line">&lt;<span class="regexp">/div&gt;      </span></div><div class="line"><span class="regexp">&lt;/</span>div&gt;</div></pre></td></tr></table></figure><p>​</p></li><li><p>front-matter</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">layout:</span> <span class="string">game</span></div><div class="line"><span class="attr">title:</span> <span class="number">2016</span><span class="string">年玩过的游戏</span></div><div class="line"><span class="attr">category:</span> </div><div class="line"><span class="bullet">  -</span> <span class="string">生活</span></div><div class="line"><span class="bullet">  -</span> <span class="string">游戏</span></div><div class="line"><span class="attr">keywords:</span> </div><div class="line"><span class="bullet">  -</span> <span class="string">游戏</span></div><div class="line"><span class="bullet">  -</span> <span class="string">娱乐</span></div><div class="line"><span class="bullet">  -</span> <span class="number">2016</span></div><div class="line"><span class="attr">tags:</span> </div><div class="line"><span class="bullet">  -</span> <span class="string">Enjoy</span></div><div class="line"><span class="attr">games:</span> </div><div class="line"><span class="attr">    - title:</span> <span class="string">饥荒联机版（Don't</span> <span class="string">starve</span> <span class="string">together）</span></div><div class="line"><span class="attr">      cover:</span> <span class="attr">http://ww4.sinaimg.cn/large/af9df239gw1f5dmat61rdj209q0d3jrq.jpg</span></div><div class="line"><span class="attr">      link:</span> <span class="attr">http://www.gamersky.com/z/dontstarve/</span></div><div class="line"><span class="attr">      publisher:</span> <span class="string">Klei</span> <span class="string">Entertainment</span></div><div class="line"><span class="attr">      platform:</span> <span class="string">steam</span></div><div class="line"><span class="attr">      type:</span> <span class="string">动作冒险，收集生存类沙盒游戏，2D画风,背景音乐超赞，在线多人联机</span></div><div class="line"><span class="attr">      description:</span> <span class="string">steam好评如潮</span></div><div class="line"><span class="attr">      status:</span> <span class="string">进行中</span></div><div class="line"><span class="attr">      language:</span> <span class="string">可用中文mod</span></div><div class="line"><span class="attr">    - title:</span> <span class="string">传送门2（Portal</span> <span class="number">2</span><span class="string">）</span></div><div class="line"><span class="attr">      cover:</span> <span class="attr">http://ww2.sinaimg.cn/large/af9df239gw1f5dmc8dce8j20dw0jjabi.jpg</span></div><div class="line"><span class="attr">      link:</span> <span class="attr">http://www.gamersky.com/z/portal2/</span></div><div class="line"><span class="attr">      publisher:</span> <span class="string">Valve</span> <span class="string">Software</span></div><div class="line"><span class="attr">      language:</span> <span class="string">支持中文</span></div><div class="line"><span class="attr">      platform:</span> <span class="string">steam</span></div><div class="line"><span class="attr">      type:</span> <span class="string">第一人称视角，解迷，冒险，科幻,在线双人合作</span></div><div class="line"><span class="attr">      description:</span> <span class="string">steam好评如潮</span></div><div class="line"><span class="attr">      status:</span> <span class="string">进行中</span></div><div class="line"><span class="meta">---</span></div></pre></td></tr></table></figure><p>​</p></li><li><p>效果</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171008/CbG4LCGHhG.png?imageslim" alt="mark"></p></li></ul><h3 id="添加导航栏icon图标"><a href="#添加导航栏icon图标" class="headerlink" title="添加导航栏icon图标"></a>添加导航栏icon图标</h3><p>hexo theme大多数都是用的font-awesome字体图标库，在主题下的config文件，导航栏配置相应的icon即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">menu:</div><div class="line">  home: /</div><div class="line">  archives: /archives</div><div class="line">  about: /resume</div><div class="line">  Books: /books     #This is your books page</div><div class="line">  Movies: /movies   #This is your movies page</div><div class="line">  #Leetcode: /leetcode</div><div class="line">  #tools: /tools</div><div class="line"></div><div class="line">menu_icon:</div><div class="line">  home: home</div><div class="line">  archives: archive</div><div class="line">  about: user</div><div class="line">  Books: book</div><div class="line">  Movies: play-circle</div><div class="line">  #Leetcode: file-text</div><div class="line">  #tools: user</div></pre></td></tr></table></figure><h3 id="添加打赏"><a href="#添加打赏" class="headerlink" title="添加打赏"></a>添加打赏</h3><ul><li><p>挂件中的打赏，直接替换支付宝图片的url即可</p></li><li><p>文章内的打赏，我用的是github上别人的<a href="https://github.com/shuaiyy/vdonate" target="_blank" rel="external">代码</a></p><p>在主题的配置文件中设置donate为true</p><p>功能实现代码在<code>\themes\lightum\layout\_partial\post\donate.ejs</code></p><p>在<code>\themes\lightum\layout\_partial\article.ejs</code>中引用上述文件</p></li></ul><h3 id="百度分享"><a href="#百度分享" class="headerlink" title="百度分享"></a>百度分享</h3><ul><li><p>去百度分享获取<a href="http://share.baidu.com/code" target="_blank" rel="external">分享代码</a></p></li><li><p>功能实现</p><p><code>\themes\lightum\layout\_partial\post\share.ejs</code></p></li><li><p>在article的样式中引用</p><p><code>\themes\lightum\layout\_partial\article.ejs</code></p></li><li><p>在主题config中添加一个开关</p><p><code>share: true</code></p></li></ul><h3 id="百度统计和谷歌统计"><a href="#百度统计和谷歌统计" class="headerlink" title="百度统计和谷歌统计"></a>百度统计和谷歌统计</h3><blockquote><p>还有百度收录和谷歌收录</p></blockquote><ul><li><p>获取百度和谷歌统计的代码，将其中的id或content写入主题配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="attr">google_analytics:</span> <span class="string">UA-107525911-1</span></div><div class="line"><span class="comment"># &lt;meta name="google-site-verification" content="hLu-CnRbqpthWxa76MJ-vpnGr7yMChNtTW6KA0pRMQo" /&gt;</span></div><div class="line"><span class="attr">google_site_verification:</span> <span class="string">hLu-CnRbqpthWxa76MJ-vpnGr7yMChNtTW6KA0pRMQo</span></div><div class="line"><span class="comment"># &lt;meta name="baidu-site-verification" content="SOcrumVYOq" /&gt;</span></div><div class="line"><span class="comment"># hm.src = "https://hm.baidu.com/hm.js?02f792017724a2c2af494ece7edc5fd1";</span></div><div class="line"><span class="attr">baidu_analytics:</span> <span class="number">02</span><span class="string">f792017724a2c2af494ece7edc5fd1</span></div><div class="line"><span class="attr">baidu_site_verification:</span> <span class="string">WTddywKheI</span></div></pre></td></tr></table></figure></li><li><p>安装sitemap和baidu-sitemap插件</p><p>站点配置文件中生成sitemap的选项</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 自动生成sitemap</span></div><div class="line"><span class="attr">sitemap:</span></div><div class="line"><span class="attr">  path:</span> <span class="string">sitemap.xml</span></div><div class="line"><span class="attr">baidusitemap:</span></div><div class="line"><span class="attr">  path:</span> <span class="string">baidusitemap.xml</span></div></pre></td></tr></table></figure><p>在谷歌或百度中设置自动爬取sitemap或手动提交</p><p>百度有个自动提交push脚本，放在每个页面的head中的。</p><p>​</p></li></ul><h3 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h3><ul><li><p>参考<a href="http://www.hahack.com/codes/local-search-engine-for-hexo/" target="_blank" rel="external">教程1</a></p></li><li><p>参考<a href="http://moxfive.xyz/2016/05/31/hexo-local-search/" target="_blank" rel="external">教程2</a></p></li><li><p>需要安装插件本地搜索的插件</p></li><li><p>在站点配置文件中设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">search:</div><div class="line">  path: search.xml</div><div class="line">  field: post</div><div class="line">  format: html</div><div class="line">  limit: 10000</div></pre></td></tr></table></figure></li></ul><h3 id="微博秀"><a href="#微博秀" class="headerlink" title="微博秀"></a>微博秀</h3><p>微博秀的<a href="http://app.weibo.com/tool/weiboshow" target="_blank" rel="external">API接口</a>，获取代码后贴到微博挂件的ejs文件里即可。</p><h3 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h3><blockquote><p>disqus国内被q，多说倒闭，其他的不知道还能挺多久。我用的是来必力，支持qq、微博、微信登录后评论</p></blockquote><ul><li><p>在主题配置文件中添加<code>livere_uid: MTAyMC8yOTQxxxxxxooooo</code></p><p>id去官网注册获取</p></li><li><p>相关代码在<code>article.ejs</code>中引用<code>comment.ejs</code>，更换其他评论系统也不难</p></li></ul><h3 id="豆瓣读书和电影"><a href="#豆瓣读书和电影" class="headerlink" title="豆瓣读书和电影"></a>豆瓣读书和电影</h3><ul><li><p>使用了hexo-douban插件</p><p><code>npm install hexo-douban</code></p><p>安装插件，然后站点配置文件，填入豆瓣ID</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># hexo-douban</span></div><div class="line"><span class="attr">douban:</span></div><div class="line"><span class="attr">  user:</span> <span class="string">shuaiyy</span></div><div class="line"><span class="attr">  book:</span></div><div class="line"><span class="attr">    title:</span> <span class="string">我的阅读</span></div><div class="line"><span class="attr">    quote:</span> <span class="number">2017</span><span class="string">年，我使用&lt;a</span> <span class="string">href="https://www.douban.com/people/shuaiyy/"</span> <span class="string">target="_blank"&gt;豆瓣&lt;/a&gt;记录我的阅读。</span></div><div class="line"><span class="attr">  movie:</span></div><div class="line"><span class="attr">   title:</span> <span class="string">我的电影</span></div><div class="line"><span class="attr">   quote:</span> <span class="number">2017</span><span class="string">年，我使用&lt;a</span> <span class="string">href="https://www.douban.com/people/shuaiyy/"</span> <span class="string">target="_blank"&gt;豆瓣&lt;/a&gt;记录我看的电影。</span></div></pre></td></tr></table></figure><p>​</p></li><li><p>详细参考<a href="https://github.com/mythsman/hexo-douban" target="_blank" rel="external">插件地址</a></p></li></ul><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171008/990I7Bk1lH.png?imageslim" alt="mark"></p><h2 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h2><h3 id="markdown神器-Typora"><a href="#markdown神器-Typora" class="headerlink" title="markdown神器 Typora"></a>markdown神器 Typora</h3><p>不多BB，本文就是这么写的。</p><h3 id="插入网易云音乐歌曲"><a href="#插入网易云音乐歌曲" class="headerlink" title="插入网易云音乐歌曲"></a>插入网易云音乐歌曲</h3><p>点击生成外链播放器，获取分享的html代码，直接黏贴，比如下面的</p><p>flash的代码</p><embed src="//music.163.com/style/swf/widget.swf?sid=28442976&type=2&auto=0&width=320&height=66" width="340" height="86" allownetworking="all"><p>iframe的代码</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=28442976&auto=0&height=66"></iframe><h2 id="部署和发布"><a href="#部署和发布" class="headerlink" title="部署和发布"></a>部署和发布</h2><blockquote><p>部署到github和coding上，域名解析国内解析到coding，国外解析到github</p><p>使用ssh git部署</p></blockquote><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><ul><li><p>创建代码仓库并配置ssh公钥</p></li><li><p>在站点config中添加</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">deploy:</span></div><div class="line"><span class="attr">  type:</span> <span class="string">git</span></div><div class="line"><span class="attr">  repo:</span> </div><div class="line"><span class="attr">    coding:</span> <span class="string">git@git.coding.net:shuaiyy/shuaiyy.git,master</span></div><div class="line"><span class="attr">    github:</span> <span class="string">git@github.com:shuaiyy/shuaiyy.github.io.git,master</span></div></pre></td></tr></table></figure><p>​</p></li><li><p>在git bash中使用ssh-add 添加ssh私钥</p><p>这样主机就能和github或coding ssh上传数据了</p></li><li><p>执行命令<code>hexo d</code></p></li></ul><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><p>绑定域名</p><blockquote><p>首先去github，告诉github <code>xxx.com</code>对应的是哪个blog。</p><p>然后去域名解析商那里，告诉任何访问xxx.com的人，<code>xxx.com</code>是github的服务器提供的。</p></blockquote><ul><li><p>github</p><p>github的CNAME文件指定你的域名xxx.com，然后域名解析商那里的CNAME记录国外线路指定’xxx.github.io’,即github page给你的二级域名</p><p>​</p></li><li><p>coding</p><p>coding是由<code>pages.coding.me</code>服务器为你做的地址跳转，因此国内DNS解析的CNAME记录指向<code>pages.coding.me</code>，而不是coding为你博客提供的二级域名。</p><p>github使用网站根目录的CNAME文件绑定域名，而coding需要在项目的page服务选项里设置绑定域名。</p></li><li><p>示例</p><p>github：<strong>source</strong>目录下的CNAME文件下，写入你的域名。CNAME文件名必须大写</p><p>coding：可以最多绑定5个，github由于是CNAME文件，只能绑定一个</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171008/JA0h4iGmh6.png?imageslim" alt="mark"></p><p>dns解析：我的是dnspod解析商</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171008/LA5k44iLDC.png?imageslim" alt="mark"></p></li></ul><h3 id="404页面"><a href="#404页面" class="headerlink" title="404页面"></a>404页面</h3><p>你的404.html的Front-matter中要设置<code>layout: false title: 404</code>。</p><p>然后把他丢到source根目录下即可。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">layout:</span> <span class="literal">false</span></div><div class="line"><span class="attr">title:</span> <span class="string">"404"</span></div><div class="line"><span class="meta">---</span></div><div class="line"><span class="string">&lt;html&gt;</span></div><div class="line"><span class="string">你访问的页面找不到了！</span></div><div class="line"><span class="string">&lt;/html&gt;</span></div></pre></td></tr></table></figure><h3 id="网站的icon图标"><a href="#网站的icon图标" class="headerlink" title="网站的icon图标"></a>网站的icon图标</h3><p>将favicon.ico文件丢入source目录即可</p><h2 id="待改进的地方"><a href="#待改进的地方" class="headerlink" title="待改进的地方"></a>待改进的地方</h2><h3 id="代码高亮的样式"><a href="#代码高亮的样式" class="headerlink" title="代码高亮的样式"></a>代码高亮的样式</h3><p>这个不会改，如果可以，我想换成night的代码高亮主题</p><h3 id="重写标签云"><a href="#重写标签云" class="headerlink" title="重写标签云"></a>重写标签云</h3><blockquote><p>现在的标签云挂件是一排的，占的地方多且不美观，有空改成一行好几个tag的那种。</p></blockquote><h3 id="点击回到顶部按钮"><a href="#点击回到顶部按钮" class="headerlink" title="点击回到顶部按钮"></a>点击回到顶部按钮</h3>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近打算将原来的博客从jekyll转到hexo，瞎折腾了好久。最初用的是next主题，好处是next文档丰富，插件齐全。&lt;/p&gt;
&lt;p&gt;后来又看上了light主题，但是light用的人不多，相关的插件、功能只好参考next以及其他hexo主题提供的解决方案，自己整合。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;我喜欢的博客主题风格&quot;&gt;&lt;a href=&quot;#我喜欢的博客主题风格&quot; class=&quot;headerlink&quot; title=&quot;我喜欢的博客主题风格&quot;&gt;&lt;/a&gt;我喜欢的博客主题风格&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/20223939&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;有哪些简洁明快的jekyll模板&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我最开始用的是jekyll，主题是&lt;a href=&quot;painterlin.com&quot;&gt;首页 | 林安亚的博客&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://yansu.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;闫肃的博客&lt;/a&gt;  现在依然觉得这个博客好看且实用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://theme-next.iissnan.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo-next&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;用了一段时间，功能丰富，配置简单。不过后来看到了light主题，个人审美更喜欢light&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;hexo-lightum&lt;/p&gt;
&lt;p&gt;基于light的改进主题，也是我现在在使用的&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;其他好看的博客&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.lyun.me/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;琉璃之鸟&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;wordpress的博客，当初玩饥荒查攻略时进入的网站，感觉挺不错的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://sunflyer.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Crazy Coder&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SimplyNetKeeper电信E信路由器破解连接软件，作者的博客。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://iconmoon.com/about/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;图月志&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个很酷炫，不过是Bo-Blog，mysql+PHP，模板不清楚。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Hexo博客折腾之路&quot;&gt;&lt;a href=&quot;#Hexo博客折腾之路&quot; class=&quot;headerlink&quot; title=&quot;Hexo博客折腾之路&quot;&gt;&lt;/a&gt;Hexo博客折腾之路&lt;/h2&gt;
    
    </summary>
    
      <category term="折腾" scheme="http://shuaiyy.cn/categories/%E6%8A%98%E8%85%BE/"/>
    
      <category term="博客" scheme="http://shuaiyy.cn/categories/%E6%8A%98%E8%85%BE/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Hexo" scheme="http://shuaiyy.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Flask-Login 登录插件</title>
    <link href="http://shuaiyy.cn/2017/09/23/%E6%8A%80%E6%9C%AF/Flask-Login/"/>
    <id>http://shuaiyy.cn/2017/09/23/技术/Flask-Login/</id>
    <published>2017-09-22T16:00:00.000Z</published>
    <updated>2017-10-07T13:56:55.438Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flask-Login"><a href="#Flask-Login" class="headerlink" title="Flask-Login"></a>Flask-Login</h1><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170927/1eKC05Ba52.png?imageslim" alt="mark"></p><h2 id="在Flask-app中注册插件"><a href="#在Flask-app中注册插件" class="headerlink" title="在Flask app中注册插件"></a>在Flask app中注册插件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># auth/__init__.py</span></div><div class="line"><span class="keyword">from</span> flask_login <span class="keyword">import</span> LoginManager</div><div class="line"></div><div class="line">login_manager = LoginManager()</div><div class="line">login_manager.session_protection = <span class="string">'strong'</span></div><div class="line">login_manager.login_view = <span class="string">'auth.login'</span></div><div class="line">login_manager.init_app(app)</div></pre></td></tr></table></figure><a id="more"></a><h2 id="扩展User-Model"><a href="#扩展User-Model" class="headerlink" title="扩展User Model"></a>扩展User Model</h2><ul><li>需要继承flask-login中的UserMixin，python支持多重继承</li><li>AnonymousUserMixin类是匿名用户</li><li>@login_manager.user_loader装饰的方法用于实现用户查找</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> . <span class="keyword">import</span> db, login_manager</div><div class="line"><span class="keyword">from</span> flask_login <span class="keyword">import</span> UserMixin, AnonymousUserMixin</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(UserMixin, db.Model)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'users'</span></div><div class="line">    id = db.Column(db.Integer, primary_key=<span class="keyword">True</span>)</div><div class="line">    name = db.Column(db.String)</div><div class="line">    email = db.Column(db.String)</div><div class="line">    password = db.Column(db.String)</div><div class="line">    role_id = db.Column(db.Integer, db.ForeignKey(<span class="string">'roles.id'</span>))</div><div class="line">    posts = db.relationship(<span class="string">'Post'</span>, backref=<span class="string">'author'</span>)</div><div class="line">    comments = db.relationship(<span class="string">'Comment'</span>, backref=<span class="string">'author'</span>)</div><div class="line">    locale = db.Column(db.String, default=<span class="string">'zh'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnonymousUser</span><span class="params">(AnonymousUserMixin)</span>:</span></div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">locale</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'zh'</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_administrator</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">      </div><div class="line">      </div><div class="line">login_manager.anonymous_user = AnonymousUser</div><div class="line"></div><div class="line"><span class="meta">@login_manager.user_loader</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_user</span><span class="params">(user_id)</span>:</span></div><div class="line">    <span class="keyword">return</span> User.query.get(int(user_id))</div></pre></td></tr></table></figure><h2 id="Form表单"><a href="#Form表单" class="headerlink" title="Form表单"></a>Form表单</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> flask.ext.wtf <span class="keyword">import</span> Form</div><div class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> StringField, PasswordField, SubmitField</div><div class="line"><span class="keyword">from</span> wtforms.validators <span class="keyword">import</span> DataRequired, EqualTo, Email, Regexp, Length</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegistrationForm</span><span class="params">(Form)</span>:</span></div><div class="line">    email = StringField(<span class="string">u'邮箱地址'</span>, validators=[DataRequired(),</div><div class="line">                                             Length(<span class="number">1</span>, <span class="number">64</span>),</div><div class="line">                                             Email()])</div><div class="line"></div><div class="line">    username = StringField(<span class="string">u'用户名'</span>, validators=[DataRequired(),</div><div class="line">                                                   Length(<span class="number">1</span>, <span class="number">64</span>),</div><div class="line">                                                   Regexp(<span class="string">'^[A-Za-z][A-Za-z0-9_.]*$'</span>, <span class="number">0</span>,</div><div class="line">                                                          <span class="string">u'用户名必须由字母数、字数、下划线或 . 组成'</span>)])</div><div class="line"></div><div class="line">    password = PasswordField(<span class="string">u'密码'</span>, validators=[DataRequired(),</div><div class="line">                                                     EqualTo(<span class="string">'password2'</span>, message=<span class="string">u'密码必须一至'</span>)])</div><div class="line"></div><div class="line">    password2 = PasswordField(<span class="string">u'确认密码'</span>, validators=[DataRequired()])</div><div class="line"></div><div class="line">    submit = SubmitField(<span class="string">u'马上注册'</span>)</div></pre></td></tr></table></figure><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><ul><li>需要登录才能访问的视图使用装饰器<code>login_required</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template, request, flash, redirect, url_for</div><div class="line"><span class="keyword">from</span> . <span class="keyword">import</span> auth</div><div class="line"><span class="keyword">from</span> .forms <span class="keyword">import</span> LoginForm, RegistrationForm</div><div class="line"><span class="keyword">from</span> ..models <span class="keyword">import</span> User</div><div class="line"><span class="keyword">from</span> .. <span class="keyword">import</span> db</div><div class="line"><span class="keyword">from</span> flask_login <span class="keyword">import</span> login_user, logout_user, current_user, login_required</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@auth.route('/login', methods=['GET', 'POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></div><div class="line">    form = LoginForm()</div><div class="line">    <span class="keyword">if</span> form.validate_on_submit():</div><div class="line">        user = User.query.filter_by(name=form.username.data, password=form.password.data).first()</div><div class="line">        <span class="keyword">if</span> user :</div><div class="line">            login_user(user)</div><div class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">'main.index'</span>))</div><div class="line"></div><div class="line">    <span class="keyword">return</span> render_template(<span class="string">'login.html'</span>,</div><div class="line">                           title=<span class="string">u'登录'</span>,</div><div class="line">                           form=form)</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@auth.route('/logout')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span><span class="params">()</span>:</span></div><div class="line">    logout_user()</div><div class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">'auth.login'</span>))</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@auth.route('/register', methods=['GET', 'POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">()</span>:</span></div><div class="line">    form = RegistrationForm()</div><div class="line"></div><div class="line">    <span class="keyword">if</span> form.validate_on_submit():</div><div class="line">        user = User(email=form.email.data,</div><div class="line">                    name=form.username.data,</div><div class="line">                    password=form.password.data)</div><div class="line"></div><div class="line">        db.session.add(user)</div><div class="line">        db.session.commit()</div><div class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">'auth.login'</span>))</div><div class="line"></div><div class="line">    <span class="keyword">return</span> render_template(<span class="string">'register.html'</span>,</div><div class="line">                           title=<span class="string">u'注册'</span>,</div><div class="line">                           form=form)</div></pre></td></tr></table></figure><h2 id="前端模板"><a href="#前端模板" class="headerlink" title="前端模板"></a>前端模板</h2><ul><li><p>判断用户是否登录</p><p><code>current_user.is_authenticated</code></p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;% raw %&#125;</div><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav navbar-right"</span>&gt;</span></div><div class="line">                &#123;% if current_user.is_authenticated() %&#125;</div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>&#123;&#123; current_user.name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for('auth.logout') &#125;&#125;"</span>&gt;</span>&#123;&#123; _("退出") &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                &#123;% else %&#125;</div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for('auth.login') &#125;&#125;"</span>&gt;</span>&#123;&#123; _("登录") &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for('auth.register') &#125;&#125;"</span>&gt;</span>&#123;&#123; _("注册") &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                &#123;% endif %&#125;</div><div class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">&#123;% endraw %&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Flask-Login&quot;&gt;&lt;a href=&quot;#Flask-Login&quot; class=&quot;headerlink&quot; title=&quot;Flask-Login&quot;&gt;&lt;/a&gt;Flask-Login&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://o8i01ajlj.bkt.clouddn.com/blog/170927/1eKC05Ba52.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;在Flask-app中注册插件&quot;&gt;&lt;a href=&quot;#在Flask-app中注册插件&quot; class=&quot;headerlink&quot; title=&quot;在Flask app中注册插件&quot;&gt;&lt;/a&gt;在Flask app中注册插件&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# auth/__init__.py&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; flask_login &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; LoginManager&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;login_manager = LoginManager()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;login_manager.session_protection = &lt;span class=&quot;string&quot;&gt;&#39;strong&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;login_manager.login_view = &lt;span class=&quot;string&quot;&gt;&#39;auth.login&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;login_manager.init_app(app)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="flask" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/flask/"/>
    
    
      <category term="Flask" scheme="http://shuaiyy.cn/tags/Flask/"/>
    
      <category term="Web" scheme="http://shuaiyy.cn/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Flask 表单</title>
    <link href="http://shuaiyy.cn/2017/09/22/%E6%8A%80%E6%9C%AF/Flask%E8%A1%A8%E5%8D%95/"/>
    <id>http://shuaiyy.cn/2017/09/22/技术/Flask表单/</id>
    <published>2017-09-21T16:00:00.000Z</published>
    <updated>2017-10-07T13:56:22.808Z</updated>
    
    <content type="html"><![CDATA[<h2 id="表单元素"><a href="#表单元素" class="headerlink" title="表单元素"></a>表单元素</h2><ul><li><p>什么是表单</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170920/7e6E8FeLgj.png?imageslim" alt="mark"></p><a id="more"></a></li><li><p>表单标签</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170920/23e1emA9aj.png?imageslim" alt="mark"></p></li><li><p>表单域</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170920/GFg2ekF4Dg.png?imageslim" alt="mark"></p></li><li><p>表单域的种类</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170920/08I3d2752g.png?imageslim" alt="mark"></p></li><li><p>表单按钮</p><ul><li>提交按钮</li><li>复位按钮</li><li>一般按钮</li></ul></li></ul><h2 id="表单提交方式"><a href="#表单提交方式" class="headerlink" title="表单提交方式"></a>表单提交方式</h2><p>有2种方式，get和post，在form的method属性中声明</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170920/GBd8bCDAJG.png?imageslim" alt="mark"></p><h3 id="GET和POST区别"><a href="#GET和POST区别" class="headerlink" title="GET和POST区别"></a>GET和POST区别</h3><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170920/AFF0JfKD2h.png?imageslim" alt="mark"></p><h3 id="GET适用场合"><a href="#GET适用场合" class="headerlink" title="GET适用场合"></a>GET适用场合</h3><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170920/JfB18EA4D7.png?imageslim" alt="mark"></p><h3 id="POST适用场合"><a href="#POST适用场合" class="headerlink" title="POST适用场合"></a>POST适用场合</h3><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170920/KL0efG18eD.png?imageslim" alt="mark"></p><h2 id="一个示例"><a href="#一个示例" class="headerlink" title="一个示例"></a>一个示例</h2><blockquote><p> 一个包含多种元素的表单，可以提交数据到后台，JavaScript可以获取元素的值。</p></blockquote><ul><li><p>html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"checkValue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"form1"</span>&gt;</span></div><div class="line">     <span class="comment">&lt;!-- 单行文本框，密码框不显示明文 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"Text"</span> <span class="attr">name</span>=<span class="string">"text1"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> /&gt;</span></div><div class="line"><span class="comment">&lt;!-- 多行文本框，默认可以调节大小 --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">placeholder</span>=<span class="string">"Textarea"</span> <span class="attr">name</span>=<span class="string">"textarea"</span> <span class="attr">style</span>=<span class="string">"resize:none"</span>&gt;</span> <span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 文件上传 --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> /&gt;</span></div><div class="line"><span class="comment">&lt;!-- 单选框 --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"Option"</span> <span class="attr">value</span>=<span class="string">"Option1"</span> /&gt;</span>选项 1</div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"Option"</span> <span class="attr">value</span>=<span class="string">"Option2"</span> /&gt;</span>选项 2</div><div class="line"><span class="comment">&lt;!-- 复选框 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"check"</span> <span class="attr">value</span>=<span class="string">"Option1"</span> /&gt;</span>选项 1</div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"check"</span> <span class="attr">value</span>=<span class="string">"Option2"</span> /&gt;</span>选项 2</div><div class="line"><span class="comment">&lt;!-- 提交、重置、普通按钮， 普通按钮需要绑定onclick方法 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">value</span>=<span class="string">"Reset"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"getValue()"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>JavaScript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getValue</span>(<span class="params"></span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="comment">/* 通过tag的name定位元素，value属性取值*/</span></div><div class="line">     <span class="comment">/* 当选择单选框时，只有页面中被选中的框才会被选中 */</span></div><div class="line">     <span class="keyword">var</span> value = <span class="built_in">document</span>.form1.Option.value;</div><div class="line">     <span class="comment">/* 复选框通过name取到的是obkect数组，是被选中的项 */</span></div><div class="line">  <span class="keyword">var</span> arr=<span class="built_in">document</span>.form1.check;</div><div class="line">   </div><div class="line">alert(arr[<span class="number">0</span>].value);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h1 id="wtforms-表单扩展"><a href="#wtforms-表单扩展" class="headerlink" title="wtforms 表单扩展"></a>wtforms 表单扩展</h1><blockquote><p>当你必须处理浏览器提交的表单数据时，视图代码很快会变得难以阅读。有一些库可以 简化这个工作，其中之一便是 <a href="http://wtforms.simplecodes.com/" target="_blank" rel="external">WTForms</a> ，下面我们将介绍这个库。如果你必须处理 许多表单，那么应当尝试使用这个库。</p></blockquote><p>wtforms可以实现表单验证的组件，使用pip安装。<a href="https://flask-wtf.readthedocs.io/en/stable/#" target="_blank" rel="external">Flask-WTF</a>是二者的简单整合。</p><ul><li><p>定义一个form对象</p><p>下面是一个常见的注册用的表单对象，包含用户名，密码，确认密码，接受协议等field。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> Form, BooleanField, TextField, PasswordField, validators</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegistrationForm</span><span class="params">(Form)</span>:</span></div><div class="line">    username = TextField(<span class="string">'Username'</span>, [validators.Length(min=<span class="number">4</span>, max=<span class="number">25</span>)])</div><div class="line">    email = TextField(<span class="string">'Email Address'</span>, [validators.Length(min=<span class="number">6</span>, max=<span class="number">35</span>)])</div><div class="line">    password = PasswordField(<span class="string">'New Password'</span>, [</div><div class="line">        validators.Required(),</div><div class="line">        validators.EqualTo(<span class="string">'confirm'</span>, message=<span class="string">'Passwords must match'</span>)</div><div class="line">    ])</div><div class="line">    confirm = PasswordField(<span class="string">'Repeat Password'</span>)</div><div class="line">    accept_tos = BooleanField(<span class="string">'I accept the TOS'</span>, [validators.Required()])</div></pre></td></tr></table></figure><p>​</p></li><li><p>在视图中实例化form</p><ul><li>调用 <code>validate()</code> 函数来验证数据</li><li>通过 form.<name>.data 可以访问表单中单个值</name></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@app.route('/register', methods=['GET', 'POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># 实例化form对象，如果是通过 GET 方法提交的，则相应的是 request.args</span></div><div class="line">    form = RegistrationForm(request.form)</div><div class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span> <span class="keyword">and</span> form.validate():</div><div class="line">        <span class="comment"># 注册用户</span></div><div class="line">        flash(<span class="string">'Thanks for registering'</span>)</div><div class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">'login'</span>))</div><div class="line">    <span class="keyword">return</span> render_template(<span class="string">'register.html'</span>, form=form)</div></pre></td></tr></table></figure><p>​</p></li><li><p>模板中的form</p><ul><li>wtform已经帮我们做了很多表单生成的工作</li><li>视图函数向模板传递form对象</li><li>使用form.<name>生成对应的表单域</name></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&#123;% raw %&#125;</div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>User Management<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">&#123;% if message %&#125; &#123;&#123;message&#125;&#125; &#123;% endif %&#125;</div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">Username :&#123;&#123;form.username&#125;&#125;</div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">Password :&#123;&#123;form.password&#125;&#125;</div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">value</span>=<span class="string">"reset"</span> /&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div><div class="line">&#123;% endraw %&#125;</div></pre></td></tr></table></figure><p>​</p></li></ul><h1 id="使用Flask-Wtf"><a href="#使用Flask-Wtf" class="headerlink" title="使用Flask-Wtf"></a>使用Flask-Wtf</h1><p>表单安全提交，需要配置csrf  secret key</p><p>使用flash进行错误提示</p><h2 id="定义form对象"><a href="#定义form对象" class="headerlink" title="定义form对象"></a>定义form对象</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> flask_wtf <span class="keyword">import</span> Form</div><div class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> StringField, PasswordField, DateTimeField, SubmitField</div><div class="line"><span class="keyword">from</span> wtforms.validators <span class="keyword">import</span> DataRequired, Length, Email, EqualTo, Regexp</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginForm</span><span class="params">(Form)</span>:</span></div><div class="line">    name = StringField(label=<span class="string">u'用户名'</span>, validators=[DataRequired(), Length(min=<span class="number">4</span>, max=<span class="number">20</span>)])</div><div class="line">    password = PasswordField(label=<span class="string">u'密码'</span>, validators=[DataRequired(), Length(min=<span class="number">4</span>, max=<span class="number">20</span>)])</div><div class="line">    submit = SubmitField(label=<span class="string">u'提交'</span>)</div><div class="line">    </div><div class="line">    </div><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">RegistrationForm</span><span class="params">(Form)</span>:</span></div><div class="line">    email = StringField(<span class="string">u'邮箱地址'</span>, validators=[DataRequired(),</div><div class="line">                                             Length(<span class="number">1</span>, <span class="number">64</span>),</div><div class="line">                                             Email()])</div><div class="line"></div><div class="line">    username = StringField(<span class="string">u'用户名'</span>, validators=[DataRequired(),</div><div class="line">                                                   Length(<span class="number">1</span>, <span class="number">64</span>),</div><div class="line">                                                   Regexp(<span class="string">'^[A-Za-z][A-Za-z0-9_.]*$'</span>, <span class="number">0</span>,</div><div class="line">                                                          <span class="string">u'用户名必须由字母数、字数、下划线或 . 组成'</span>)])</div><div class="line"></div><div class="line">    password = PasswordField(<span class="string">u'密码'</span>, validators=[DataRequired(),</div><div class="line">                                                     EqualTo(<span class="string">'password2'</span>, message=<span class="string">u'密码必须一至'</span>)])</div><div class="line"></div><div class="line">    password2 = PasswordField(<span class="string">u'确认密码'</span>, validators=[DataRequired()])</div><div class="line"></div><div class="line">    submit = SubmitField(<span class="string">u'马上注册'</span>)</div></pre></td></tr></table></figure><h2 id="在模板中引用"><a href="#在模板中引用" class="headerlink" title="在模板中引用"></a>在模板中引用</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;% raw %&#125;</div><div class="line"><span class="tag">&lt;<span class="name">form</span>  <span class="attr">action</span>=<span class="string">"/add"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">        &#123;&#123; form.hidden_tag() &#125;&#125;</div><div class="line">        &#123;&#123; form.name.label &#125;&#125;</div><div class="line">        &#123;&#123; form.name(class='text') &#125;&#125;</div><div class="line">        &#123;&#123; form.password.label &#125;&#125;</div><div class="line">        &#123;&#123; form.password() &#125;&#125;</div><div class="line">        &#123;&#123; form.submit() &#125;&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">&#123;% endraw %&#125;</div></pre></td></tr></table></figure><ul><li>Field type</li></ul><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170926/3K0dj7Jm00.png?imageslim" alt="mark"></p><ul><li>Validator</li></ul><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170926/g3g21Fb92I.png?imageslim" alt="mark"></p><h2 id="使用Bootstrap-wtf宏渲染表单"><a href="#使用Bootstrap-wtf宏渲染表单" class="headerlink" title="使用Bootstrap wtf宏渲染表单"></a>使用Bootstrap wtf宏渲染表单</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;% raw %&#125;</div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/login"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">    &#123;&#123; wtf.quick_form(form) &#125;&#125;</div><div class="line"> <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">&#123;% endraw %&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;表单元素&quot;&gt;&lt;a href=&quot;#表单元素&quot; class=&quot;headerlink&quot; title=&quot;表单元素&quot;&gt;&lt;/a&gt;表单元素&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;什么是表单&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o8i01ajlj.bkt.clouddn.com/blog/170920/7e6E8FeLgj.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="flask" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/flask/"/>
    
    
      <category term="Flask" scheme="http://shuaiyy.cn/tags/Flask/"/>
    
      <category term="Web" scheme="http://shuaiyy.cn/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Flask 开发环境搭建</title>
    <link href="http://shuaiyy.cn/2017/09/20/%E6%8A%80%E6%9C%AF/flask%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://shuaiyy.cn/2017/09/20/技术/flask开发环境搭建/</id>
    <published>2017-09-19T16:00:00.000Z</published>
    <updated>2017-10-07T13:54:56.042Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Flask-开发环境搭建"><a href="#Flask-开发环境搭建" class="headerlink" title="Flask 开发环境搭建"></a>Flask 开发环境搭建</h2><h3 id="安装python-pip-和虚拟环境"><a href="#安装python-pip-和虚拟环境" class="headerlink" title="安装python pip 和虚拟环境"></a>安装python pip 和虚拟环境</h3><p>virtualenv</p><p>虚拟机 </p><ul><li>docker</li></ul><h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><h4 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h4><p>  插件 <a href="https://github.com/VundleVim/Vundle.vim" target="_blank" rel="external">vundle</a>  vim包管理工具</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Flask-开发环境搭建&quot;&gt;&lt;a href=&quot;#Flask-开发环境搭建&quot; class=&quot;headerlink&quot; title=&quot;Flask 开发环境搭建&quot;&gt;&lt;/a&gt;Flask 开发环境搭建&lt;/h2&gt;&lt;h3 id=&quot;安装python-pip-和虚拟环境&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="技术" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="flask" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/flask/"/>
    
    
      <category term="Flask" scheme="http://shuaiyy.cn/tags/Flask/"/>
    
      <category term="Web" scheme="http://shuaiyy.cn/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Flask模块化 蓝图</title>
    <link href="http://shuaiyy.cn/2017/09/19/%E6%8A%80%E6%9C%AF/Flask%E8%93%9D%E5%9B%BE/"/>
    <id>http://shuaiyy.cn/2017/09/19/技术/Flask蓝图/</id>
    <published>2017-09-18T16:00:00.000Z</published>
    <updated>2017-10-07T13:54:28.954Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flask模块化-–-蓝图"><a href="#Flask模块化-–-蓝图" class="headerlink" title="Flask模块化 – 蓝图"></a>Flask模块化 – 蓝图</h1><h2 id="概念简介"><a href="#概念简介" class="headerlink" title="概念简介"></a>概念简介</h2><blockquote><p>在Django项目中，一个网站可以按模块划分，分别实现几个子APP，然后在settings里注册APP，并在urls里为不同的APP分配不同的url路由。</p><p>Flask也有相似的设计模式，被称为蓝图</p></blockquote><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170922/bB3Gl20Dh0.png?imageslim" alt="mark"></p><a id="more"></a><ul><li><p>新建一个py文件，存放一个模块的全部视图函数</p><p>​</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># user.py</span></div><div class="line"><span class="keyword">from</span> models <span class="keyword">import</span> User</div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint</div><div class="line"></div><div class="line">user = Blueprint(<span class="string">'user'</span>, __name__)</div><div class="line"></div><div class="line"><span class="meta">@user.route('/&lt;r_id&gt;')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_user_by_id</span><span class="params">(r_id)</span>:</span></div><div class="line">    u = User.objects(user_id=r_id).first()</div><div class="line">    <span class="keyword">print</span> u</div><div class="line">    <span class="keyword">return</span> <span class="string">"&#123;&#125;---&#123;&#125;"</span>.format(u.user_name, u.user_id) <span class="keyword">if</span> u <span class="keyword">else</span> <span class="string">"Not Exist!"</span></div></pre></td></tr></table></figure><p>model文件<code>app = Flask(__name__)</code>，可以避免循环引用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> flask_mongoengine <span class="keyword">import</span> MongoEngine</div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</div><div class="line">app = Flask(__name__)</div><div class="line">app.config[<span class="string">'MONGODB_SETTINGS'</span>] = &#123;<span class="string">'db'</span>: <span class="string">'test'</span>&#125;</div><div class="line">db = MongoEngine(app)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(db.Document)</span>:</span></div><div class="line">    user_id = db.StringField()</div><div class="line">    user_name = db.StringField()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">"id: &#123;&#125;---name:&#123;&#125;"</span>.format(self.user_id, self.user_name)</div></pre></td></tr></table></figure><p>​</p></li><li><p>在主文件中注册蓝图，并指定路由</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">from user import user</div><div class="line">app.register_blueprint(user, url_prefix=&apos;/user&apos;)</div></pre></td></tr></table></figure></li><li><p>然后访问url <code>localhost:port/user/1</code></p></li></ul><h2 id="项目模块划分"><a href="#项目模块划分" class="headerlink" title="项目模块划分"></a>项目模块划分</h2><blockquote><p>蓝图的概念类似django中的app，可以将一个项目按功能拆分组织</p><p>蓝图是Flask() app对象的一个子集</p></blockquote><ul><li><p>将相同逻辑的功能放在同一个模块里，并且可以为其分配路由</p><p>比如登录注册找回密码等功能放到auth模块，url为/auth/xxxx</p></li><li><p>假设一个Flask APP项目有登录模块和主模块。</p></li></ul><p><strong>项目结构</strong></p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170927/BF5k4h4aj4.png?imageslim" alt="mark"></p><h2 id="在模块中使用蓝图"><a href="#在模块中使用蓝图" class="headerlink" title="在模块中使用蓝图"></a>在模块中使用蓝图</h2><ul><li><p>定义一个蓝图</p><p>在 <code>auth/__init__.py</code>中定义,并导入本模块中其他的py文件，避免在其他地方导入产生循环引用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint</div><div class="line"></div><div class="line">auth = Blueprint(<span class="string">'auth'</span>, __name__)</div><div class="line"></div><div class="line"><span class="keyword">import</span> forms, views</div></pre></td></tr></table></figure></li><li><p>在视图中使用蓝图</p><ul><li>auth同app对象一样有route等装饰器</li><li>反向路由时可以使用<code>auth.login</code></li></ul><p><code>auth/views.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template, request, flash, redirect, url_for</div><div class="line"><span class="keyword">from</span> . <span class="keyword">import</span> auth</div><div class="line"><span class="keyword">from</span> .forms <span class="keyword">import</span> LoginForm, RegistrationForm</div><div class="line"><span class="keyword">from</span> ..models <span class="keyword">import</span> User</div><div class="line"><span class="keyword">from</span> .. <span class="keyword">import</span> db</div><div class="line"><span class="keyword">from</span> flask_login <span class="keyword">import</span> login_user, logout_user, current_user</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@auth.route('/login', methods=['GET', 'POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> render_template(<span class="string">'login.html'</span>,</div><div class="line">                           title=<span class="string">u'登录'</span>,</div><div class="line">                           form=form)</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@auth.route('/logout')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">'auth.login'</span>))</div><div class="line"></div><div class="line"><span class="meta">@auth.route('/register', methods=['GET', 'POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'ok'</span></div></pre></td></tr></table></figure><p>​</p></li></ul><h2 id="蓝图注册"><a href="#蓝图注册" class="headerlink" title="蓝图注册"></a>蓝图注册</h2><ul><li>在app初始化方法或工厂方法中注册蓝图</li><li>url_prefix指定模块的URL路由域</li><li>static_folder指定模块自己的static文件夹路径</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># /app/__init__.py  </span></div><div class="line"><span class="keyword">from</span> auth <span class="keyword">import</span> auth <span class="keyword">as</span> auth_blueprint</div><div class="line">  <span class="keyword">from</span> main <span class="keyword">import</span> main <span class="keyword">as</span> main_blueprint</div><div class="line"></div><div class="line">  app.register_blueprint(auth_blueprint, url_prefix=<span class="string">'/auth'</span>)</div><div class="line">  app.register_blueprint(main_blueprint, static_folder=<span class="string">'static'</span>)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Flask模块化-–-蓝图&quot;&gt;&lt;a href=&quot;#Flask模块化-–-蓝图&quot; class=&quot;headerlink&quot; title=&quot;Flask模块化 – 蓝图&quot;&gt;&lt;/a&gt;Flask模块化 – 蓝图&lt;/h1&gt;&lt;h2 id=&quot;概念简介&quot;&gt;&lt;a href=&quot;#概念简介&quot; class=&quot;headerlink&quot; title=&quot;概念简介&quot;&gt;&lt;/a&gt;概念简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在Django项目中，一个网站可以按模块划分，分别实现几个子APP，然后在settings里注册APP，并在urls里为不同的APP分配不同的url路由。&lt;/p&gt;
&lt;p&gt;Flask也有相似的设计模式，被称为蓝图&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://o8i01ajlj.bkt.clouddn.com/blog/170922/bB3Gl20Dh0.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="flask" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/flask/"/>
    
    
      <category term="Flask" scheme="http://shuaiyy.cn/tags/Flask/"/>
    
      <category term="Web" scheme="http://shuaiyy.cn/tags/Web/"/>
    
  </entry>
  
</feed>
