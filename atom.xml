<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>帅羊羊的博客</title>
  
  <subtitle>坚持学习,努力学习...</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://shuaiyy.cn/"/>
  <updated>2018-06-03T08:23:55.642Z</updated>
  <id>http://shuaiyy.cn/</id>
  
  <author>
    <name>Shuai yy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring boot 入门</title>
    <link href="http://shuaiyy.cn/2018/03/04/%E6%8A%80%E6%9C%AF/Spring%20Boot%20%E5%85%A5%E9%97%A8/"/>
    <id>http://shuaiyy.cn/2018/03/04/技术/Spring Boot 入门/</id>
    <published>2018-03-03T16:00:00.000Z</published>
    <updated>2018-06-03T08:23:55.642Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Boot-入门"><a href="#Spring-Boot-入门" class="headerlink" title="Spring Boot 入门"></a>Spring Boot 入门</h1><p>spring boot是可以基于maven项目快速搭建SSM/H（或者其他Spring相关的项目）的开发框架。<br>可以简化SSM框架的一系列配置，从而快速开发。</p><h2 id="快速搭建Web项目"><a href="#快速搭建Web项目" class="headerlink" title="快速搭建Web项目"></a>快速搭建Web项目</h2><ul><li><p>创建项目</p><p>在IDEA中，菜单 -&gt; New -&gt; Project -&gt; Spring Initializer 然后点 Next。</p><p>输入项目名称，然后next。</p><p>选择web模块，然后next，指定项目路径，ok。</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180418/Di0aC2EBGb.png?imageslim" alt="mark"></p><p>项目结构如下：</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180418/CmKI7596Gd.png?imageslim" alt="mark"></p><p>其中绿色的是手动创建的，红色的文件是springboot创建的。</p></li><li><p>配置切换</p><p>spring boot仍然需要一定的配置，可以为不同环境设置单独的配置。</p><p>配置端口和servlet的根URL 。</p><p>配置JSP支持，需引入maven依赖。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># 主配置，application.properties</div><div class="line"></div><div class="line"># jsp文件重定向</div><div class="line">spring.mvc.view.prefix=/WEB-INF/jsp/</div><div class="line">spring.mvc.view.suffix=.jsp</div><div class="line"># 指定使用生产环境的配置文件</div><div class="line">spring.profiles.active=pro</div><div class="line"></div><div class="line"># 专用配置文件，由主配置中指定 </div><div class="line"># application-dev.properties 或者 application-pro.properties</div><div class="line">server.port=8080</div><div class="line">server.servlet.path=/test</div><div class="line">spring.datasource.url=jdbc:mysql://127.0.0.1:3306/test?characterEncoding=UTF-8</div><div class="line">spring.datasource.username=root</div><div class="line">spring.datasource.password=123456</div><div class="line">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</div><div class="line">spring.jpa.properties.hibernate.hbm2ddl.auto=update</div></pre></td></tr></table></figure></li><li><p>基于yml格式的配置</p><p>yml格式用“冒号 空格” 区分键值， 如果分级，则使用4个空格。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">    mvc:</span></div><div class="line"><span class="attr">        view:</span></div><div class="line"><span class="attr">            prefix:</span> <span class="string">/WEB-INF/jsp/</span></div><div class="line"><span class="attr">            suffix:</span> <span class="string">.jsp</span></div><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">    port:</span> <span class="number">8888</span></div><div class="line"><span class="attr">    context-path:</span> <span class="string">/test</span></div></pre></td></tr></table></figure></li></ul>  <a id="more"></a><p>  ​</p><ul><li><p>maven依赖</p><p>由于IDEA的bug，无法使用provided scope，因此需要删除jar包依赖配置中的provided，以及项目结构文件iml中的provided。</p><p>不需要直接引入spring-core之类的jar包，spring-boot的依赖已经引用并管理了一系列相关的jar包。</p><p>由于从parent继承，一些jar包的版本也无需指定。从maven依赖关系图可以看出，spring-boot-starter-web下有spring-webmvc。</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180418/aC11Agkhcb.png?imageslim" alt="mark"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.shuaiyy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sboot_idea<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--&lt;packaging&gt;jar&lt;/packaging&gt;--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>sboot_idea<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 官方为相关jar包提供了版本控制 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--&lt;scope&gt;provided&lt;/scope&gt;--&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- servlet依赖. --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--&lt;scope&gt;provided&lt;/scope&gt;--&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- tomcat的支持.--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--&lt;scope&gt;provided&lt;/scope&gt;--&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span> <span class="comment">&lt;!-- 这个需要为 true 热部署才有效 --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">      </div><div class="line">      <span class="comment">&lt;!-- jpa--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- mybatis --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">      </div><div class="line">      <span class="comment">&lt;!--mysql驱动包--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 分页插件支持 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure><p>​</p></li><li><p>MVC contoller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldController</span> </span>&#123;</div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(Model model)</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"hello"</span>);</div><div class="line">        model.addAttribute(<span class="string">"now"</span>, DateFormat.getDateTimeInstance().format(<span class="keyword">new</span> Date()));</div><div class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>​</p></li><li><p>启动</p><p>SpringbootApplication, 其被@SpringBootApplication 所注解，表示这个是一个Springboot 应用，用于启动项目。</p><p>spring boot内置了Tomcat服务器，因此可以由spring-boot应用直接启动，也可以由Tomcat启动web应用。</p><p>浏览器访问<code>http://127.0.0.1:8080/hello</code></p></li></ul><h2 id="打包部署"><a href="#打包部署" class="headerlink" title="打包部署"></a>打包部署</h2><ul><li><p>jar方式：</p><p>执行 <code>mvn install</code> ,然后运行jar包 <code>java -jar target/springboot-0.0.1-SNAPSHOT.jar --spring.profiles.active=pro</code> 。</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180418/8Chd35LJiD.png?imageslim" alt="mark"></p></li><li><p>war方式：</p><p>spring boot app要添加一个注解<code>@ServletComponentScan</code>，并继承类<code>SpringBootServletInitializer</code>，重写configure方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// war方式打包</span></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@ServletComponentScan</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SbootIdeaApplication</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span></span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder builder)</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> builder.sources(SbootIdeaApplication.class);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">SpringApplication.run(SbootIdeaApplication.class, args);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>pom中修改packaging方式为war方式。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div></pre></td></tr></table></figure><p>然后运行<code>mvn clean package</code>, 构建war包。</p></li><li><p>热部署</p><p>每次rebuild项目后自动部署，不用重启Application类。idea也可以设置成自动build。</p><p>只需增加一个依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span> <span class="comment">&lt;!-- 这个需要为 true 热部署才有效 --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></li></ul><h2 id="持久层支持"><a href="#持久层支持" class="headerlink" title="持久层支持"></a>持久层支持</h2><h3 id="JPA"><a href="#JPA" class="headerlink" title="JPA"></a>JPA</h3><p>JPA(Java Persistence API)是Sun官方提出的Java持久化规范，用来方便大家操作数据库。真正干活的可能是Hibernate,TopLink等等实现了JPA规范的不同厂商,默认是Hibernate。</p><ul><li>在配置文件中增加参数：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">spring.mvc.view.prefix=/WEB-INF/jsp/</div><div class="line">spring.mvc.view.suffix=.jsp</div><div class="line">spring.datasource.url=jdbc:mysql://127.0.0.1:3306/test?characterEncoding=UTF-8</div><div class="line">spring.datasource.username=root</div><div class="line">spring.datasource.password=123456</div><div class="line">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</div><div class="line">spring.jpa.properties.hibernate.hbm2ddl.auto=update</div></pre></td></tr></table></figure><ul><li><p>增加mysql和jpa的依赖包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- mysql--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- jpa--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>创建一个dao接口，即可使用对应的jpa方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CategoryDAO</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Category</span>,<span class="title">Integer</span>&gt;</span>&#123;&#125;</div><div class="line"><span class="comment">// 使用</span></div><div class="line"><span class="meta">@Autowired</span> CategoryDAO categoryDAO;</div><div class="line"><span class="comment">// find</span></div><div class="line">List&lt;Category&gt; cs=categoryDAO.findAll();</div><div class="line"><span class="comment">// add or update</span></div><div class="line">categoryDAO.save(c);</div><div class="line"><span class="comment">// delete</span></div><div class="line">categoryDAO.delete(c)</div></pre></td></tr></table></figure></li><li><p>实现分页，返回的是Page对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/list"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">listByJPA</span><span class="params">(Model model, @RequestParam(value = <span class="string">"start"</span>,defaultValue = <span class="string">"0"</span>)</span> <span class="keyword">int</span> start,</span></div><div class="line"><span class="function">                        @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"size"</span>,defaultValue = <span class="string">"5"</span>)</span> <span class="keyword">int</span> size) <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">  <span class="comment">// 分页， 降序， size必须大于0</span></div><div class="line">  start = start &lt; <span class="number">0</span> ? <span class="number">0</span>:start;</div><div class="line">  Sort sort = <span class="keyword">new</span> Sort(Sort.Direction.DESC, <span class="string">"id"</span>);</div><div class="line">  Pageable pageable = <span class="keyword">new</span> PageRequest(start, size, sort);</div><div class="line">  Page&lt;Category&gt; page = categoryDAO.findAll(pageable);</div><div class="line">  model.addAttribute(<span class="string">"page"</span>, page);</div><div class="line">  <span class="keyword">return</span> <span class="string">"list_category_page"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>page对象的使用：</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180420/lFDBDIGJLj.png?imageslim" alt="mark"></p></li></ul><h3 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h3><ul><li><p>增加相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- mybatis --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- mysql --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 分页插件 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>创建Mapper接口，并实现相应的CRUD方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Mapper</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CategoryMapper</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="meta">@Select</span>(<span class="string">"select * from category_ "</span>)</div><div class="line">    <span class="function">List&lt;Category&gt; <span class="title">findAll</span><span class="params">()</span></span>;</div><div class="line"> </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 使用</span></div><div class="line"><span class="meta">@Autowired</span> CategoryMapper categoryMapper;</div><div class="line">List&lt;Category&gt; cs=categoryMapper.findAll();</div></pre></td></tr></table></figure></li><li><p>实现分页</p><p>需要实现一个PageHelper的拦截器Bean，可以使用spring Configuration类实现相关bean的定义。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.shuaiyy.springboot.config;</div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageHelperConfig</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> PageHelper <span class="title">pageHelper</span><span class="params">()</span> </span>&#123;</div><div class="line">        PageHelper pageHelper = <span class="keyword">new</span> PageHelper();</div><div class="line">        Properties p = <span class="keyword">new</span> Properties();</div><div class="line">        p.setProperty(<span class="string">"offsetAsPageNum"</span>, <span class="string">"true"</span>);</div><div class="line">        p.setProperty(<span class="string">"rowBoundsWithCount"</span>, <span class="string">"true"</span>);</div><div class="line">        p.setProperty(<span class="string">"reasonable"</span>, <span class="string">"true"</span>);</div><div class="line">        pageHelper.setProperties(p);</div><div class="line">        <span class="keyword">return</span> pageHelper;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>mapper接口无需改动，在查询前设置分页信息,并返回pageInfo对象:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/mybatis/list"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">listCategoryByMybatis</span><span class="params">(Model model, @RequestParam(value = <span class="string">"start"</span>, defaultValue = <span class="string">"0"</span>)</span> <span class="keyword">int</span> start,</span></div><div class="line"><span class="function">     @<span class="title">RequestParam</span><span class="params">(value=<span class="string">"size"</span>,  defaultValue = <span class="string">"3"</span>)</span> <span class="keyword">int</span> size) <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">  <span class="comment">//        ModelAndView mav = new ModelAndView();</span></div><div class="line">  start = start&gt;<span class="number">0</span> ? start:<span class="number">0</span>;</div><div class="line">  PageHelper.startPage(start,size, <span class="string">"id desc"</span>);</div><div class="line">  List&lt;Category&gt; categories = categoryMapper.findAll();</div><div class="line">  PageInfo&lt;Category&gt; pageInfo = <span class="keyword">new</span> PageInfo&lt;&gt;(categories);</div><div class="line">  model.addAttribute(<span class="string">"page"</span>, pageInfo);</div><div class="line">  <span class="keyword">return</span> <span class="string">"list_category_by_pagehelper"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>pageInfo对象的使用：</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180420/DChaiA5ijD.png?imageslim" alt="mark"></p></li></ul><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><ul><li><p>post 上传二进制文件，注意name参数用于后端获取数据对象 </p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;form action=<span class="string">"upload"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</div><div class="line">  选择图片:&lt;input type=<span class="string">"file"</span> name=<span class="string">"file"</span> accept=<span class="string">"image/*"</span> /&gt; &lt;br&gt;</div><div class="line">  &lt;input type=<span class="string">"submit"</span> value=<span class="string">"上传"</span>&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure></li><li><p>上传,使用MultipartFile对象接收二进制数据，确定存储位置和文件名后，使用transferTo保存。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/upload"</span>, method = RequestMethod.POST)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(HttpServletRequest req, @RequestParam(<span class="string">"file"</span>)</span> MultipartFile file,Model m) </span>&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                String fileName = System.currentTimeMillis()+file.getOriginalFilename();</div><div class="line">                String destFileName=req.getServletContext().getRealPath(<span class="string">""</span>)+<span class="string">"uploaded"</span>+File.separator+fileName;</div><div class="line">                 </div><div class="line">                File destFile = <span class="keyword">new</span> File(destFileName);</div><div class="line">                destFile.getParentFile().mkdirs();</div><div class="line">                file.transferTo(destFile);</div><div class="line">                m.addAttribute(<span class="string">"fileName"</span>,fileName);</div><div class="line">            &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">                <span class="keyword">return</span> <span class="string">"上传失败,"</span> + e.getMessage();</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">                <span class="keyword">return</span> <span class="string">"上传失败,"</span> + e.getMessage();</div><div class="line">            &#125;</div><div class="line">             </div><div class="line">            <span class="keyword">return</span> <span class="string">"showImg"</span>;</div><div class="line">    &#125;   </div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>上传文件的大小设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">spring.servlet.multipart.max-file-size=100Mb</div><div class="line">spring.servlet.multipart.max-request-size=100Mb</div></pre></td></tr></table></figure><p>​</p></li></ul><h2 id="实现RESTFUL"><a href="#实现RESTFUL" class="headerlink" title="实现RESTFUL"></a>实现RESTFUL</h2><ul><li><p>后端的HTTP方法 使用PUT delete POST GET，当进行增删改时，返回视图会出错405，method不允许，应该直接返回字符串或者redirect。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryRestful</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    CategoryDAO categoryDAO;</div><div class="line"></div><div class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/category/&#123;id&#125;"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(Model model, @PathVariable(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id)</span>&#123;</div><div class="line">        List&lt;Category&gt; categories = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">        categories.add(categoryDAO.getOne(id));</div><div class="line">        model.addAttribute(<span class="string">"categories"</span>, categories);</div><div class="line">        <span class="keyword">return</span> <span class="string">"list_category"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/category"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAll</span><span class="params">(Model model)</span></span>&#123;</div><div class="line">        List&lt;Category&gt; categories = categoryDAO.findAll();</div><div class="line">        model.addAttribute(<span class="string">"categories"</span>, categories);</div><div class="line">        <span class="keyword">return</span> <span class="string">"list_category"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@DeleteMapping</span>(value = <span class="string">"/category/&#123;id&#125;"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id)</span>&#123;</div><div class="line">        Category category = <span class="keyword">new</span> Category();</div><div class="line">        category.setId(id);</div><div class="line">        categoryDAO.delete(category);</div><div class="line">        <span class="keyword">return</span> <span class="string">"redirect:/category"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@PostMapping</span>(value = <span class="string">"/category/&#123;id&#125;"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(Model model, @PathVariable(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id, Category category)</span>&#123;</div><div class="line">        category.setId(id);</div><div class="line">        categoryDAO.save(category);</div><div class="line">        List&lt;Category&gt; categories = categoryDAO.findAll();</div><div class="line">        model.addAttribute(<span class="string">"categories"</span>, categories);</div><div class="line">        <span class="keyword">return</span> <span class="string">"redirect:/category"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@PutMapping</span>(value = <span class="string">"/category"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">(Category category)</span></span>&#123;</div><div class="line">        categoryDAO.save(category);</div><div class="line">        <span class="keyword">return</span> <span class="string">"redirect:/category"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>前端发起请求时，使用form表单提交，并在hidden input使用<code>_method PUT</code>来标识相应的方法，spring mvc会自动将post方法转为对应的方法。</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180420/dcHchHk66L.png?imageslim" alt="mark"></p><p>​</p></li></ul><h2 id="JSON提交、获取数据"><a href="#JSON提交、获取数据" class="headerlink" title="JSON提交、获取数据"></a>JSON提交、获取数据</h2><ul><li><p>实体类增加注解<code>@JsonIgnoreProperties({ &quot;handler&quot;,&quot;hibernateLazyInitializer&quot; })</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Table</span>(name = <span class="string">"category_"</span>)</div><div class="line"><span class="meta">@JsonIgnoreProperties</span>(&#123; <span class="string">"handler"</span>,<span class="string">"hibernateLazyInitializer"</span> &#125;) </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Category</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"id"</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>控制器类，必须使用RestController，即返回的是字符串，而不是视图。提交数据使用PUT，获取数据使用GET,直接return对象，会自动转换成相应的json字符串对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryController</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span> CategoryDAO categoryDAO;</div><div class="line">     </div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/category"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Category&gt; <span class="title">listCategory</span><span class="params">(@RequestParam(value = <span class="string">"start"</span>, defaultValue = <span class="string">"0"</span>)</span> <span class="keyword">int</span> start,@<span class="title">RequestParam</span><span class="params">(value = <span class="string">"size"</span>, defaultValue = <span class="string">"5"</span>)</span> <span class="keyword">int</span> size) <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        start = start&lt;<span class="number">0</span>?<span class="number">0</span>:start;</div><div class="line">        Sort sort = <span class="keyword">new</span> Sort(Sort.Direction.DESC, <span class="string">"id"</span>);</div><div class="line">        Pageable pageable = <span class="keyword">new</span> PageRequest(start, size, sort);</div><div class="line">        Page&lt;Category&gt; page =categoryDAO.findAll(pageable);</div><div class="line">        <span class="keyword">return</span> page.getContent();</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/category/&#123;id&#125;"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> Category <span class="title">getCategory</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id) <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        Category c= categoryDAO.getOne(id);</div><div class="line">        System.out.println(c);</div><div class="line">        <span class="keyword">return</span> c;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@PutMapping</span>(<span class="string">"/category"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCategory</span><span class="params">(@RequestBody Category category)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        System.out.println(<span class="string">"springboot接受到浏览器以JSON格式提交的数据："</span>+category);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>​</p></li><li><p>前端提交数据时，使用PUT方法，raw格式数据，并设置json的context header。</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180420/6L5Efk4LCj.png?imageslim" alt="mark"></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring-Boot-入门&quot;&gt;&lt;a href=&quot;#Spring-Boot-入门&quot; class=&quot;headerlink&quot; title=&quot;Spring Boot 入门&quot;&gt;&lt;/a&gt;Spring Boot 入门&lt;/h1&gt;&lt;p&gt;spring boot是可以基于maven项目快速搭建SSM/H（或者其他Spring相关的项目）的开发框架。&lt;br&gt;可以简化SSM框架的一系列配置，从而快速开发。&lt;/p&gt;
&lt;h2 id=&quot;快速搭建Web项目&quot;&gt;&lt;a href=&quot;#快速搭建Web项目&quot; class=&quot;headerlink&quot; title=&quot;快速搭建Web项目&quot;&gt;&lt;/a&gt;快速搭建Web项目&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;创建项目&lt;/p&gt;
&lt;p&gt;在IDEA中，菜单 -&amp;gt; New -&amp;gt; Project -&amp;gt; Spring Initializer 然后点 Next。&lt;/p&gt;
&lt;p&gt;输入项目名称，然后next。&lt;/p&gt;
&lt;p&gt;选择web模块，然后next，指定项目路径，ok。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o8i01ajlj.bkt.clouddn.com/blog/180418/Di0aC2EBGb.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;p&gt;项目结构如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o8i01ajlj.bkt.clouddn.com/blog/180418/CmKI7596Gd.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;p&gt;其中绿色的是手动创建的，红色的文件是springboot创建的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;配置切换&lt;/p&gt;
&lt;p&gt;spring boot仍然需要一定的配置，可以为不同环境设置单独的配置。&lt;/p&gt;
&lt;p&gt;配置端口和servlet的根URL 。&lt;/p&gt;
&lt;p&gt;配置JSP支持，需引入maven依赖。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# 主配置，application.properties&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# jsp文件重定向&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;spring.mvc.view.prefix=/WEB-INF/jsp/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;spring.mvc.view.suffix=.jsp&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 指定使用生产环境的配置文件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;spring.profiles.active=pro&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 专用配置文件，由主配置中指定 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# application-dev.properties 或者 application-pro.properties&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;server.port=8080&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;server.servlet.path=/test&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;spring.datasource.url=jdbc:mysql://127.0.0.1:3306/test?characterEncoding=UTF-8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;spring.datasource.username=root&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;spring.datasource.password=123456&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;spring.datasource.driver-class-name=com.mysql.jdbc.Driver&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;spring.jpa.properties.hibernate.hbm2ddl.auto=update&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;基于yml格式的配置&lt;/p&gt;
&lt;p&gt;yml格式用“冒号 空格” 区分键值， 如果分级，则使用4个空格。&lt;/p&gt;
&lt;figure class=&quot;highlight yml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spring:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    mvc:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        view:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;            prefix:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;/WEB-INF/jsp/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;            suffix:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;.jsp&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;server:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    port:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;8888&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    context-path:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;/test&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Java" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/Java/"/>
    
      <category term="SpringBoot" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/Java/SpringBoot/"/>
    
    
      <category term="Java" scheme="http://shuaiyy.cn/tags/Java/"/>
    
      <category term="SpringBoot" scheme="http://shuaiyy.cn/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 6.8服务器使用</title>
    <link href="http://shuaiyy.cn/2018/03/02/%E6%8A%80%E6%9C%AF/CentOS%206.8/"/>
    <id>http://shuaiyy.cn/2018/03/02/技术/CentOS 6.8/</id>
    <published>2018-03-01T16:00:00.000Z</published>
    <updated>2018-06-03T08:19:32.726Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CentOS-6-8"><a href="#CentOS-6-8" class="headerlink" title="CentOS 6.8"></a>CentOS 6.8</h1><h2 id="开启SSH"><a href="#开启SSH" class="headerlink" title="开启SSH"></a>开启SSH</h2><p>默认是开机启动并自动运行的，无需设置。</p><ul><li>查看是否安装ssh<code>rpm -qa | grep ssh</code> </li><li>安装命令 <code>yum install openssh-server</code></li><li>查看服务状态<code>service sshd status</code> </li></ul><h2 id="文件传输"><a href="#文件传输" class="headerlink" title="文件传输"></a>文件传输</h2><ul><li><p>安装lrzsz</p></li><li><p>安装并开启ftp服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">39  yum -y install vsftpd</div><div class="line"><span class="meta">#</span> 为ftp创建一个Linux用户，其主目录用于文件传输，禁止其登陆系统， </div><div class="line">46  useradd ftpuser -d /ftpfile -s /sbin/nologin</div><div class="line"><span class="meta">#</span> 修改主目录的所有权</div><div class="line">47  chown ftpuser.ftpuser /ftpfile</div><div class="line"><span class="meta">#</span> 修改用户密码</div><div class="line">48  passwd ftpuser</div><div class="line">50  vim /etc/vsftpd/chroot_list</div><div class="line">51  vim /etc/selinux/config </div><div class="line">52  vim /etc/vsftpd/vsftpd.conf </div><div class="line">53  service vsftpd restart</div><div class="line"><span class="meta">#</span> 配置防火墙</div><div class="line">54  iptables -I INPUT -p tcp --dport 61001:62000 -j ACCEPT</div><div class="line">55  iptables -I OUTPUT -p tcp --sport 61001:62000 -j ACCEPT</div><div class="line">56  iptables -I INPUT -p tcp --dport 20 -j ACCEPT</div><div class="line">57  iptables -I OUTPUT -p tcp --sport 20 -j ACCEPT</div><div class="line">58  iptables -I INPUT -p tcp --dport 21 -j ACCEPT</div><div class="line">59  iptables -I OUTPUT -p tcp --sport 21 -j ACCEPT</div><div class="line">60  iptables-save</div><div class="line">61  service iptables save # 永久保存</div><div class="line">62  vim /ftpfile/index.html</div><div class="line">63  setsebool -P ftp_home_dir 1</div><div class="line">64  vim /etc/selinux/config  # 关闭selinux</div><div class="line">65  reboot</div><div class="line">79  service vsftpd restart</div></pre></td></tr></table></figure><p>​</p><p>​</p></li></ul><h2 id="增加用户sudoer权限"><a href="#增加用户sudoer权限" class="headerlink" title="增加用户sudoer权限"></a>增加用户sudoer权限</h2><p>root用户下执行 visudo，并添加用户<code>ypur_user ALL=(ALL)       ALL</code></p><h2 id="更改阿里云源"><a href="#更改阿里云源" class="headerlink" title="更改阿里云源"></a>更改阿里云源</h2><p><code>sudo wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo</code></p><p><code>yum makecache</code></p><a id="more"></a><h2 id="配置Java开发环境"><a href="#配置Java开发环境" class="headerlink" title="配置Java开发环境"></a>配置Java开发环境</h2><h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><ul><li><p>官网下载jdk的rpm包，卸载自带的openjdk  <code>rpm -qa | grep jdk</code>   <code>yum remove XXX</code></p></li><li><p>安装jdk，并配置环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">5  chmod 777 jdk-8u171-linux-x64.rpm </div><div class="line">7  rpm -ivh jdk-8u171-linux-x64.rpm </div><div class="line">9  java -version</div><div class="line">10 vim /etc/profile</div><div class="line">export JAVA_HOME=/usr/java/jdk1.8.0_171-amd64</div><div class="line">export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/jre/lib/dt.jar:$JAVA_HOME/jre/lib/tools.jar</div><div class="line">11 source /etc/profile</div></pre></td></tr></table></figure><p>​</p></li></ul><h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><ul><li><p>下载、解压</p></li><li><p>配置环境变量</p></li><li><p>修改配置文件，设置URI编码为utf-8字符集， <code>vim /developer/apache-tomcat-8.5.30/conf/server.xml</code></p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180419/AIBL4Gma1c.png?imageslim" alt="mark"></p></li><li><p>执行startup.sh启动， shutdown.sh停止。</p></li><li><p>开放防火墙端口8080访问权限 <code>iptables -I INPUT -p tcp --dport 8080 -j ACCEPT</code>  <code>service iptables save</code></p></li><li><p>访问url :  ip:8080</p></li></ul><h3 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h3><ul><li>maven3.5，下载、解压、配置环境变量</li></ul><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><ul><li><p>安装依赖  <code>yum install -y gcc-c++ pcre pcre-devel zlib zlib-devel openssl openssl-devel</code></p></li><li><p>下载解压,编译，安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> cd nginx-1.4.0</div><div class="line"> 91  ./configure </div><div class="line"> 92  make</div><div class="line"> 95  make install</div><div class="line"> 96  whereis nginx</div><div class="line"> 97  cd /usr/local/nginx/sbin/</div><div class="line"> 99  ./nginx </div><div class="line">100  ps aux | grep nginx</div><div class="line">101  curl http://localhost</div></pre></td></tr></table></figure></li><li><p><strong>nginx的常用命令</strong></p><p>cd /usr/local/nginx/sbin</p><p>启动：./nginx</p><p>停止：./nginx -s stop</p><p>重启：./nginx -s reopen</p></li><li><p>设置图片文件服务反向代理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">  114  vim /usr/local/nginx/conf/nginx.conf</div><div class="line"><span class="meta">#</span>增加一行，表示扫描该目录下的配置文件,以域名命名配置文件，方便管理</div><div class="line">  include vhost/*.conf</div><div class="line">  115  ls /usr/local/nginx/conf/</div><div class="line">  116  mkdir /usr/local/nginx/conf/vhost</div><div class="line">  117  cd /usr/local/nginx/conf/vhost</div><div class="line">  118  vim /usr/local/nginx/conf/vhost/img.happymall.com.conf</div><div class="line"><span class="meta">  #</span>目录转发，将此二级域名指向指定的文件存储位置，端口和域名是可以修改的</div><div class="line">server &#123;</div><div class="line">    listen 80;</div><div class="line">    autoindex off;  #开启后可以通过索引 遍历访问</div><div class="line">    server_name img.happymmall.com;</div><div class="line">    access_log /usr/local/nginx/logs/access.log combined;</div><div class="line">    index index.html index.htm index.jsp index.php;</div><div class="line">    #error_page 404 /404.html;</div><div class="line">    if ( $query_string ~* ".*[\;'\&lt;\&gt;].*" )&#123;</div><div class="line">        return 404;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    location ~ /(mmall_fe|mmall_admin_fe)/dist/view/* &#123;</div><div class="line">        deny all;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        root /ftpfile/img/;</div><div class="line">        add_header Access-Control-Allow-Origin *;</div><div class="line"></div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line">118 vim /usr/local/nginx/conf/vhost/happymall.com.conf</div><div class="line"><span class="meta">#</span>端口转发，将happymmall.com的请求，转发至http://127.0.0.1:8080的Tomcat服务。</div><div class="line">server &#123;</div><div class="line">listen 80;</div><div class="line">autoindex on;</div><div class="line">server_name happymmall.com www.happymmall.com;</div><div class="line">access_log /usr/local/nginx/logs/access.log combined;</div><div class="line">index index.html index.htm index.jsp index.php;</div><div class="line">if ( $query_string ~* ".*[\;'\&lt;\&gt;].*" )&#123;</div><div class="line">        return 404;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">location = / &#123;</div><div class="line">        root /product/front/mmall_fe/dist/view;</div><div class="line">        index index.html;</div><div class="line">&#125;</div><div class="line"></div><div class="line">location ~ .*\.html$ &#123;</div><div class="line">        root /product/front/mmall_fe/dist/view;</div><div class="line">        index index.html;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">location / &#123;</div><div class="line">        proxy_pass http://127.0.0.1:8080/;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|flv|ico)$ &#123;</div><div class="line">        proxy_pass http://127.0.0.1:8080;</div><div class="line">        expires 30d;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">location ~ .*\.(js|css)?$ &#123;</div><div class="line">        proxy_pass http://127.0.0.1:8080;</div><div class="line">        expires 7d;</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line">  119  service vsftpd status</div><div class="line">  120  /usr/local/nginx/sbin/nginx -s reload</div></pre></td></tr></table></figure><p>由于没有真实的域名，修改<code>C:\Windows\System32\drivers\etc\hosts</code>文件，将Nginx的ip与其代理的域名关联起来，就可以本地访问，看到转发效果了。</p></li></ul><h3 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h3><ul><li><p>安装 <code>yum -y install mysql-server</code></p></li><li><p>默认配置文件 <code>/etc/my.cnf</code></p><p>在mysqld节点下增加 <code>default-character-set=utf8  character-set-server=utf8</code></p></li><li><p>设置开机启动，配置防火墙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">127  vim /etc/my.cnf </div><div class="line">128  chkconfig mysqld on</div><div class="line">129  chkconfig --list  mysqld </div><div class="line">130  iptables -A INPUT -p tcp -m tcp --dport 3306 -j ACCEPT</div><div class="line">131  iptables-save</div><div class="line">132  service iptables save</div><div class="line">service mysqld satrt</div></pre></td></tr></table></figure></li><li><p>设置数据库用户和密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">mysql -u root #默认没密码</div><div class="line"><span class="meta">&gt;</span>set password for root@localhost=password('123456');</div><div class="line"><span class="meta">&gt;</span>select user,host from mysql.user; # 查看用户</div><div class="line"><span class="meta">#</span>删除匿名用户，即用户名为空的用户</div><div class="line">delete from mysql.user where user='';</div><div class="line"><span class="meta">#</span>添加新用户</div><div class="line">insert into mysql.user(Host,User,Password) values('localhost', 'test', password('123456'));</div><div class="line"><span class="meta">#</span>刷新</div><div class="line">flush privileges;</div><div class="line"><span class="meta">#</span>创建新的数据库，数据库名用的不是单引号，是~键所在的那个。如果不是保留字也可以不用点。</div><div class="line">CREATE DATABASE `tpcms` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci</div><div class="line"><span class="meta">#</span> 授权（增删改查） db.table 对 user@ip  使用user密码验证</div><div class="line">GRANT ALL PRIVILEGES ON  *.*  TO root@"%" IDENTIFIED BY '用户root的密码';</div><div class="line"><span class="meta">#</span> 查看权限</div><div class="line">select * from mysql.user \G</div></pre></td></tr></table></figure></li></ul><h3 id="GIT"><a href="#GIT" class="headerlink" title="GIT"></a>GIT</h3><ul><li>安装和配置</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">162  yum remove git</div><div class="line">163  yum install -y curl-devel expat-devel gettext-devel openssl-devel zlib-devel asciidoc xmlto perl-devel perl-CPAN autoconf*</div><div class="line">164  wget https://github.com/git/git/archive/v2.17.0.tar.gz</div><div class="line">165  pwd</div><div class="line">166  tar -zxvf v2.17.0.tar.gz </div><div class="line">168  cd git-2.17.0/</div><div class="line">169  make configure</div><div class="line">170  ./configure --prefix=/usr/local/git --with-iconv=/usr/local/libiconv</div><div class="line">171  make all doc</div><div class="line">172  make install install-doc install-html</div><div class="line"><span class="meta">#</span>环境变量</div><div class="line">176  echo "export PATH=$PATH:/usr/local/git/bin" &gt;&gt; /etc/bashrc</div><div class="line">177  source /etc/bashrc </div><div class="line">180  vim /etc/profile</div><div class="line">181  source /etc/profile</div><div class="line">182  git --version</div><div class="line"></div><div class="line">git config --global core.autocrlf false  # 不去管win/linux换行符的问题</div><div class="line">git config --global gui.encoding utf-8</div><div class="line">git config --global core.quotepath off  # 避免git status的中文乱码问题</div><div class="line">git config --global</div></pre></td></tr></table></figure><ul><li><p>生成SSH key pair</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C "syy@163.com"</div><div class="line">187  ssh-add ~/.ssh/id_rsa #添加秘钥</div><div class="line">188  eval `ssh-agent`  #上一步出错时执行</div><div class="line">189  ssh-add ~/.ssh/id_rsa  #添加秘钥</div><div class="line">190  cat ~/.ssh/id_rsa.pub  #将公钥添加到githubo 或码云里</div><div class="line">git clone git@gitee.com:shuayy/helloworld.git</div></pre></td></tr></table></figure><p>​</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CentOS-6-8&quot;&gt;&lt;a href=&quot;#CentOS-6-8&quot; class=&quot;headerlink&quot; title=&quot;CentOS 6.8&quot;&gt;&lt;/a&gt;CentOS 6.8&lt;/h1&gt;&lt;h2 id=&quot;开启SSH&quot;&gt;&lt;a href=&quot;#开启SSH&quot; class=&quot;headerlink&quot; title=&quot;开启SSH&quot;&gt;&lt;/a&gt;开启SSH&lt;/h2&gt;&lt;p&gt;默认是开机启动并自动运行的，无需设置。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查看是否安装ssh&lt;code&gt;rpm -qa | grep ssh&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;安装命令 &lt;code&gt;yum install openssh-server&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查看服务状态&lt;code&gt;service sshd status&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;文件传输&quot;&gt;&lt;a href=&quot;#文件传输&quot; class=&quot;headerlink&quot; title=&quot;文件传输&quot;&gt;&lt;/a&gt;文件传输&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;安装lrzsz&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装并开启ftp服务&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;39  yum -y install vsftpd&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt; 为ftp创建一个Linux用户，其主目录用于文件传输，禁止其登陆系统， &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46  useradd ftpuser -d /ftpfile -s /sbin/nologin&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt; 修改主目录的所有权&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47  chown ftpuser.ftpuser /ftpfile&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt; 修改用户密码&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48  passwd ftpuser&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50  vim /etc/vsftpd/chroot_list&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51  vim /etc/selinux/config &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52  vim /etc/vsftpd/vsftpd.conf &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53  service vsftpd restart&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt; 配置防火墙&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54  iptables -I INPUT -p tcp --dport 61001:62000 -j ACCEPT&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55  iptables -I OUTPUT -p tcp --sport 61001:62000 -j ACCEPT&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56  iptables -I INPUT -p tcp --dport 20 -j ACCEPT&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57  iptables -I OUTPUT -p tcp --sport 20 -j ACCEPT&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58  iptables -I INPUT -p tcp --dport 21 -j ACCEPT&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59  iptables -I OUTPUT -p tcp --sport 21 -j ACCEPT&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60  iptables-save&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61  service iptables save # 永久保存&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62  vim /ftpfile/index.html&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63  setsebool -P ftp_home_dir 1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64  vim /etc/selinux/config  # 关闭selinux&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65  reboot&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;79  service vsftpd restart&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;增加用户sudoer权限&quot;&gt;&lt;a href=&quot;#增加用户sudoer权限&quot; class=&quot;headerlink&quot; title=&quot;增加用户sudoer权限&quot;&gt;&lt;/a&gt;增加用户sudoer权限&lt;/h2&gt;&lt;p&gt;root用户下执行 visudo，并添加用户&lt;code&gt;ypur_user ALL=(ALL)       ALL&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;更改阿里云源&quot;&gt;&lt;a href=&quot;#更改阿里云源&quot; class=&quot;headerlink&quot; title=&quot;更改阿里云源&quot;&gt;&lt;/a&gt;更改阿里云源&lt;/h2&gt;&lt;p&gt;&lt;code&gt;sudo wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;yum makecache&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Linux" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/Linux/"/>
    
    
      <category term="Linux" scheme="http://shuaiyy.cn/tags/Linux/"/>
    
      <category term="CentOS" scheme="http://shuaiyy.cn/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>Spring入门</title>
    <link href="http://shuaiyy.cn/2018/02/25/%E6%8A%80%E6%9C%AF/Spring%E5%85%A5%E9%97%A8-Hello%20World/"/>
    <id>http://shuaiyy.cn/2018/02/25/技术/Spring入门-Hello World/</id>
    <published>2018-02-24T16:00:00.000Z</published>
    <updated>2018-06-03T08:14:02.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Hello-World"><a href="#Spring-Hello-World" class="headerlink" title="Spring Hello World"></a>Spring Hello World</h1><blockquote><p> Spring 是一个IOC(DI) 和AOP 容器框架</p></blockquote><h2 id="IOC-DI"><a href="#IOC-DI" class="headerlink" title="IOC/DI"></a>IOC/DI</h2><p><strong>两个概念</strong>（其实是不同的角度） </p><p>控制反转：对象实例由spring通过配置创建，而不是程序员主动new构造。</p><p>依赖注入：拿到的对象实例可以直接使用，其定义在配置文件的属性值在实例化时已被注入。</p><ul><li><p>创建一个pojo类，<em>POJO</em>（Plain Ordinary Java Object）简单的Java对象，实际就是普通JavaBeans。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Category</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul>  <a id="more"></a><ul><li><p>创建spring的配置文件，在bean中配置要生成的对象实例及其属性。</p><p><code>applicationContext.xml</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</div><div class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></div><div class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       xmlns:aop=<span class="string">"http://www.springframework.org/schema/aop"</span></div><div class="line">       xmlns:tx=<span class="string">"http://www.springframework.org/schema/tx"</span></div><div class="line">       xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span>&gt;</div><div class="line">&lt;!-- 定义bean对象及其属性 --&gt;</div><div class="line">  &lt;bean name=<span class="string">"c"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.how2java.pojo.Category"</span>&gt;</div><div class="line">      &lt;property name=<span class="string">"name"</span> value=<span class="string">"category_1"</span> /&gt;</div><div class="line">      &lt;property name=<span class="string">"id"</span> value=<span class="string">"1000"</span> /&gt;</div><div class="line">  &lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></li><li><p>Spring通过配置文件创建实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</div><div class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"><span class="keyword">import</span> Category;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSpring</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">                <span class="keyword">new</span> String[] &#123; <span class="string">"applicationContext.xml"</span> &#125;);</div><div class="line">        Category c = (Category) context.getBean(<span class="string">"c"</span>);</div><div class="line"></div><div class="line">        System.out.println(c.getName());</div><div class="line">        c.setName(<span class="string">"hello"</span>);</div><div class="line">        System.out.println(c.getName());</div><div class="line">        System.out.println(c.getId());</div><div class="line">        c.setId(<span class="number">100</span>);</div><div class="line">        System.out.println(c.getId());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>注入对象</p><p>假设一个Product类的属性里有Category类，在实例化Product类时，可以注入一个已有的Category实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</div><div class="line">  </div><div class="line">    <span class="keyword">private</span> Category category;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Category <span class="title">getCategory</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> category;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCategory</span><span class="params">(Category category)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.category = category;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>配置<code>applicationContext.xml</code>,使用rel指定对象实例。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"c"</span> <span class="attr">class</span>=<span class="string">"com.how2java.pojo.Category"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"category 1"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"p"</span> <span class="attr">class</span>=<span class="string">"com.how2java.pojo.Product"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"product1"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"category"</span> <span class="attr">ref</span>=<span class="string">"c"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure><p>​</p></li></ul><h2 id="通过注解方式实现IOC-DI"><a href="#通过注解方式实现IOC-DI" class="headerlink" title="通过注解方式实现IOC/DI"></a>通过注解方式实现IOC/DI</h2><ul><li><p>在<code>applicationContext</code>中声明使用注解方式进行装配</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"c"</span> <span class="attr">class</span>=<span class="string">"com.how2java.pojo.Category"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"category_1"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"1000"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"p1"</span> <span class="attr">class</span>=<span class="string">"com.how2java.pojo.Product"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--&lt;property name="category" ref="c"/&gt;--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"product_1"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p><code>@Autowired</code> 自动装配依赖对象</p><p>首先了解beans里的default-autowire参数，声明了该参数，则会使用指定的方式自动配置，不用显示的在bean中指定依赖。</p><p><code>&lt;beans xmlns=&quot;...&quot; default-autowire=&quot;byName&quot;&gt;</code></p><p>默认值为no，即不自动装配。四种方式：</p><ol><li>byName,找到与属性名一样的bean，然后装配给该属性</li><li>byType， 找到与属性类型一样的bean，然后装配给该属性。如果 找到多个，抛出异常，没找到不会异常(设置dependency-check=“object” 可以让spring抛出异常)</li><li>constructor，与byType类似，使用的是构造器方法参数的类型，如果找不到类型一致的bean，则会异常</li><li>autodect，通过bean的自省来决定，如果是默认的构造器则用byType，否则使用constructor。</li></ol><p><strong>自动装配依赖对象</strong></p><p>@Autowired 可以用来注解构造方法、属性、setter方法，使用的是<code>byType</code>方式装配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</div><div class="line"><span class="comment">//    @Autowired</span></div><div class="line">    <span class="keyword">private</span> Category category;</div><div class="line">    </div><div class="line">    <span class="meta">@Autowired</span>(required=<span class="keyword">false</span>)  <span class="comment">// 默认是不允许对象为null的，可以使用required参数修改</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Product</span><span class="params">(Category category)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.category = category;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Category <span class="title">getCategory</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> category;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">//    @Autowired</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCategory</span><span class="params">(Category category)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.category = category;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p><code>@Resource(name=&quot;xxx&quot;)</code></p><p>使用<code>@Resource</code>注解也可以实现为bean自动注入对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</div><div class="line"><span class="comment">//    @Autowired</span></div><div class="line">    <span class="meta">@Resource</span>(name=<span class="string">"c"</span>)</div><div class="line">    <span class="keyword">private</span> Category category;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p><code>@Component</code>  将pojo类注解为Spring bean，在配置文件中声明bean class的位置，bean的初始化不再由配置文件注入，而是由类自身实现。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.test.pojo"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span>(<span class="string">"c"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Category</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String name=<span class="string">"category_1"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Component</span>(<span class="string">"p"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> Category category;</div><div class="line">    <span class="keyword">private</span> String name=<span class="string">"category_1"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>​</p></li></ul><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><blockquote><p>AOP 即 Aspect Oriented Program 面向切面编程 .</p><p>首先在面向切面编程的思想里面，把功能分为核心业务功能，和周边功能。<br> 核心业务，比如登陆，数据操作等；周边功能如性能统计，日志，事务管理等等 </p></blockquote><p>传统的面向对象编程OOP如果实现周边功能，需要在每个类中实现该功能接口，耦合高。</p><p>在面向切面编程AOP的思想里面，核心业务功能和周边功能分别独立进行开发， 然后把周边功能和核心业务功能 “编织” 在一起，这就叫AOP。</p><p><strong>简单的示例</strong>: 在执行核心功能前后执行log打印</p><ul><li><p>核心业务，在切点上执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.test.service;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductService</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Thread.sleep(<span class="number">2000</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        System.out.println(<span class="string">"do someting!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>​</p></li><li><p>辅助业务， 在切面上执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.test.aspect;</div></pre></td></tr></table></figure><p>import org.aspectj.lang.ProceedingJoinPoint;</p><p>public class LogAspect {</p><pre><code>public Object log(ProceedingJoinPoint joinPoint) throws Throwable {    System.out.println(&quot;start at&quot; + System.currentTimeMillis());  // 辅助功能    Object obj = joinPoint.proceed();  // 执行核心功能    System.out.println(&quot;end at&quot; + System.currentTimeMillis()); // 辅助功能    return obj;}</code></pre><p>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">+ 声明切点、切面的bean对象，并配置AOP关系</div><div class="line"></div><div class="line">  ```xml</div><div class="line">  &lt;!-- 定义切点、切面 --&gt;</div><div class="line">  &lt;bean name=&quot;product_service&quot; class=&quot;com.how2java.service.ProductService&quot;/&gt;</div><div class="line">  &lt;bean name=&quot;logAspect&quot; class=&quot;com.how2java.aspect.LogAspect&quot;/&gt;    </div><div class="line"></div><div class="line">  &lt;!-- 配置切点和切面 --&gt;</div><div class="line">  &lt;aop:config&gt;</div><div class="line">          &lt;aop:pointcut id=&quot;logPointCut&quot; expression=&quot;execution(* com.test.service.ProductService.*(..)) &quot;/&gt;</div><div class="line">          &lt;aop:aspect id=&quot;logger&quot; ref=&quot;logAspect&quot;&gt;</div><div class="line">              &lt;aop:around pointcut-ref=&quot;logPointCut&quot; method=&quot;log&quot;/&gt;</div><div class="line">          &lt;/aop:aspect&gt;</div><div class="line">      &lt;/aop:config&gt;</div></pre></td></tr></table></figure><p>​</p></li></ul><h2 id="通过注解实现AOP"><a href="#通过注解实现AOP" class="headerlink" title="通过注解实现AOP"></a>通过注解实现AOP</h2><ul><li><p><code>@Component</code> 表示这是一个bean,由Spring进行管理，业务类和切面类都是由spring管理的bean类。</p></li><li><p><code>@Aspect</code> 注解表示这是一个切面，用在切面类上</p></li><li><p><code>@Around(value = &quot;execution(* com.test.service.ProductService.*(..))&quot;)</code> 用在切面方法上，表示对哪些业务类的哪些方法进行切面操作。</p></li><li><p>业务类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span>(<span class="string">"productService"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductService</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Thread.sleep(<span class="number">2000</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        System.out.println(<span class="string">"do someting!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>切面类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span>(<span class="string">"logAspect"</span>)</div><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAspect</span> </span>&#123;</div><div class="line">    <span class="meta">@Around</span>(value = <span class="string">"execution(* com.how2java.service.ProductService.*(..))"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">log</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"start at"</span> + System.currentTimeMillis());</div><div class="line"></div><div class="line">        Object obj = joinPoint.proceed();  <span class="comment">// 执行核心功能</span></div><div class="line"></div><div class="line">        System.out.println(<span class="string">"end at"</span> + System.currentTimeMillis());</div><div class="line">        <span class="keyword">return</span> obj;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>applicationContext.xml配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.how2java.aspect"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.how2java.service"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></div></pre></td></tr></table></figure><p>​</p></li></ul><h2 id="通过注解执行Spring测试类"><a href="#通过注解执行Spring测试类" class="headerlink" title="通过注解执行Spring测试类"></a>通过注解执行Spring测试类</h2><ul><li><p><code>@RunWith(SpringJUnit4ClassRunner.class)</code> 声明这是一个Spring的测试类</p></li><li><p><code>@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</code> 加载Spring的配置文件</p></li><li><p><code>@Autowired</code> 给属性自动装配相关对象</p></li><li><p><code>@Test</code> 声明方法为测试类Test方法, 需要junit和hamcrest-all jar包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ContextConfiguration</span>(<span class="string">"classpath:applicationContext.xml"</span>)</div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSpring</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    Category c;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    Product p1;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    ProductService ps;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(c.getName());</div><div class="line">        System.out.println(p1.getName());</div><div class="line">        ps.doSomething();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>不使用注解的话和测试类的话</p><p>需要main方法执行，手动加载配置，获取beans并执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSpring</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">                <span class="keyword">new</span> String[] &#123; <span class="string">"applicationContext.xml"</span> &#125;);</div><div class="line"></div><div class="line">        Category c = (Category) context.getBean(<span class="string">"c"</span>);</div><div class="line"></div><div class="line">        System.out.println(c.getName());</div><div class="line">        c.setName(<span class="string">"hello"</span>);</div><div class="line">        System.out.println(c.getName());</div><div class="line">        System.out.println(c.getId());</div><div class="line">        c.setId(<span class="number">100</span>);</div><div class="line">        System.out.println(c.getId());</div><div class="line"></div><div class="line">        Product p1 = (Product) context.getBean(<span class="string">"p1"</span>);</div><div class="line">        System.out.println(p1.getName() + p1.getCategory().getName() + p1.getCategory().getId());</div><div class="line"></div><div class="line">        ProductService ps = (ProductService) context.getBean(<span class="string">"productService"</span>);</div><div class="line">        ps.doSomething();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>​</p></li></ul><h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h2 id="配置Bean"><a href="#配置Bean" class="headerlink" title="配置Bean"></a>配置Bean</h2><ul><li><p>配置形式：基于xml、基于注解</p></li><li><p>Bean 的配置方式：通过全类名（反射）、通过工厂方法（静态工厂方法&amp;<br>实例工厂方法）、FactoryBean</p></li><li><p>IOC 容器BeanFactory &amp; ApplicationContext</p><p>ApplicationContext是Beanfactory的子接口，IOC容器负责实例化Bean。ApplicationContext 在初始化上下文时就实例化了所有的单例Bean。</p><p><code>ClassPathXmlApplicationContext</code>：从类路径下加载配置文件<br><code>FileSystemXmlApplicationContext</code>: 从文件系统中加载配置文件</p></li><li><p>依赖注入的方式：属性注入（通过setter方法）；构造器注入.</p><p>属性可以使用ref引用其他bean，也可以创建内部bean。</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180409/bgGAkBm82c.png?imageslim" alt="mark"></p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180409/gIkb16mJEj.png?imageslim" alt="mark"></p><p>​</p></li><li><p>注入属性值的字面值，即可以用字符串表示的值，基本类型，封装类都可以。 <code>&lt;null/&gt;</code>表示注入null值。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 可以根据 index 和 type 进行更加精确的定位. (了解) --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car"</span> <span class="attr">class</span>=<span class="string">"com.atguigu.spring.helloworld.Car"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"KUGA"</span> <span class="attr">index</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"ChangAnFord"</span> <span class="attr">index</span>=<span class="string">"0"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"250000"</span> <span class="attr">type</span>=<span class="string">"float"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 若字面值中包含特殊字符, 则可以使用 CDATA 来进行赋值. (了解) --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[&lt;ATARZA&gt;]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure><p>集合属性值：</p><ul><li>util.map 子标签 entry key value</li><li>list</li><li>props定义util.Properties，子标签为prop</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 装配集合属性 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.atguigu.spring.helloworld.User"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userName"</span> <span class="attr">value</span>=<span class="string">"Jack"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cars"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 使用 list 元素来装配集合属性 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"car"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"car2"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- 引用外部声明的 list --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"newCars"</span> <span class="attr">ref</span>=<span class="string">"cars"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 声明集合类型的 bean --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">"cars"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"car"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"car2"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></div></pre></td></tr></table></figure><p>​</p></li><li><p>自动装配：byName, byType</p></li><li><p>bean 之间的关系：继承；依赖</p><p>子Bean 从父Bean 中继承或覆盖配置, 包括Bean 的属性配置。</p><p>父Bean 可以作为配置模板, 也可以作为Bean 实例. 若只想把父Bean 作为模板, 可以设置父bean的abstract 属性为true, 这样Spring 将不会实例化这个 Bean。</p><p>depends-on，依赖关系，依赖的bean会在本bean之前实例化</p></li><li><p>bean 的作用域：singleton；prototype；WEB 环境作用域；</p><p>scope属性设置作用域，默认是单例的，即singleton，容器加载后即创建单实例的Bean。</p><p>prototype是每次返回一个新的实例。</p></li><li><p>使用外部属性文件</p><p>使用PropertyPlaceholderConfigurer载入外部properties配置文件，然后使用<code>${varName}</code>引用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 导入外部的资源文件 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span>/&gt;</span></div></pre></td></tr></table></figure><p>​</p></li><li><p>spEL，使用<code>#{...}</code>作为定界符。</p><p>表示字面量、引用对象及其属性或方法`#{5}  #{“string1”} #{false} #{obj} #{obj.id}  #{obj.toString()} </p><p>算数运算，三元运算，正则表达式，调用静态类使用 <code>#{ T(java.lang.Math).PI}</code></p></li><li><p>IOC 容器中Bean 的生命周期</p><p>scope属性可以设置是单例还是prototype，生命周期也会不同。</p><p>Bean的配置中可以声明init-method和destroy-method属性，为Bean指定初始化和销毁方法。</p><p>在初始化方法执行的前后仍可以使用自定的Bean后置处理器，执行before和after的相关逻辑代码。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 初始化和销毁方法--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"boy"</span> <span class="attr">class</span>=<span class="string">"com.helloworld.User"</span> <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"destroy"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userName"</span> <span class="attr">value</span>=<span class="string">"bob"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"wifeName"</span> <span class="attr">value</span>=<span class="string">"#&#123;girl.userName&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 前置处理器，自己实现的类，AOP --&gt;</span></div><div class="line"><span class="comment">&lt;!-- 配置 bean 后置处理器: 不需要配置 id 属性, IOC 容器会识别到他是一个 bean 后置处理器, 并调用其方法， 注意：所有的bean都会被处理--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.helloworld.MyBeanPostProcessor"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure><p>java类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">System.out.println(<span class="string">"init method..."</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123;</div><div class="line">System.out.println(<span class="string">"destroy method..."</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Bean 后置处理器</span></div><div class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.BeanPostProcessor;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">//该方法在 init 方法之后被调用</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object arg0, String arg1)</span></span></div><div class="line"><span class="function"><span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line"><span class="keyword">if</span>(arg1.equals(<span class="string">"boy"</span>))&#123;</div><div class="line">System.out.println(<span class="string">"postProcessAfterInitialization..."</span> + arg0 + <span class="string">","</span> + arg1);</div><div class="line">User user = (User) arg0;</div><div class="line">user.setUserName(<span class="string">"李大齐"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> arg0;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//该方法在 init 方法之前被调用</span></div><div class="line"><span class="comment">//可以工作返回的对象来决定最终返回给 getBean 方法的对象是哪一个, 属性值是什么</span></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> arg0: 实际要返回的对象</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> arg1: bean 的 id 值</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object arg0, String arg1)</span></span></div><div class="line"><span class="function"><span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line"><span class="keyword">if</span>(arg1.equals(<span class="string">"boy"</span>))</div><div class="line">System.out.println(<span class="string">"postProcessBeforeInitialization..."</span> + arg0 + <span class="string">","</span> + arg1);</div><div class="line"><span class="keyword">return</span> arg0;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><ul><li><p>组件扫描，component-scan，可以扫描并实例化具有特定注解的组件</p><p>配置中<code>&lt;context:component-scan&gt;</code>, base-package 属性指定一个需要扫描的基类包，Spring 容器将会扫描<br>这个基类包里及其子包中的所有类. 当需要扫描多个包时, 可以使用逗号分隔. 还可以指定包含或过滤的特定类，或者匹配模式</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180409/cB0817ICh4.png?imageslim" alt="mark"></p><p>@Autowired 和@Resource 、@Inject注解的属性也会被自动装配。</p></li><li><p>特定组件：</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180409/cJmKhF0GhE.png?imageslim" alt="mark"></p></li><li><p>默认命名为类名的首字母小写，或者通过注解的value指定。</p></li><li><p>自动装配</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180409/fIlBE1E3JG.png?imageslim" alt="mark"></p><p>​</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180409/5k7j1hkI3D.png?imageslim" alt="mark"></p></li></ul><h2 id="AOP-1"><a href="#AOP-1" class="headerlink" title="AOP"></a>AOP</h2><p>如日志、验证等需要面向切面编程的场景。做到核心业务与辅助业务相分离。</p><p><strong>相关概念</strong>：</p><ul><li><p>切面(Aspect): 横切关注点(跨越应用程序多个模块的功能)被模块化的特殊对象</p></li><li><p>通知(Advice): 切面必须要完成的工作</p></li><li><p>目标(Target): 被通知的对象</p></li><li><p>代理(Proxy): 向目标对象应用通知之后创建的对象</p></li><li><p>连接点（Joinpoint）：程序执行的某个特定位置：如类某个方法调用前、调用后、方法抛出异常后等。连接点由两个信息确定：执行点和相对执行点的方位。</p></li><li><p>切点（pointcut）：每个类都拥有多个连接点, AOP通过切点定位到特定的连接点。</p><p>切点通过 org.springframework.aop.Pointcut 接口进行描述，它使用类和方法作为连接点的查询条件。</p></li></ul><p><strong>声明配置切面</strong></p><p>AspectJ是Java 社区里最完整最流行的AOP 框架，开启支持需要导入相关的jar包，并配置<code>&lt;aop:aspectj-autoproxy&gt;</code></p><p><strong>通过注解配置AOP</strong></p><ol><li><p>配置文件中自动扫描切面组件 <code>&lt;context:component-scan base-package=&quot;com.helloworld.spring.aop&quot;&gt;&lt;/context:component-scan&gt;</code></p></li><li><p>加入使 AspjectJ 注解起作用的配置:<code>&lt;aop:aspectj-autoproxy&gt;&lt;/aop:aspectj-autoproxy&gt;</code>为匹配的类自动生成动态代理对象. </p></li><li><p>编写切面类，需要<code>@Component</code> 和 <code>@Aspect</code> 声明类为spring bean，且为切面。在切面类的方法上声明为通知方法，如<code>@Before(&quot;切点表达式&quot;)声明前置通知。</code></p><p>可在通知方法中添加 JoinPoint 类型的参数, 以访问到切点方法（被通知的方法）的签名和方法的参数. </p><p>​</p></li></ol><ul><li><p>切面只是一个带有@Aspect 注解的Java 类. </p></li><li><p>通知Advice是标注有某种注解的简单的Java 方法.</p><p>– @Before: 前置通知, 在方法执行之前执行<br>– @After: 后置通知, 在方法执行（正常返回或异常）之后执行<br>– @AfterRunning: 返回通知, 在方法返回结果之后执行<br>– @AfterThrowing: 异常通知, 在方法抛出异常之后<br>– @Around: 环绕通知, 围绕着方法执行</p><p>@DeclareParents(value=”目标类对象”， defaultImpl=YourImpl.class)：引入通知，为目标类对象动态的增加接口实现，实现多重继承。而不用修改目标类的代码。 新接口实现由yourImpl负责实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="meta">@Order</span>(<span class="number">0</span>) <span class="comment">// 执行优先级，越小越先被执行</span></div><div class="line"><span class="meta">@Compoment</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggingAspect</span> </span>&#123;</div><div class="line"><span class="meta">@Before</span>(<span class="string">"execution(public int com.helloworld.Calculator.*(int, int))"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeMethod</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</div><div class="line">String methodName = joinPoint.getSignature().getName();</div><div class="line">Object [] args = joinPoint.getArgs();</div><div class="line">&#125;</div><div class="line">  <span class="comment">// 无论是正常返回还是出现异常，后置通知都会执行</span></div><div class="line"><span class="meta">@After</span>(<span class="string">"execution(* com.helloworld.spring.aop.*.*(..))"</span>) <span class="comment">//表达式支持通配符</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterMethod</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</div><div class="line">String methodName = joinPoint.getSignature().getName();</div><div class="line">System.out.println(<span class="string">"The method "</span> + methodName + <span class="string">" ends"</span>);</div><div class="line">&#125;</div><div class="line">  <span class="comment">// 正常返回后执行通知, 使用returning属性获取返回值，并在通知方法的参数中接收，参数名要一致</span></div><div class="line"><span class="meta">@AfterReturing</span>(pointcut=<span class="string">"execution(* com.helloworld.spring.aop.*.*(..))"</span>, returning=<span class="string">"result"</span>) </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(JoinPoint joinPoint, Object result)</span></span>&#123;</div><div class="line">String methodName = joinPoint.getSignature().getName();</div><div class="line">System.out.println(<span class="string">"The method "</span> + methodName + <span class="string">" ends with "</span> + result);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 异常通知，通知方法传入的异常可以指定具体的类型以捕获感兴趣的通知</span></div><div class="line">    <span class="meta">@AfterThrowing</span>(pointcut=<span class="string">"execution(* com.helloworld.spring.aop.*.*(..))"</span>, throwing=<span class="string">"e"</span>) </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">(JoinPoint joinPoint, Exception e)</span></span>&#123;</div><div class="line">String methodName = joinPoint.getSignature().getName();</div><div class="line">System.out.println(<span class="string">"The method "</span> + methodName + <span class="string">" occurs excetion:"</span> + e);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 环绕通知，功能最为强大的, 能够全面地控制连接点. 甚至可以控制是否执行连接点</span></div><div class="line">   <span class="comment">// 必须显示调用ProceedingJoinPoint对象的proceed方法执行被代理的目标方法，并将结果返回。</span></div><div class="line"><span class="meta">@Around</span>(<span class="string">"execution(public int com.atguigu.spring.aop.ArithmeticCalculator.*(..))"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">aroundMethod</span><span class="params">(ProceedingJoinPoint pjd)</span></span>&#123;</div><div class="line"></div><div class="line">Object result = <span class="keyword">null</span>;</div><div class="line">String methodName = pjd.getSignature().getName();</div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"><span class="comment">//前置通知</span></div><div class="line">System.out.println(<span class="string">"The method "</span> + methodName + <span class="string">" begins with "</span> + Arrays.asList(pjd.getArgs()));</div><div class="line"><span class="comment">//执行目标方法</span></div><div class="line">result = pjd.proceed();</div><div class="line"><span class="comment">//返回通知</span></div><div class="line">System.out.println(<span class="string">"The method "</span> + methodName + <span class="string">" ends with "</span> + result);</div><div class="line">&#125; <span class="keyword">catch</span> (Throwable e) &#123;</div><div class="line"><span class="comment">//异常通知</span></div><div class="line">System.out.println(<span class="string">"The method "</span> + methodName + <span class="string">" occurs exception:"</span> + e);</div><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</div><div class="line">&#125;</div><div class="line"><span class="comment">//后置通知</span></div><div class="line">System.out.println(<span class="string">"The method "</span> + methodName + <span class="string">" ends"</span>);</div><div class="line"></div><div class="line"><span class="keyword">return</span> result;  <span class="comment">// 必须返回目标方法的结果</span></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>​</p></li><li><p>切入点表达式支持通配符，多个表达式可以通过操作符<code>&amp;&amp;, ||, !</code>结合起来. </p></li><li><p>切入点表达式重用，用@Pointcut(“切入点表达式”)声明一个切入点的空方法，通知注解的pointcut属性传入该方法的调用。</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180410/aB0Hk3fAfd.png?imageslim" alt="mark"></p></li><li><p>连接点对象JoinPoint，可以让Advice的方法访问连接点的细节.@Around环绕通知使用的是ProceedingJoinPoint。</p><p><strong>通过XML配置AOP</strong></p><p>xml是由spring支持的，而注解则是AspctJ实现的，且AspectJ被很多AOP框架支持，应优先考虑用注解。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 配置切面的 bean. --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"loggingAspect"</span></span></div><div class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"com.helloworld.aspect.LoggingAspect"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"vlidationAspect"</span></span></div><div class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"com.helloworld.aspect.VlidationAspect"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 配置 AOP --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 配置切点表达式 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* com.helloworld.UserService.*(..))"</span> </span></div><div class="line"><span class="tag"><span class="attr">id</span>=<span class="string">"pointcut"</span>/&gt;</span></div><div class="line"><span class="comment">&lt;!-- 配置切面及通知 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"loggingAspect"</span> <span class="attr">order</span>=<span class="string">"2"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"beforeMethod"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"afterMethod"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">"afterThrowing"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span> <span class="attr">throwing</span>=<span class="string">"e"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">"afterReturning"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span> <span class="attr">returning</span>=<span class="string">"result"</span>/&gt;</span></div><div class="line"><span class="comment">&lt;!--  </span></div><div class="line"><span class="comment">&lt;aop:around method="aroundMethod" pointcut-ref="pointcut"/&gt;</span></div><div class="line"><span class="comment">--&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- 同一切点执行多个切面通知时，可以指定执行顺序 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"vlidationAspect"</span> <span class="attr">order</span>=<span class="string">"1"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"validateArgs"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></div></pre></td></tr></table></figure><p>​</p></li></ul><h2 id="JdbcTemplate"><a href="#JdbcTemplate" class="headerlink" title="JdbcTemplate"></a>JdbcTemplate</h2><p>spring对原始的jdbc api提供了封装。</p><ul><li><p>注入方式，在DAO中注入jdbcTemplate对象。</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180410/0im14A43Ka.png?imageslim" alt="mark"></p></li><li><p>支持批量更新、插入、删除，查询；sql语句可以使用具名参数，如map集合进行参数绑定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 查询一个</span></div><div class="line">String sql = <span class="string">"SELECT id, last_name lastName, email, dept_id as \"department.id\" FROM employees WHERE id = ?"</span>;</div><div class="line">RowMapper&lt;Employee&gt; rowMapper = <span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(Employee.class);</div><div class="line">Employee employee = jdbcTemplate.queryForObject(sql, rowMapper, <span class="number">1</span>);</div><div class="line"><span class="comment">// 查询多个</span></div><div class="line">String sql = <span class="string">"SELECT id, last_name lastName, email FROM employees WHERE id &gt; ?"</span>;</div><div class="line">RowMapper&lt;Employee&gt; rowMapper = <span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(Employee.class);</div><div class="line">List&lt;Employee&gt; employees = jdbcTemplate.query(sql, rowMapper,<span class="number">5</span>);</div><div class="line"></div><div class="line">List&lt;Object[]&gt; batchObjs = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">batchObjs.add(<span class="keyword">new</span> Object[]&#123;<span class="string">"AA"</span>, <span class="string">"aa@atguigu.com"</span>, <span class="number">1</span>&#125;);</div><div class="line">batchObjs.add(<span class="keyword">new</span> Object[]&#123;<span class="string">"BB"</span>, <span class="string">"bb@atguigu.com"</span>, <span class="number">2</span>&#125;);</div><div class="line">batchObjs.add(<span class="keyword">new</span> Object[]&#123;<span class="string">"CC"</span>, <span class="string">"cc@atguigu.com"</span>, <span class="number">3</span>&#125;);</div><div class="line">batchObjs.add(<span class="keyword">new</span> Object[]&#123;<span class="string">"DD"</span>, <span class="string">"dd@atguigu.com"</span>, <span class="number">3</span>&#125;);</div><div class="line">batchObjs.add(<span class="keyword">new</span> Object[]&#123;<span class="string">"EE"</span>, <span class="string">"ee@atguigu.com"</span>, <span class="number">2</span>&#125;);</div><div class="line"><span class="comment">// 批量更新</span></div><div class="line">String sql = <span class="string">"INSERT INTO employees(last_name, email, dept_id) VALUES(?,?,?)"</span>;</div><div class="line">jdbcTemplate.batchUpdate(sql, batchObjs);</div></pre></td></tr></table></figure><p>​</p></li></ul><h2 id="spring事务管理"><a href="#spring事务管理" class="headerlink" title="spring事务管理"></a>spring事务管理</h2><p><strong>事务的关键性质</strong>：</p><ul><li>原子性：单独的最小工作单元，要么全部动作都执行成功，否则就都不起作用。</li><li>一致性：事务动作完成，一旦事务被提交，数据就会保持一致。</li><li>隔离性：多个事务处理相同数据的行为表现</li><li>持久性： 已经完成的事务结果应被持久化</li></ul><p><strong>实现方式</strong></p><p>AOP 提供了声明式的事务管理, Spring 实现了事务管理器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 1. 配置事务管理器 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 2. 配置事务属性 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 根据方法名指定事务的属性 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"purchase"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRES_NEW"</span>/&gt;</span> <span class="comment">&lt;!-- 事务传播属性为新建事务 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 3. 配置事务切入点, 以及把事务切入点和事务属性关联起来 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* com.helloworld.dao.*.*(..))"</span> </span></div><div class="line"><span class="tag">                <span class="attr">id</span>=<span class="string">"txPointCut"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"txPointCut"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 直接在类或共有方法上使用@Transactional注解更方便  ---&gt;</span></div><div class="line"><span class="comment">&lt;!-- 需要开启事务注解支持，并配置事务管理器 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span>/&gt;</span></div></pre></td></tr></table></figure><p>或者，用@Transactional 注解声明式地管理事务。在方法或者类级别上添加 @Transactional 注解，只有public属性的方法才会应用事务管理。然后还要在配置中显示声明 <code>&lt;tx:annotation-driven&gt;</code>,并为其指定事务管理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Transactional</span>(propagation = Propagation.REQUIRES_NEW, isolation = Isolation.READ_COMMITTED)</div><div class="line"><span class="function"><span class="keyword">public</span> Boolean <span class="title">delete</span><span class="params">(Person b)</span></span>&#123;</div><div class="line">        <span class="comment">// 数据操作相关代码</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>事务的传播属性</strong></p><p>默认为REQUIRED，使用当前的事务。REQUIRED_NEW，挂起当前事务，并开辟新的事务。</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180410/DJ80iAEAfd.png?imageslim" alt="mark"></p><p><strong>事务隔离级别</strong></p><p>并发处理事务时，容易导致：</p><ul><li>脏读(读到别人更新的数据，但是别人事务失败对数据进行回滚)</li><li>不可重复读：先后访问同一数据，由于A的更新导致B读到了非原始数据。</li><li>幻读： A事务读后，B事务增加了新的记录。A再次读取就会多出n条记录。</li></ul><p>因此需要事务隔离。原则上完全隔离最好，但是没有并发，性能极低。</p><p>Spring 支持的事务隔离级别：</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180410/a0dfgLga8E.png?imageslim" alt="mark"></p><p>还可以设置 回滚、不会滚、只读、超时属性。</p><ul><li>回滚： 指定的异常回滚</li><li>不回滚： 指定的异常不回滚</li><li>只读：表示这个事务只读取数据但不更新数据, 这样可以帮助数据库引擎优化事务。</li><li>超时：以秒位单位，超时回滚，避免长期占用资源。</li></ul><h1 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h1><h2 id="IOC容器"><a href="#IOC容器" class="headerlink" title="IOC容器"></a>IOC容器</h2><ol><li><p>在web容器初始化时加载spring IOC容器，指定配置文件。然后将其绑定到web容器（ServletContext）的一个属性上。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- IOC配置文件位置 --&gt;</span>    </div><div class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span></div><div class="line">            classpath:META-INF/applicationContext.xml</div><div class="line">        <span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 监听器，初始化spring --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>获取IOC容器的方法</p><p><code>WebApplicationContext ctx = WebApplicationContextUtils.getWebApplicationContext(servletContext);</code></p></li><li><p>​</p></li></ol><h2 id="Servlet拦截"><a href="#Servlet拦截" class="headerlink" title="Servlet拦截"></a>Servlet拦截</h2><ol><li><p>创建一个web项目</p></li><li><p>在<code>web.xml</code>配置使用spring 调度servlet类<code>org.springframework.web.servlet.DispatcherServlet</code>处理全部的Servlet请求。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span></div><div class="line">      org.springframework.web.servlet.DispatcherServlet</div><div class="line">    <span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>Spring bean的配置文件，定义servlet类，定义URL与Servlet类的映射关系。</p><p>配置文件的名字和web.xml中的servlet name相关。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"indexController"</span> <span class="attr">class</span>=<span class="string">"controller.IndexController"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"simpleUrlHandlerMapping"</span></span></div><div class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappings"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"/index"</span>&gt;</span>indexController<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>控制类,实现controller接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.Controller;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        ModelAndView mav = <span class="keyword">new</span> ModelAndView(<span class="string">"index.jsp"</span>);</div><div class="line">        mav.addObject(<span class="string">"message"</span>, <span class="string">"Hello Spring MVC"</span>);</div><div class="line">        <span class="keyword">return</span> mav;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>​</p></li><li><p>视图</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></div><div class="line"><span class="tag">         <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span> <span class="attr">isELIgnored</span>=<span class="string">"false"</span>%&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>$&#123;message&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p>​</p></li></ol><h2 id="视图模板文件位置"><a href="#视图模板文件位置" class="headerlink" title="视图模板文件位置"></a>视图模板文件位置</h2><p>这个是可以修改的，在<code>springmvc-servlet.xml</code>中定义一个<code>viewResolver</code>的bean，指定前缀即路径文件夹，后缀即文件格式。然后将模板文件移入指定的文件夹。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/pages/"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!--&lt;property name="suffix" value=".jsp"/&gt;--&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"indexController"</span> <span class="attr">class</span>=<span class="string">"controller.IndexController"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"simpleUrlHandlerMapping"</span></span></div><div class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappings"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"/index"</span>&gt;</span>indexController<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="通过注解实现URL映射"><a href="#通过注解实现URL映射" class="headerlink" title="通过注解实现URL映射"></a>通过注解实现URL映射</h2><ul><li><p>在配置文件里使用组件扫描<code>&lt;context:component-scan base-package=&quot;controller&quot; /&gt;</code>查找有注解的类，注释掉原来的URLmapping bean。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></div><div class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></div><div class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></div><div class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context</span></span></div><div class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context-3.0.xsd"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"controller"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/pages/"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!--&lt;property name="suffix" value=".jsp"/&gt;--&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--&lt;bean id="indexController" class="controller.IndexController"/&gt;--&gt;</span></div><div class="line">    <span class="comment">&lt;!--&lt;bean id="simpleUrlHandlerMapping"--&gt;</span></div><div class="line">          <span class="comment">&lt;!--class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"&gt;--&gt;</span></div><div class="line">        <span class="comment">&lt;!--&lt;property name="mappings"&gt;--&gt;</span></div><div class="line">            <span class="comment">&lt;!--&lt;props&gt;--&gt;</span></div><div class="line">                <span class="comment">&lt;!--&lt;prop key="/index"&gt;indexController&lt;/prop&gt;--&gt;</span></div><div class="line">            <span class="comment">&lt;!--&lt;/props&gt;--&gt;</span></div><div class="line">        <span class="comment">&lt;!--&lt;/property&gt;--&gt;</span></div><div class="line">    <span class="comment">&lt;!--&lt;/bean&gt;--&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure><p>​</p></li><li><p>控制类不再继承接口，而是通过注解实现控制类和url mapping</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewIndexController</span></span>&#123;</div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/index2"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleResquest1</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(<span class="string">"index.jsp"</span>);</div><div class="line">        modelAndView.addObject(<span class="string">"message"</span>, <span class="string">"hello, index2"</span>);</div><div class="line">        <span class="keyword">return</span> modelAndView;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h2 id="SpringMVC-获取参数"><a href="#SpringMVC-获取参数" class="headerlink" title="SpringMVC 获取参数"></a>SpringMVC 获取参数</h2><ul><li><p>1、直接把表单的参数写在Controller相应的方法的形参中，适用于get方式提交，不适用于post方式提交。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/addUser1"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">addUser1</span><span class="params">(String username,String password)</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"username is:"</span>+username);</div><div class="line">    System.out.println(<span class="string">"password is:"</span>+password);</div><div class="line">    <span class="keyword">return</span> <span class="string">"demo/index"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p><strong>2、通过HttpServletRequest接收，post方式和get方式都可以</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/addUser2"</span>)</div><div class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">addUser2</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</div><div class="line">       String username=request.getParameter(<span class="string">"username"</span>);</div><div class="line">       String password=request.getParameter(<span class="string">"password"</span>);</div><div class="line">       <span class="keyword">return</span> <span class="string">"demo/index"</span>;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></li><li><p><strong>3、通过一个bean来接收,post方式和get方式都可以</strong></p><p>建立一个和表单中参数对应的bean，用一个bean作为Controller的形参，用户上传的参数会自动装载进bean里。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserModel</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> String username;</div><div class="line">    <span class="keyword">private</span> String password;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> username;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.username = username;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> password;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.password = password;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Controller方法，通过一个bean来接收</span></div><div class="line"><span class="comment">      * <span class="doctag">@param</span> user</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/addUser3"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUser3</span><span class="params">(UserModel user)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"username is:"</span>+user.getUsername());</div><div class="line">        System.out.println(<span class="string">"password is:"</span>+user.getPassword());</div><div class="line">        <span class="keyword">return</span> <span class="string">"demo/index"</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></li><li><p>4、获取URL路径参数</p><p>URL中模板变量{username}和{password}绑定到通过@PathVariable注解的同名参数上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/addUser4/&#123;username&#125;/&#123;password&#125;"</span>,method=RequestMethod.GET)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">addUser4</span><span class="params">(@PathVariable String username,@PathVariable String password)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"username is:"</span>+username);</div><div class="line">        System.out.println(<span class="string">"password is:"</span>+password);</div><div class="line">        <span class="keyword">return</span> <span class="string">"demo/index"</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></li><li><p><strong>5、使用@ModelAttribute注解获取POST请求的FORM表单数据</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/addUser5"</span>,method=RequestMethod.POST)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUser5</span><span class="params">(@ModelAttribute(<span class="string">"user"</span>)</span> UserModel user) </span>&#123;</div><div class="line">        System.out.println(<span class="string">"username is:"</span>+user.getUsername());</div><div class="line">        System.out.println(<span class="string">"password is:"</span>+user.getPassword());</div><div class="line">        <span class="keyword">return</span> <span class="string">"demo/index"</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></li><li><p><strong>6、用注解@RequestParam绑定请求参数到方法入参</strong></p><p>当请求参数username不存在时会有异常发生,可以通过设置属性required=false解决,例如: @RequestParam(value=”username”, required=false)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/addUser6"</span>,method=RequestMethod.GET)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">addUser6</span><span class="params">(@RequestParam(<span class="string">"username"</span>)</span> String username,@<span class="title">RequestParam</span><span class="params">(<span class="string">"password"</span>)</span> String password) </span>&#123;</div><div class="line">    System.out.println(<span class="string">"username is:"</span>+username);</div><div class="line">    System.out.println(<span class="string">"password is:"</span>+password);</div><div class="line">    <span class="keyword">return</span> <span class="string">"demo/index"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>​</p></li></ul><h2 id="中文编码处理"><a href="#中文编码处理" class="headerlink" title="中文编码处理"></a>中文编码处理</h2><p> 在<code>web.xml</code>中注册一个处理编码的filter类，spring中提供了<code>CharacterEncodingFilter</code>类。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="浏览器页面跳转"><a href="#浏览器页面跳转" class="headerlink" title="浏览器页面跳转"></a>浏览器页面跳转</h2><p>redirect</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewIndexController</span></span>&#123;</div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/index2"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleResquest1</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(<span class="string">"index.jsp"</span>);</div><div class="line">        modelAndView.addObject(<span class="string">"message"</span>, <span class="string">"hello, index2"</span>);</div><div class="line">        <span class="keyword">return</span> modelAndView;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/jump"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">jump</span> <span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span>&#123;</div><div class="line">        ModelAndView indexView = <span class="keyword">new</span> ModelAndView(<span class="string">"redirect:/index2"</span>);</div><div class="line">        <span class="keyword">return</span> indexView;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="访问Session"><a href="#访问Session" class="headerlink" title="访问Session"></a>访问Session</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/count"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">count</span> <span class="params">(HttpSession session)</span></span>&#123;</div><div class="line">    Integer count = (Integer) session.getAttribute(<span class="string">"count"</span>);</div><div class="line">    <span class="keyword">if</span>(count == <span class="keyword">null</span>) count = <span class="number">0</span>;</div><div class="line">    count++;</div><div class="line">    session.setAttribute(<span class="string">"count"</span>, count);</div><div class="line">    ModelAndView mav = <span class="keyword">new</span> ModelAndView(<span class="string">"redirect:/index2"</span>);</div><div class="line">    <span class="keyword">return</span> mav;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/clearcount"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">clearCount</span> <span class="params">(HttpSession session)</span></span>&#123;</div><div class="line">    session.setAttribute(<span class="string">"count"</span>, <span class="number">0</span>);</div><div class="line">    ModelAndView mav = <span class="keyword">new</span> ModelAndView(<span class="string">"redirect:/index2"</span>);</div><div class="line">    <span class="keyword">return</span> mav;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a>上传图片</h2><ul><li><p>配置web.xml允许访问*.jpg</p><p>由于springmvc的servlet拦截器的匹配规则是<code>/</code>,导致静态资源无法访问。如果匹配的是“/*.action”这种形式就没问题。</p><p>因此必须在springmvc的servlet拦截器之前配置一个或多个default servlet，允许访问指定类型的资源。</p></li><li><p>配置springmvc-servlet.xml</p><p>spring web提供了对上传功能的支持。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"utf-8"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"10485760000"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxInMemorySize"</span> <span class="attr">value</span>=<span class="string">"40960"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure><p>​</p></li><li><p>form上传表单</p><p>form 的两个属性必须提供<br><code>method=&quot;post&quot;</code> 和<code>enctype=&quot;multipart/form-data&quot;</code> 缺一不可<br>上传组件 增加一个属性 accept=”image/<em>“ 表示只能选择图片进行上传<br>`&lt;input type=”file” name=”image” accept=”image/</em>“ /&gt;`</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> <span class="attr">action</span>=<span class="string">"uploadimage"</span>&gt;</span></div><div class="line">      姓名：  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">      上传图片： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">accept</span>=<span class="string">"image/*"</span> <span class="attr">name</span>=<span class="string">"image"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"上传图片"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/image/$&#123;image_url&#125;"</span> <span class="attr">alt</span>=<span class="string">"哈哈哈！"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p>​</p></li><li><p>UploadedImageFile</p><p>在UploadedImageFile pojo类中封装MultipartFile类型的字段 image ，用于接受页面的文件对象注入<br>这里的字段命名 image必须和上传表单的image域的name值保持一致。</p><p>使用pojo类也可以同时接收form里的非file字段。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadedImageFile</span> </span>&#123;</div><div class="line">    MultipartFile image;</div><div class="line">    String name;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> MultipartFile <span class="title">getImage</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> image;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setImage</span><span class="params">(MultipartFile image)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.image = image;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>​</p></li><li><p>上传控制方法</p><p>准备方法upload方法 映射上传路径<code>/uploadImage</code>,方法的第二个参数UploadedImageFile 中已经注入好了 image，为文件准备一个随机名，然后保存。根据<code>request.getServletContext().getRealPath</code>获取到web目录下的image目录，用于存放上传后的文件。<br>调用<code>file.getImage().transferTo(newFile);</code>复制文件<br> 把生成的随机文件名提交给视图，用于后续的显示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/uploadimage"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">upload</span><span class="params">(HttpServletRequest request, UploadeImageFile file)</span></span></div><div class="line"><span class="function">        <span class="keyword">throws</span> IllegalStateException, IOException </span>&#123;</div><div class="line">    String name = RandomStringUtils.randomAlphanumeric(<span class="number">10</span>);</div><div class="line">    String newFileName = name + <span class="string">".jpg"</span>;</div><div class="line">    File newFile = <span class="keyword">new</span> File(request.getServletContext().getRealPath(<span class="string">"/image"</span>), newFileName);</div><div class="line">    newFile.getParentFile().mkdirs();</div><div class="line">    System.out.println(file.getName());</div><div class="line">    file.getImage().transferTo(newFile);</div><div class="line"></div><div class="line">    ModelAndView mav = <span class="keyword">new</span> ModelAndView(<span class="string">"index.jsp"</span>);</div><div class="line">    mav.addObject(<span class="string">"image_url"</span>, newFileName);</div><div class="line">    mav.addObject(<span class="string">"name"</span>, file.getName());</div><div class="line">    <span class="keyword">return</span> mav;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>​</p></li><li><p>显示图片 `&lt; img src=”/image/${image_url}”&gt;</p></li></ul><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>类似servlet中的filter。用于实现日志、登录检测等需要预处理和后处理的地方。</p><p><strong>preHandle：</strong>预处理回调方法，实现预处理如登录检查；  返回值true表示继续流程, 如调用下一个拦截器或处理器; false表示流程中断，不会继续调用其他的拦截器或处理器，此时我们需要通过response来产生响应；</p><p><strong>postHandle：</strong>后处理回调方法，实现处理器的后处理（但在渲染视图之前），此时我们可以通过modelAndView对模型数据进行处理或对视图进行处理，modelAndView也可能为null。</p><p><strong>afterCompletion：</strong>整个请求处理完毕回调方法，即在视图渲染完毕时回调，如性能监控中我们可以在此记录结束时间并输出消耗时间，还可以进行一些资源清理，类似于try-catch-finally中的finally。</p><ul><li><p>实现Interceptor类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.handler.HandlerInterceptorAdapter;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//1、请求到登录页面 放行</span></div><div class="line">        <span class="keyword">if</span>(request.getServletPath().startsWith(<span class="string">"/login"</span>)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//2、TODO 比如退出、首页等页面无需登录，即此处要放行 允许游客的请求</span></div><div class="line"></div><div class="line">        <span class="comment">//3、如果用户已经登录 放行</span></div><div class="line">        <span class="keyword">if</span>(request.getSession().getAttribute(<span class="string">"username"</span>) != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">//更好的实现方式的使用cookie</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//4、非法请求 即这些请求需要登录后才能访问</span></div><div class="line">        <span class="comment">//重定向到登录页面</span></div><div class="line">        response.sendRedirect(request.getContextPath() + <span class="string">"/login"</span>);</div><div class="line">        System.out.println(<span class="string">"未登录！"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 在业务处理器处理请求执行完成后,生成视图之前执行的动作</span></div><div class="line"><span class="comment">     * 可在modelAndView中加入数据，比如当前时间</span></div><div class="line"><span class="comment">     */</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request,</span></span></div><div class="line"><span class="function"><span class="params">                           HttpServletResponse response, Object handler,</span></span></div><div class="line"><span class="function"><span class="params">                           ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        System.out.println(<span class="string">"postHandle(), 在访问Controller之后，访问视图之前被调用,这里可以注入一个时间到modelAndView中，用于后续视图显示"</span>);</div><div class="line">        modelAndView.addObject(<span class="string">"date"</span>,<span class="string">"由拦截器生成的时间:"</span> + <span class="keyword">new</span> Date());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 在DispatcherServlet完全处理完请求后被调用,可用于清理资源等</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * 当有拦截器抛出异常时,会从当前拦截器往回执行所有的拦截器的afterCompletion()</span></div><div class="line"><span class="comment">     */</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request,</span></span></div><div class="line"><span class="function"><span class="params">                                HttpServletResponse response, Object handler, Exception ex)</span></span></div><div class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        System.out.println(<span class="string">"afterCompletion(), 在访问视图之后被调用"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>​</p></li></ul><ul><li><p>配置interceptors</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/index2"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"interceptor.LoginInterceptor"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 当设置多个拦截器时，先按顺序调用preHandle方法，然后逆序调用每个拦截器的postHandle和afterCompletion方法 --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></div></pre></td></tr></table></figure><p>​</p></li></ul><h1 id="Spring-Struct2"><a href="#Spring-Struct2" class="headerlink" title="Spring Struct2"></a>Spring Struct2</h1><p>使用IOC容器管理struct2的action</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring-Hello-World&quot;&gt;&lt;a href=&quot;#Spring-Hello-World&quot; class=&quot;headerlink&quot; title=&quot;Spring Hello World&quot;&gt;&lt;/a&gt;Spring Hello World&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; Spring 是一个IOC(DI) 和AOP 容器框架&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;IOC-DI&quot;&gt;&lt;a href=&quot;#IOC-DI&quot; class=&quot;headerlink&quot; title=&quot;IOC/DI&quot;&gt;&lt;/a&gt;IOC/DI&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;两个概念&lt;/strong&gt;（其实是不同的角度） &lt;/p&gt;
&lt;p&gt;控制反转：对象实例由spring通过配置创建，而不是程序员主动new构造。&lt;/p&gt;
&lt;p&gt;依赖注入：拿到的对象实例可以直接使用，其定义在配置文件的属性值在实例化时已被注入。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;创建一个pojo类，&lt;em&gt;POJO&lt;/em&gt;（Plain Ordinary Java Object）简单的Java对象，实际就是普通JavaBeans。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Category&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; id;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setId&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; id)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.id = id;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String name)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; id;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Java" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/Java/"/>
    
      <category term="Spring" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/Java/Spring/"/>
    
    
      <category term="Java" scheme="http://shuaiyy.cn/tags/Java/"/>
    
      <category term="Spring" scheme="http://shuaiyy.cn/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Maven入门</title>
    <link href="http://shuaiyy.cn/2018/02/20/%E6%8A%80%E6%9C%AF/Maven%E5%85%A5%E9%97%A8/"/>
    <id>http://shuaiyy.cn/2018/02/20/技术/Maven入门/</id>
    <published>2018-02-19T16:00:00.000Z</published>
    <updated>2018-06-03T08:12:39.077Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用Maven"><a href="#使用Maven" class="headerlink" title="使用Maven"></a>使用Maven</h1><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><ul><li><p>下载，解压，配置环境变量</p></li><li><p>配置仓库(repository)：本地存放位置，远程下载镜像</p><p>修改到D盘，以免重装系统时丢失。mirror使用阿里云，在<code>conf/settings.xml</code>下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">  <span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>d:/maven/repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/repositories/central/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></div></pre></td></tr></table></figure><p>​</p></li><li><p>maven使用<code>pom.xml</code>维护项目依赖的jar</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>IDEA中配置maven</p><p>settings -&gt; build tools -&gt; maven</p><p>配置maven所在的路径，及其user settings文件。</p><p>file -》 other settings  -》default settings -》  build tools 下设置默认的maven</p><a id="more"></a></li></ul><h2 id="IDEA创建项目"><a href="#IDEA创建项目" class="headerlink" title="IDEA创建项目"></a>IDEA创建项目</h2><p>IDEA创建maven项目速度慢，1）修改源为阿里云；2）创建项目时添加参数<code>DarchetypeCatalog=internal</code>,或者在maven VM options添加。</p><ol><li><p>new project -》 maven</p></li><li><p>选择<code>create from archetype</code>  , archetype 即“原型、原始型”</p></li><li><p>选中需要的原型后，next</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180321/ALH4Id1fHg.png?imageslim" alt="mark"></p></li><li><p>填写groupID 项目组织标识，对应包结构；ArtifactID 项目标识，对应项目名称。</p></li><li><p>初始化之后，会有import change提示，每当maven项目或pom文件改变都要import change。</p></li></ol><h2 id="IDEA-maven增加jar包"><a href="#IDEA-maven增加jar包" class="headerlink" title="IDEA maven增加jar包"></a>IDEA maven增加jar包</h2><p><strong>快速搜索、定位jar包</strong></p><blockquote><p> 必须先要定位一个jar才能引用，<code>groupId,artifacatId,version</code></p></blockquote><p>打开project structure -》 Libraries -》 +  -》 from Maven ：</p><p>输入关键词搜索，选中确认，然后在项目结构的外部依赖找到该包，在maven pom中引用。</p><p>也可以不引入，直接复制包名，然后在maven pom中添加依赖。</p><p><strong>在maven中引入依赖</strong></p><ol><li><p>在<code>pom.xml</code>中添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>执行maven import， 可以让IDEA自动import</p></li></ol><p><strong>包依赖关系</strong></p><p>在窗口右侧的maven工具栏可以查看, 按住Alt 后单击，可以用放大镜查看依赖图。</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180321/5BmIGH08aC.png?imageslim" alt="mark"></p><h2 id="创建Maven-web项目"><a href="#创建Maven-web项目" class="headerlink" title="创建Maven web项目"></a>创建Maven web项目</h2><ul><li><p>create from archetype， 选中<code>org.apache.maven.archetypes:maven-archetype-webapp</code></p></li><li><p>maven web项目默认没有源码目录，新建一个源代码文件夹，然后mark as source root</p></li><li><p>右键 new , 可以选择创建servlet、filter、listener。</p><p>如果没有servlet选项，更新项目的<code>.iml</code>文件，sourceRoots下添加源码目录。</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180321/KKme0BG9ik.png?imageslim" alt="mark"></p></li><li><p>在pom中添加servlet依赖</p></li><li><p>在web.xml中配置路由</p></li><li><p>run configure下添加Tomcat服务器，启动测试。</p></li></ul><h2 id="创建SSM项目"><a href="#创建SSM项目" class="headerlink" title="创建SSM项目"></a>创建SSM项目</h2><ol><li>创建maven web项目</li></ol><h2 id="导入SSM项目"><a href="#导入SSM项目" class="headerlink" title="导入SSM项目"></a>导入SSM项目</h2><p>File-&gt;New-&gt;Project from existing sources 输入<code>pom.xml</code>文件的路径即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用Maven&quot;&gt;&lt;a href=&quot;#使用Maven&quot; class=&quot;headerlink&quot; title=&quot;使用Maven&quot;&gt;&lt;/a&gt;使用Maven&lt;/h1&gt;&lt;h2 id=&quot;配置环境&quot;&gt;&lt;a href=&quot;#配置环境&quot; class=&quot;headerlink&quot; title=&quot;配置环境&quot;&gt;&lt;/a&gt;配置环境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;下载，解压，配置环境变量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;配置仓库(repository)：本地存放位置，远程下载镜像&lt;/p&gt;
&lt;p&gt;修改到D盘，以免重装系统时丢失。mirror使用阿里云，在&lt;code&gt;conf/settings.xml&lt;/code&gt;下&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;localRepository&lt;/span&gt;&amp;gt;&lt;/span&gt;d:/maven/repository&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;localRepository&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;mirrors&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;mirror&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;alimaven&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;mirrorOf&lt;/span&gt;&amp;gt;&lt;/span&gt;central&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;mirrorOf&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;aliyun maven&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;url&lt;/span&gt;&amp;gt;&lt;/span&gt;http://maven.aliyun.com/nexus/content/repositories/central/&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;url&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;mirror&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;mirrors&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;maven使用&lt;code&gt;pom.xml&lt;/code&gt;维护项目依赖的jar&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;mysql&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;mysql-connector-java&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;5.1.20&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;IDEA中配置maven&lt;/p&gt;
&lt;p&gt;settings -&amp;gt; build tools -&amp;gt; maven&lt;/p&gt;
&lt;p&gt;配置maven所在的路径，及其user settings文件。&lt;/p&gt;
&lt;p&gt;file -》 other settings  -》default settings -》  build tools 下设置默认的maven&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Java" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/Java/"/>
    
      <category term="Maven" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/Java/Maven/"/>
    
    
      <category term="Java" scheme="http://shuaiyy.cn/tags/Java/"/>
    
      <category term="Maven" scheme="http://shuaiyy.cn/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis入门</title>
    <link href="http://shuaiyy.cn/2018/02/18/%E6%8A%80%E6%9C%AF/Mybatis%E5%85%A5%E9%97%A8/"/>
    <id>http://shuaiyy.cn/2018/02/18/技术/Mybatis入门/</id>
    <published>2018-02-17T16:00:00.000Z</published>
    <updated>2018-06-03T08:11:26.959Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h1><p>MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。</p><p>Python Django的ORM框架提供了增删改查接口， mybatis必须要手动配置SQL语句。</p><p><a href="http://www.mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="external">官方文档</a></p><h2 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h2><ul><li><p>创建表和数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">USE how2java;</div><div class="line"> </div><div class="line">CREATE TABLE category_ (</div><div class="line">  id int(11) NOT NULL AUTO_INCREMENT,</div><div class="line">  name varchar(32) DEFAULT NULL,</div><div class="line">  PRIMARY KEY (id)</div><div class="line">) ENGINE=MyISAM AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;</div><div class="line"></div><div class="line">INSERT INTO category_ VALUES (null,&apos;category1&apos;);</div><div class="line">INSERT INTO category_ VALUES (null,&apos;category2&apos;);</div></pre></td></tr></table></figure></li><li><p>创建对应的pojo对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.how2java.pojo;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Category</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul>  <a id="more"></a><ul><li><p>配置文件<code>mybatis-config.xml</code></p><ol><li>配置数据库连接驱动、数据库名，用户密码，编码方式等</li><li>typeAliases， 类型-别名，在后面的配置中可以不必使用类的完整名字</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- 配置包或对象的别名，以简化全类名的书写 --&gt;</span>  </div><div class="line">      <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.how2java.pojo"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"db.properties"</span>/&gt;</span> <span class="comment">&lt;!-- 可以将一些配置单独文件，然后引用变量 $&#123;var&#125; --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/how2java?characterEncoding=UTF-8"</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- mapper配置文件 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/how2java/pojo/Category.xml"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/how2java/pojo/Product.xml"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>创建类到数据操作的映射<code>Category.xml</code>,实现增删改查，模糊查询等操作。</p><p>注意：id用于mybatis session对象调用SQL语句， parameterType为入参类型， resultType为执行结果类型</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE mapper</span></div><div class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></div><div class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.how2java.pojo"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 增删改查 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addCategory"</span> <span class="attr">parameterType</span>=<span class="string">"Category"</span>&gt;</span></div><div class="line">        insert into category_ ( name ) values (#&#123;name&#125;)</div><div class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteCategory"</span> <span class="attr">parameterType</span>=<span class="string">"Category"</span> &gt;</span></div><div class="line">        delete from category_ where id= #&#123;id&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getCategory"</span> <span class="attr">parameterType</span>=<span class="string">"_int"</span> <span class="attr">resultType</span>=<span class="string">"Category"</span>&gt;</span></div><div class="line">        select * from   category_  where id= #&#123;id&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateCategory"</span> <span class="attr">parameterType</span>=<span class="string">"Category"</span> &gt;</span></div><div class="line">        update category_ set name=#&#123;name&#125; where id=#&#123;id&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 查询全部 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"listCategory"</span> <span class="attr">resultType</span>=<span class="string">"Category"</span>&gt;</span></div><div class="line">        select * from   category_</div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 模糊查询 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"listCategoryByName"</span> <span class="attr">resultType</span>=<span class="string">"Category"</span>&gt;</span></div><div class="line">        select * from category_ WHERE  name like concat('%',#&#123;0&#125;,'%')</div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 多条件查询 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"listCategoryByIdAndName"</span>  <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"Category"</span>&gt;</span></div><div class="line">        select * from   category_  where id &gt; #&#123;id&#125;  and name like concat('%',#&#123;name&#125;,'%')</div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>TestMybatis.java</p><ol><li>载入mybatis配置文件</li><li>创建sqlsession</li><li>执行操作</li><li>提交、关闭会话</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMybatis</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        String resource = <span class="string">"mybatis-config.xml"</span>;</div><div class="line">        InputStream inputStream = Resources.getResourceAsStream(resource);</div><div class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</div><div class="line">        SqlSession session=sqlSessionFactory.openSession();</div><div class="line">        </div><div class="line">        Category c1 = <span class="keyword">new</span> Category();</div><div class="line">        c1.setName(<span class="string">"new Category"</span>);</div><div class="line">        session.insert(<span class="string">"addCategory"</span>, c1);</div><div class="line">        session.commit();</div><div class="line">        session.close();</div></pre></td></tr></table></figure><p>​</p></li></ul><h2 id="对象关系"><a href="#对象关系" class="headerlink" title="对象关系"></a>对象关系</h2><blockquote><p> 通过resultMap建立映射，sql查询的列与Java pojo对象的属性对应。</p></blockquote><ul><li><p>一对一</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- </span></div><div class="line"><span class="comment">方式一：嵌套结果：使用嵌套结果映射来处理重复的联合结果的子集</span></div><div class="line"><span class="comment">         封装联表查询的数据(去除重复的数据)</span></div><div class="line"><span class="comment">select * from class c, teacher t where c.teacher_id=t.t_id and  c.c_id=1</span></div><div class="line"><span class="comment">--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getClass"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultMap</span>=<span class="string">"ClassResultMap"</span>&gt;</span></div><div class="line">select * from class c, teacher t where c.teacher_id=t.t_id and  c.c_id=#&#123;id&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"_Classes"</span> <span class="attr">id</span>=<span class="string">"ClassResultMap"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"c_id"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"c_name"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"teacher"</span> <span class="attr">column</span>=<span class="string">"teacher_id"</span> <span class="attr">javaType</span>=<span class="string">"_Teacher"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"t_id"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"t_name"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">association</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- </span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">方式二：嵌套查询：通过执行另外一个 SQL 映射语句来返回预期的复杂类型</span></div><div class="line"><span class="comment">SELECT * FROM class WHERE c_id=1;</span></div><div class="line"><span class="comment">SELECT * FROM teacher WHERE t_id=1 //1 是上一个查询得到的 teacher_id 的值</span></div><div class="line"><span class="comment">--&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getClass2"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultMap</span>=<span class="string">"ClassResultMap2"</span>&gt;</span></div><div class="line">select * from class where c_id=#&#123;id&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"_Classes"</span> <span class="attr">id</span>=<span class="string">"ClassResultMap2"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"c_id"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"c_name"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"teacher"</span> <span class="attr">column</span>=<span class="string">"teacher_id"</span> <span class="attr">javaType</span>=<span class="string">"_Teacher"</span> </span></div><div class="line"><span class="tag"><span class="attr">select</span>=<span class="string">"getTeacher"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">association</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getTeacher"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"_Teacher"</span>&gt;</span></div><div class="line">SELECT t_id id, t_name name FROM teacher WHERE t_id=#&#123;id&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure><p>​</p></li><li><p>一对多</p><ol><li>p.cid： 一个product对应一个category</li><li>List products: 一个category对应多个商品</li><li>取到一个category，然后可以获取其全部的product</li><li>使用left join查询category及其对应的全部product</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Category.xml --&gt;</span>  </div><div class="line"><span class="comment">&lt;!-- 通过Left Join多表联合查询 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"categoryBean"</span> <span class="attr">type</span>=<span class="string">"Category"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"cid"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"cname"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></div><div class="line">  <span class="comment">&lt;!--一对多映射, 属性products为collection类型，集合元素为Product类型--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"products"</span> <span class="attr">ofType</span>=<span class="string">"Product"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"pid"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"pname"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"price"</span> <span class="attr">property</span>=<span class="string">"price"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 一对多查询 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"showCategory"</span>  <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultMap</span>=<span class="string">"categoryBean"</span>&gt;</span></div><div class="line">        select c.*, p.*, c.id cid, c.name cname, p.id pid, p.name pname</div><div class="line">        from category_ c LEFT join product_ p  ON cid = p.cid</div><div class="line">  where 1=1 and cid=#&#123;id&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 2. 通过嵌套查询的方式 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"showCategory"</span>  <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultMap</span>=<span class="string">"categoryBean"</span>&gt;</span></div><div class="line">        select *</div><div class="line">        from category_ where id = #&#123;id&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"categoryBean"</span> <span class="attr">type</span>=<span class="string">"Category"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></div><div class="line">  <span class="comment">&lt;!--一对多映射, 属性products为collection类型，集合元素为Product类型--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"products"</span> <span class="attr">ofType</span>=<span class="string">"Product"</span>   <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">select</span>=<span class="string">"getProduct"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"pid"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"pname"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"price"</span> <span class="attr">property</span>=<span class="string">"price"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getProduct"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>, <span class="attr">resultType</span>=<span class="string">"Product"</span>&gt;</span></div><div class="line">select * from product_ p where p.cid=#&#123;id&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure><p>​</p></li><li><p>多对一</p><ol><li>多个product 会对应一个category</li><li>取到一个product后，可以获取其对应的属性</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"Product"</span> <span class="attr">id</span>=<span class="string">"productBean"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"pid"</span> <span class="attr">property</span>=<span class="string">"id"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"pname"</span> <span class="attr">property</span>=<span class="string">"name"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"price"</span> <span class="attr">property</span>=<span class="string">"price"</span> /&gt;</span></div><div class="line">     </div><div class="line">            <span class="comment">&lt;!-- 多对一的关系 --&gt;</span></div><div class="line">            <span class="comment">&lt;!-- property: 指的是属性名称, javaType：指的是属性的类型 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"category"</span> <span class="attr">javaType</span>=<span class="string">"Category"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"cid"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"cname"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">association</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></div><div class="line">     </div><div class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"listProduct"</span> <span class="attr">resultMap</span>=<span class="string">"productBean"</span>&gt;</span></div><div class="line">            select c.*, p.*, c.id 'cid', p.id 'pid', c.name 'cname', p.name 'pname' from category_ c left join product_ p on c.id = p.cid</div><div class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure><p>​</p></li><li><p>多对多 </p><p>以订单为例，一个订单有多种product，一种product也可以出现在多张订单里。</p><p>订单项包含product id，购买数量，所属订单ID。</p><ol><li>在<code>Order.xml</code>中配置映射，以及listOrder， getOrder的查询方法</li><li>在<code>OrderItem.xml</code>中配置添加、删除订单项的SQL方法</li><li>无发使用update更新多对多的映射关系，但是可以先删除后在添加新的。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--  Order.xml --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"orderBean"</span> <span class="attr">type</span>=<span class="string">"Order"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"oid"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"code"</span> <span class="attr">property</span>=<span class="string">"code"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!--一对多映射, 属性products为collection类型，集合元素为Product类型--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"orderItems"</span> <span class="attr">ofType</span>=<span class="string">"OrderItem"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"oiid"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"number"</span> <span class="attr">property</span>=<span class="string">"number"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"number"</span> <span class="attr">property</span>=<span class="string">"number"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"product"</span> <span class="attr">javaType</span>=<span class="string">"Product"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"pid"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"pname"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"price"</span> <span class="attr">property</span>=<span class="string">"price"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">association</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"listOrder"</span> <span class="attr">resultMap</span>=<span class="string">"orderBean"</span>&gt;</span></div><div class="line">        select o.*,p.*,oi.*, o.id 'oid', p.id 'pid', oi.id 'oiid', p.name 'pname'</div><div class="line">        from order_ o</div><div class="line">        left join order_item_ oi    on o.id =oi.oid</div><div class="line">        left join product_ p on p.id = oi.pid</div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getOrder"</span> <span class="attr">resultMap</span>=<span class="string">"orderBean"</span>&gt;</span></div><div class="line">            select o.*,p.*,oi.*, o.id 'oid', p.id 'pid', oi.id 'oiid', p.name 'pname'</div><div class="line">                from order_ o</div><div class="line">                left join order_item_ oi on o.id =oi.oid</div><div class="line">                left join product_ p on p.id = oi.pid</div><div class="line">            where o.id = #&#123;id&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- OrderItem.xml --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addOrderItem"</span> <span class="attr">parameterType</span>=<span class="string">"OrderItem"</span>&gt;</span></div><div class="line">        insert into order_item_ values (null, #&#123;order.id&#125;, #&#123;product.id&#125;, #&#123;number&#125;)</div><div class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteOrderItem"</span> <span class="attr">parameterType</span>=<span class="string">"OrderItem"</span> &gt;</span></div><div class="line">        delete from order_item_ where oid= #&#123;order.id&#125; and pid = #&#123;product.id&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></div></pre></td></tr></table></figure><p>java </p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">        Order o = sess.selectOne(<span class="string">"getOrder"</span>, <span class="number">1</span>);</div><div class="line">        OrderItem oi = <span class="keyword">new</span> OrderItem();</div><div class="line">        Product p = sess.selectOne(<span class="string">"getProductById"</span>, <span class="number">1</span>);</div><div class="line"></div><div class="line">        oi.setProduct(p);</div><div class="line">        oi.setNumber(<span class="number">10</span>);</div><div class="line">        oi.setOrder(o);</div><div class="line"></div><div class="line"><span class="comment">//        sess.insert("addOrderItem", oi);</span></div><div class="line"> <span class="comment">//       sess.commit();</span></div><div class="line">        sess.delete(<span class="string">"deleteOrderItem"</span>, oi);</div><div class="line"></div><div class="line">       </div><div class="line">        o = sess.selectOne(<span class="string">"getOrder"</span>, <span class="number">1</span>);</div><div class="line">        List&lt;OrderItem&gt; ois = o.getOrderItems();</div><div class="line">        <span class="keyword">for</span> (OrderItem orderItem: ois)&#123;</div><div class="line">            System.out.println(orderItem.getProduct() + <span class="string">"###"</span> + orderItem.getNumber());</div><div class="line">        &#125;</div></pre></td></tr></table></figure><p>​</p></li></ul><h2 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h2><p>在程序中拼接SQL语句不灵活，也很痛苦，比如要注意空格和逗号，条件分支等；Mybatis提供了<a href="http://www.mybatis.org/mybatis-3/zh/dynamic-sql.html" target="_blank" rel="external">动态SQL语法</a>。</p><ul><li><p>if</p><p>一条SQL实现2种不同条件的查询</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"listProduct"</span> <span class="attr">resultType</span>=<span class="string">"Product"</span>&gt;</span></div><div class="line">            select * from product_</div><div class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name!=null"</span>&gt;</span></div><div class="line">                where name like concat('%',#&#123;name&#125;,'%')</div><div class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span>         </div><div class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>when和otherwise实现if-else</p><p>没有满足条件的when就会执行otherwise</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"listProduct"</span> <span class="attr">resultType</span>=<span class="string">"Product"</span>&gt;</span></div><div class="line">              SELECT * FROM product_ </div><div class="line">              <span class="tag">&lt;<span class="name">where</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">choose</span>&gt;</span></div><div class="line">                  <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"name != null"</span>&gt;</span></div><div class="line">                    and name like concat('%',#&#123;name&#125;,'%')</div><div class="line">                  <span class="tag">&lt;/<span class="name">when</span>&gt;</span>           </div><div class="line">                  <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"price !=null and price != 0"</span>&gt;</span></div><div class="line">                    and price &gt; #&#123;price&#125;</div><div class="line">                  <span class="tag">&lt;/<span class="name">when</span>&gt;</span>                 </div><div class="line">                  <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></div><div class="line">                    and id &gt;1</div><div class="line">                  <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></div><div class="line">              <span class="tag">&lt;/<span class="name">where</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure><p>​</p></li><li><p>where和set</p><p>if没有else分支，多条件判断时可以使用where标签，会自动处理条件中的and or关键词</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getCategory"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"Category"</span>&gt;</span></div><div class="line">        select * from   category_</div><div class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id!=null"</span>&gt;</span></div><div class="line">                AND id= #&#123;id&#125;</div><div class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name!=null"</span>&gt;</span></div><div class="line">                AND name LIKE concat("%", #&#123;name&#125;, "%")</div><div class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure><p>在update中可以使用set标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateProduct"</span> <span class="attr">parameterType</span>=<span class="string">"Product"</span> &gt;</span></div><div class="line">        update product_ </div><div class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name != null"</span>&gt;</span>name=#&#123;name&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"price != null"</span>&gt;</span>price=#&#123;price&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">              </div><div class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span>  </div><div class="line">         where id=#&#123;id&#125;    </div><div class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></div></pre></td></tr></table></figure><p>​</p></li><li><p>trim (where, set)</p></li><li><p>foreach</p><p>可以实现<code>in (a, b, c)</code>的拼装</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getProductsByIds"</span>&gt;</span></div><div class="line">        SELECT * FROM product_</div><div class="line">          where id in </div><div class="line">          <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">item</span>=<span class="string">"item"</span></span></div><div class="line"><span class="tag">           <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></div><div class="line">              #&#123;item&#125;</div><div class="line">          <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure><p>​</p></li></ul><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><h3 id="实现CRUD"><a href="#实现CRUD" class="headerlink" title="实现CRUD"></a>实现CRUD</h3><p>前面的做法是在<code>Category.xml</code>中配置类Category与SQL的映射关系<code>&lt;mapper&gt;</code></p><p>可以实现一个Mapper接口，并在接口方法上使用注解绑定SQL映射。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CategoryMapper</span> </span>&#123;</div><div class="line">    <span class="meta">@Insert</span>(<span class="string">" insert into category_ ( name ) values (#&#123;name&#125;) "</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(Category category)</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@Delete</span>(<span class="string">" delete from category_ where id= #&#123;id&#125; "</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@Select</span>(<span class="string">"select * from category_ where id= #&#123;id&#125; "</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> Category <span class="title">get</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@Update</span>(<span class="string">"update category_ set name=#&#123;name&#125; where id=#&#123;id&#125; "</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(Category category)</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@Select</span>(<span class="string">" select * from category_ "</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Category&gt; <span class="title">list</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使用时先获取mapper接口对象，然后调用CURD方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">CategoryMapper mapper = session.getMapper(CategoryMapper.class);</div><div class="line">Category c = mapper.get(<span class="number">1</span>);</div><div class="line">System.out.println(c);</div></pre></td></tr></table></figure><h3 id="对象关系-1"><a href="#对象关系-1" class="headerlink" title="对象关系"></a>对象关系</h3><ul><li><p>一对多</p><p>以Category-Product 1对多模型为例，一个category对象里有多个product的集合。</p><ol><li>@select获取Category对象</li><li>@Results里，通过product mapper接口的getProductByCategoryId获取products集合。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CategoryMapper</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Select</span>(<span class="string">" select * from category_ "</span>)</div><div class="line">    <span class="meta">@Results</span>(&#123;<span class="meta">@Result</span>(column = <span class="string">"id"</span>, property = <span class="string">"id"</span>),</div><div class="line">              <span class="meta">@Result</span>(column = <span class="string">"name"</span>, property = <span class="string">"name"</span>),</div><div class="line">              <span class="meta">@Result</span>(javaType = List.class, property = <span class="string">"products"</span>, column = <span class="string">"id"</span>,</div><div class="line">                      many = <span class="meta">@Many</span>(select = <span class="string">"com.how2java.mapper.ProductMapper.getProductByCID"</span>)),</div><div class="line">    &#125;)</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Category&gt; <span class="title">list</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductMapper</span> </span>&#123;</div><div class="line">    <span class="meta">@Select</span>(<span class="string">"select * from product_ where cid = #&#123;cid&#125;"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Product&gt; <span class="title">getProductByCID</span><span class="params">(<span class="keyword">int</span> cid)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>多对一</p><ol><li>通过一个product，找到其对应的category</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">// ProductMapper --&gt;</span></div><div class="line"><span class="meta">@Select</span>(<span class="string">"select * from product_"</span>)</div><div class="line">    <span class="meta">@Results</span>(&#123;<span class="meta">@Result</span>(property = <span class="string">"id"</span>, column = <span class="string">"id"</span>),</div><div class="line">            <span class="meta">@Result</span>(property = <span class="string">"cid"</span>, column = <span class="string">"cid"</span>),</div><div class="line">                <span class="meta">@Result</span>(property = <span class="string">"name"</span>, column = <span class="string">"name"</span>),</div><div class="line">                <span class="meta">@Result</span>(property = <span class="string">"price"</span>, column = <span class="string">"price"</span>),</div><div class="line">            <span class="meta">@Result</span>(column = <span class="string">"cid"</span>, property = <span class="string">"category"</span>, javaType = Category.class,</div><div class="line">                    one = <span class="meta">@One</span>(select = <span class="string">"com.how2java.mapper.CategoryMapper.get"</span>)),</div><div class="line">    &#125;)</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Product&gt; <span class="title">list</span><span class="params">()</span></span>;</div><div class="line">      </div><div class="line"><span class="comment">// CategoryMapper --&gt;</span></div><div class="line"><span class="meta">@Select</span>(<span class="string">"select * from category_ where id= #&#123;id&#125; "</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> Category <span class="title">get</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</div></pre></td></tr></table></figure><p>​</p></li><li><p>多对多</p><p>遍历所有订单，并计算订单价格</p><ol><li><p>order mapper: 获取所有订单，通过OrderItem mapper 获取order下的orderitem</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderMapper</span> </span>&#123;</div><div class="line">    <span class="meta">@Select</span>(<span class="string">"select * from order_"</span>)</div><div class="line">    <span class="meta">@Results</span>(&#123;</div><div class="line">            <span class="meta">@Result</span>(column = <span class="string">"id"</span>, property = <span class="string">"id"</span>),</div><div class="line">            <span class="meta">@Result</span>(column = <span class="string">"code"</span>, property = <span class="string">"code"</span>),</div><div class="line">            <span class="meta">@Result</span>(column = <span class="string">"id"</span>, property = <span class="string">"orderItems"</span>, javaType = List.class,</div><div class="line">            many = <span class="meta">@Many</span>(select = <span class="string">"com.how2java.mapper.OrderItemMapper.list"</span>))</div><div class="line">    &#125;)</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Order&gt; <span class="title">list</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@Select</span>(<span class="string">"select * from order_ where id = #&#123;id&#125;"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> Order <span class="title">get</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>​</p></li><li><p>OrderItem mapper: 通过 product mapper拿到product信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderItemMapper</span> </span>&#123;</div><div class="line">    <span class="meta">@Select</span>(<span class="string">"select * from order_item_ where oid = #&#123;oid&#125;"</span>)</div><div class="line">    <span class="meta">@Results</span>(&#123;<span class="meta">@Result</span>(column = <span class="string">"id"</span>, property = <span class="string">"id"</span>),</div><div class="line">            <span class="meta">@Result</span>(column = <span class="string">"number"</span>, property = <span class="string">"number"</span>),</div><div class="line">            <span class="meta">@Result</span>(column = <span class="string">"pid"</span>, property = <span class="string">"product"</span>, one = <span class="meta">@One</span>(select = <span class="string">"com.how2java.mapper.ProductMapper.getOne"</span>)),</div><div class="line">            <span class="meta">@Result</span>(column = <span class="string">"oid"</span>, property = <span class="string">"order"</span>, one = <span class="meta">@One</span>(select = <span class="string">"com.how2java.mapper.OrderMapper.get"</span>)),</div><div class="line">    &#125;)</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;OrderItem&gt; <span class="title">list</span><span class="params">(<span class="keyword">int</span> oid)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>​</p></li></ol></li></ul><h3 id="动态SQL-1"><a href="#动态SQL-1" class="headerlink" title="动态SQL"></a>动态SQL</h3><p><code>org.apache.ibatis.jdbc.SQL</code>可以动态生成sql语句，可以配合注解使用</p><ul><li><p>SqlProvider类，用于动态生成sql字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.apache.ibatis.jdbc.SQL;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryDynaSqlProvider</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">()</span> </span>&#123;</div><div class="line">         <span class="keyword">return</span> <span class="keyword">new</span> SQL()</div><div class="line">                 .SELECT(<span class="string">"*"</span>)</div><div class="line">                 .FROM(<span class="string">"category_"</span>)</div><div class="line">                 .toString();</div><div class="line">         </div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SQL()</div><div class="line">                .SELECT(<span class="string">"*"</span>)</div><div class="line">                .FROM(<span class="string">"category_"</span>)</div><div class="line">                .WHERE(<span class="string">"id=#&#123;id&#125;"</span>)</div><div class="line">                .toString();</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SQL()</div><div class="line">                .INSERT_INTO(<span class="string">"category_"</span>)</div><div class="line">                .VALUES(<span class="string">"name"</span>, <span class="string">"#&#123;name&#125;"</span>)</div><div class="line">                .toString();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SQL()</div><div class="line">                .UPDATE(<span class="string">"category_"</span>)</div><div class="line">                .SET(<span class="string">"name=#&#123;name&#125;"</span>)</div><div class="line">                .WHERE(<span class="string">"id=#&#123;id&#125;"</span>)</div><div class="line">                .toString();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SQL()</div><div class="line">                .DELETE_FROM(<span class="string">"category_"</span>)</div><div class="line">                .WHERE(<span class="string">"id=#&#123;id&#125;"</span>)</div><div class="line">                .toString();</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>在mapper接口中使用<code>@InsertProvider</code>引用SqlProvider中的sql查询方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CategoryMapper</span> </span>&#123;</div><div class="line">  </div><div class="line">    <span class="meta">@InsertProvider</span>(type=CategoryDynaSqlProvider.class,method=<span class="string">"add"</span>)  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(Category category)</span></span>;  </div><div class="line">        </div><div class="line">    <span class="meta">@DeleteProvider</span>(type=CategoryDynaSqlProvider.class,method=<span class="string">"delete"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span></span>;  </div><div class="line">        </div><div class="line">    <span class="meta">@SelectProvider</span>(type=CategoryDynaSqlProvider.class,method=<span class="string">"get"</span>)  </div><div class="line">    <span class="function"><span class="keyword">public</span> Category <span class="title">get</span><span class="params">(<span class="keyword">int</span> id)</span></span>;  </div><div class="line">      </div><div class="line">    <span class="meta">@UpdateProvider</span>(type=CategoryDynaSqlProvider.class,method=<span class="string">"update"</span>)  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(Category category)</span></span>;   </div><div class="line">        </div><div class="line">    <span class="meta">@SelectProvider</span>(type=CategoryDynaSqlProvider.class,method=<span class="string">"list"</span>)      </div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Category&gt; <span class="title">list</span><span class="params">()</span></span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>一个复杂的查询示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> String <span class="title">selectPersonSql</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> SQL() &#123;&#123;</div><div class="line">    SELECT(<span class="string">"P.ID, P.USERNAME, P.PASSWORD, P.FULL_NAME"</span>);</div><div class="line">    SELECT(<span class="string">"P.LAST_NAME, P.CREATED_ON, P.UPDATED_ON"</span>);</div><div class="line">    FROM(<span class="string">"PERSON P"</span>);</div><div class="line">    FROM(<span class="string">"ACCOUNT A"</span>);</div><div class="line">    INNER_JOIN(<span class="string">"DEPARTMENT D on D.ID = P.DEPARTMENT_ID"</span>);</div><div class="line">    INNER_JOIN(<span class="string">"COMPANY C on D.COMPANY_ID = C.ID"</span>);</div><div class="line">    WHERE(<span class="string">"P.ID = A.ID"</span>);</div><div class="line">    WHERE(<span class="string">"P.FIRST_NAME like ?"</span>);</div><div class="line">    OR();</div><div class="line">    WHERE(<span class="string">"P.LAST_NAME like ?"</span>);</div><div class="line">    GROUP_BY(<span class="string">"P.ID"</span>);</div><div class="line">    HAVING(<span class="string">"P.LAST_NAME like ?"</span>);</div><div class="line">    OR();</div><div class="line">    HAVING(<span class="string">"P.FIRST_NAME like ?"</span>);</div><div class="line">    ORDER_BY(<span class="string">"P.ID"</span>);</div><div class="line">    ORDER_BY(<span class="string">"P.FULL_NAME"</span>);</div><div class="line">  &#125;&#125;.toString();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>​</p></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="字段名与实体类属性命名不相同"><a href="#字段名与实体类属性命名不相同" class="headerlink" title="字段名与实体类属性命名不相同"></a>字段名与实体类属性命名不相同</h3><p>由于mybatis根据记录字段名将相应的数据注入实体类的属性中，如果字段名与实体类不一致，则对象映射会失败。</p><p>有2种解决方法：</p><ul><li><p>在SQL语句中为字段定义别名，别名与实体类的属性名一致</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 字段的值的别名与Order对象的属性一致 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectOrder"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"Order"</span>&gt;</span></div><div class="line">select order_id id, order_no orderNo,order_price price from orders where order_id=#&#123;id&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure><p>​</p></li><li><p>通过resultMap定义字段与属性的映射关系</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectOrderResultMap"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultMap</span>=<span class="string">"orderResultMap"</span>&gt;</span></div><div class="line">select * from orders where order_id=#&#123;id&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"Order"</span> <span class="attr">id</span>=<span class="string">"orderResultMap"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"order_id"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"orderNo"</span> <span class="attr">column</span>=<span class="string">"order_no"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"price"</span> <span class="attr">column</span>=<span class="string">"order_price"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></div></pre></td></tr></table></figure><p>​</p></li></ul><h3 id="日志输出"><a href="#日志输出" class="headerlink" title="日志输出"></a>日志输出</h3><p>Mybatis实现了日志工厂，支持Log4J等日志工具，只需导入相关的jar包，并进行相关配置即可。</p><ul><li><p>mybatis-config.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logPrefix"</span> <span class="attr">value</span>=<span class="string">"mybatis_log"</span>/&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"LOG4J"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>log4j.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># Global logging configuration</div><div class="line">log4j.rootLogger=TRACE, stdout</div><div class="line"># MyBatis logging configuration...</div><div class="line">log4j.logger.com.how2java=TRACE,stdout</div><div class="line"># Console output...</div><div class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</div><div class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</div><div class="line">log4j.appender.stdout.layout.ConversionPattern=%5p [%t] [%c]  - %m%n</div></pre></td></tr></table></figure><p>​</p></li></ul><h3 id="事务支持"><a href="#事务支持" class="headerlink" title="事务支持"></a>事务支持</h3><ul><li><p>需要配置environments.transactionManger。 <code>&lt;transactionManager type=&quot;JDBC&quot;/&gt;</code></p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180329/FAc690HcgG.png?imageslim" alt="mark"></p></li><li><p>mysql表的数据引擎必须是innodb才支持事务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">alter table category_ ENGINE  = innodb;</div><div class="line">show table status from how2java;</div></pre></td></tr></table></figure><p>​</p></li><li><p>在同一个session里的全部操作视为一个事务，支持回滚。</p></li></ul><h3 id="调用存储过程"><a href="#调用存储过程" class="headerlink" title="调用存储过程"></a>调用存储过程</h3><ul><li><p>创建存储过程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 创建存储过程 */</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> test.get_user_count(<span class="keyword">IN</span> sex_id <span class="built_in">INT</span>, <span class="keyword">OUT</span> user_count <span class="built_in">INT</span>)</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> test.user_ <span class="keyword">INTO</span> user_count;</div><div class="line"><span class="keyword">END</span></div><div class="line"><span class="comment">/* 调用存储过程 */</span></div><div class="line"><span class="keyword">SET</span> @user_count = <span class="number">0</span>;</div><div class="line"><span class="keyword">CALL</span> test.get_user_count(@user_count);</div><div class="line"><span class="keyword">SELECT</span> @user_count;</div></pre></td></tr></table></figure></li><li><p>mybatis中调用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getCount"</span> <span class="attr">resultType</span>=<span class="string">"java.util.Map"</span> <span class="attr">statementType</span>=<span class="string">"CALLABLE"</span>&gt;</span></div><div class="line">&#123;call </div><div class="line">get_user_count(#&#123;sex_id,mode=IN,jdbcType=INTEGER&#125;,#&#123;result,mode=OUT,jdbcType=INTEGER&#125;)</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure><p>​</p></li></ul><h3 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h3><p>在一对多的对象关系查询中，如果不使用延迟加载，则执行查询对象A时，也会同时执行查询A关联的多个B对象。</p><p>延迟加载则在访问了B对象时在进行数据库查询。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span> </div><div class="line">     <span class="comment">&lt;!-- 打开延迟加载的开关 --&gt;</span> </div><div class="line">     <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span> </div><div class="line">     <span class="comment">&lt;!-- 将积极加载改为消息加载即按需加载 --&gt;</span> </div><div class="line">     <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"aggressiveLazyLoading"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="分页-amp-PageHelper"><a href="#分页-amp-PageHelper" class="headerlink" title="分页 &amp; PageHelper"></a>分页 &amp; PageHelper</h3><ul><li><p>普通的查询语句加上limit参数即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"listCategory"</span> <span class="attr">resultType</span>=<span class="string">"Category"</span>&gt;</span></div><div class="line">  select * from   category_</div><div class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"start!=null and count!=null"</span>&gt;</span></div><div class="line">    limit #&#123;start&#125;,#&#123;count&#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure><p>或者使用注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">    <span class="meta">@Select</span>(<span class="string">" select * from category_ limit #&#123;start&#125;,#&#123;count&#125;"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Category&gt; <span class="title">listByPage</span><span class="params">(@Param(<span class="string">"start"</span>)</span> <span class="keyword">int</span> start, @<span class="title">Param</span><span class="params">(<span class="string">"count"</span>)</span><span class="keyword">int</span> count)</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>使用插件进行分页</p><p>需要导入第三方包，PageHelper<a href="https://github.com/pagehelper/Mybatis-PageHelper" target="_blank" rel="external">主页</a></p><p>使用<a href="https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md" target="_blank" rel="external">方法</a></p><ol><li><p>mybatis配置中添加插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- com.github.pagehelper为PageHelper类所在包名 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">"com.github.pagehelper.PageInterceptor"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 使用下面的方式配置参数，后面会有所有的参数介绍 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"param1"</span> <span class="attr">value</span>=<span class="string">"value1"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>调用方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//第一种，RowBounds方式的调用</span></div><div class="line">List&lt;Country&gt; list = sqlSession.selectList(<span class="string">"x.y.selectIf"</span>, <span class="keyword">null</span>, <span class="keyword">new</span> RowBounds(<span class="number">0</span>, <span class="number">10</span>));</div><div class="line"></div><div class="line"><span class="comment">//第二种，Mapper接口方式的调用，推荐这种使用方式。</span></div><div class="line">PageHelper.startPage(<span class="number">1</span>, <span class="number">10</span>);</div><div class="line">List&lt;Country&gt; list = countryMapper.selectIf(<span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="comment">//第三种，Mapper接口方式的调用，推荐这种使用方式。</span></div><div class="line">PageHelper.offsetPage(<span class="number">1</span>, <span class="number">10</span>);</div><div class="line">List&lt;Country&gt; list = countryMapper.selectIf(<span class="number">1</span>);</div></pre></td></tr></table></figure><p>​</p></li></ol></li></ul><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>一级缓存</p><ul><li>同一session下的相同查询只执行一次数据库访问，后续从缓存中取查询结果</li></ul><p>二级缓存</p><ul><li><p>通过配置启用sessionFactory的缓存，同一个SessionFactory下查询只执行一次</p><ol><li><code>&lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;</code> 开启缓存</li><li>pojo对象要实现<code>Serializable</code>接口</li><li>pojo的mapper配置文件里添加<code>&lt;cached/&gt;</code></li><li>暂时没找到注解如何使用缓存</li><li>一般情况下不应使用mybatis自带的缓存机制，spring或其他框架会有更好的缓存实现。</li></ol></li><li><p>使用Ehcache</p><ol><li><p>导入jar包</p></li><li><p>配置ehcache，在 classpath 下 加入ehcache 的配置文件 ehcache.xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">name</span>=<span class="string">"default"</span></span></div><div class="line"><span class="tag">    <span class="attr">maxElementsInMemory</span>=<span class="string">"10000"</span></span></div><div class="line"><span class="tag">    <span class="attr">eternal</span>=<span class="string">"false"</span></span></div><div class="line"><span class="tag">    <span class="attr">timeToIdleSeconds</span>=<span class="string">"3600"</span></span></div><div class="line"><span class="tag">    <span class="attr">timeToLiveSeconds</span>=<span class="string">"10"</span></span></div><div class="line"><span class="tag">    <span class="attr">overflowToDisk</span>=<span class="string">"true"</span></span></div><div class="line"><span class="tag">    <span class="attr">diskPersistent</span>=<span class="string">"true"</span></span></div><div class="line"><span class="tag">    <span class="attr">diskExpiryThreadIntervalSeconds</span>=<span class="string">"120"</span></span></div><div class="line"><span class="tag">    <span class="attr">maxElementsOnDisk</span>=<span class="string">"10000"</span></span></div><div class="line"><span class="tag">/&gt;</span></div></pre></td></tr></table></figure></li><li><p>sql映射文件中使用：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.how2java.pojo"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 配置个性化缓存配置，默认使用&lt;cached/&gt;即开启缓存并使用ehcache的全局配置  --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">"org.mybatis.caches.ehcache.LoggingEhcache"</span> &gt;</span> </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"timeToIdleSeconds"</span> <span class="attr">value</span>=<span class="string">"3600"</span>/&gt;</span><span class="comment">&lt;!--1 hour--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"timeToLiveSeconds"</span> <span class="attr">value</span>=<span class="string">"3600"</span>/&gt;</span><span class="comment">&lt;!--1 hour--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxEntriesLocalHeap"</span> <span class="attr">value</span>=<span class="string">"1000"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxEntriesLocalDisk"</span> <span class="attr">value</span>=<span class="string">"10000000"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"memoryStoreEvictionPolicy"</span> <span class="attr">value</span>=<span class="string">"LRU"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">cache</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getCategory"</span> <span class="attr">parameterType</span>=<span class="string">"_int"</span> <span class="attr">resultType</span>=<span class="string">"Category"</span> <span class="attr">useCache</span>=<span class="string">"false"</span>&gt;</span> <span class="comment">&lt;!-- 禁用缓存 ---&gt;</span></div><div class="line">        select * from   category_  where id= #&#123;id&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></div></pre></td></tr></table></figure><p>​</p></li></ol></li></ul><h3 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h3><p>c3p0 、Druid等连接池比mybatis自带的高效，健壮。</p><p>mybatis需要自己写个DataSource的类，然后更改配置里DataSource的Type，自带的为<code>POOLED</code></p><p>换成type=”C3P0DataSourceFactory”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.apache.ibatis.datasource.unpooled.UnpooledDataSourceFactory;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C3P0DataSourceFactory</span> <span class="keyword">extends</span> <span class="title">UnpooledDataSourceFactory</span></span>&#123;</div><div class="line">     </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">C3P0DataSourceFactory</span><span class="params">()</span></span>&#123;</div><div class="line">     </div><div class="line">           <span class="keyword">this</span>.dataSource =<span class="keyword">new</span> ComboPooledDataSource();</div><div class="line">     </div><div class="line">        &#125;</div><div class="line">     </div><div class="line">    &#125;</div></pre></td></tr></table></figure><h1 id="Spring-amp-Mybatis"><a href="#Spring-amp-Mybatis" class="headerlink" title="Spring &amp; Mybatis"></a>Spring &amp; Mybatis</h1><ol><li><p>mybatis里先建立pojo和SQL的映射类mapper</p><p>映射可以使用注解的方式写在mapper类里，或者单独xml mapper配置文件,然后在<code>SqlSessionFactoryBean</code>中指定mapperLocations。</p></li><li><p>spring配置文件里，添加DataSource数据源、sqlSessionFactory工厂,  MapperScannerConfigurer的bean。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span> /&gt;</span>  <span class="comment">&lt;!-- 使用注解的方式加载context配置和装载bean --&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 1. 数据源 : DriverManagerDataSource --&gt;</span>    </div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://localhost:3306/how2java?characterEncoding=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 2. mybatis 的 SqlSession 的工厂: SqlSessionFactoryBean --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSession"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"com.how2java.pojo"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:com/how2java/mapper/*.xml"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 3. mybatis 自动扫描加载 Sql 映射文件 : MapperScannerConfigurer --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.how2java.mapper"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 4. 事务管理 : DataSourceTransactionManager --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txManager"</span> </span></div><div class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></div><div class="line">  </div><div class="line"><span class="comment">&lt;!-- 5. 使用声明式事务 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"txManager"</span> /&gt;</span></div></pre></td></tr></table></figure></li><li><p>测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(<span class="string">"classpath:applicationContext.xml"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisTest</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> CategoryMapper categoryMapper;</div><div class="line"> </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span> </span>&#123;</div><div class="line">        Category category = <span class="keyword">new</span> Category();</div><div class="line">        category.setName(<span class="string">"new Category"</span>);</div><div class="line">        categoryMapper.add(category);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testList</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(categoryMapper);</div><div class="line">        List&lt;Category&gt; cs=categoryMapper.list();</div><div class="line">        <span class="keyword">for</span> (Category c : cs) &#123;</div><div class="line">            System.out.println(c.getName());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>​</p></li></ol><h1 id="SSM"><a href="#SSM" class="headerlink" title="SSM"></a>SSM</h1><h2 id="hello-world-1"><a href="#hello-world-1" class="headerlink" title="hello world"></a>hello world</h2><ul><li><p>项目结构：</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180401/993fFjDDb2.png?imageslim" alt="mark"></p></li><li><p>controller接收request请求，通过service接口获取数据，然后将数据和模板组装好后返回给客户端。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">""</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryController</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> CategoryService categoryService;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"addCategory"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">add</span><span class="params">(Category category)</span></span>&#123;</div><div class="line">        categoryService.add(category);</div><div class="line">        ModelAndView mav = <span class="keyword">new</span> ModelAndView(<span class="string">"addResult"</span>);</div><div class="line">        mav.addObject(<span class="string">"category"</span>, category);</div><div class="line">        <span class="keyword">return</span> mav;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>​</p></li><li><p>service类通过mybatis mapper接口访问数据库获取数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryServiceImpl</span> <span class="keyword">implements</span> <span class="title">CategoryService</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> CategoryMapper categoryMapper;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Category category)</span> </span>&#123;</div><div class="line">        categoryMapper.add(category);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Category&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> categoryMapper.list();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>​</p></li><li><p>Maven pom配置中指定相关依赖，在build的参数中添加编译插件，指定resource位置。</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 资源文件拷贝插件 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- java编译插件 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 配置Tomcat插件 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.tld<span class="tag">&lt;/<span class="name">include</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></div></pre></td></tr></table></figure><ol><li><p>Tomcat首先根据web.xml初始化web容器(生命周期同Tomcat， Servlet)</p></li><li><p>web.xml定义了spring父容器（生命周期同servlet）和spring MVC子容器的初始化。</p><p>spring的初始化由监听ServletContext的Listener完成，父容器加载完后，加载spring MVC容器。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--把applicationContext.xml加入到配置文件中--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 加载spring --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div></pre></td></tr></table></figure><p>​</p><p>web容器中定义的dispatcherServlet（调度）会转发web容器接收的请求，交给Spring MVC。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--配置springmvc DispatcherServlet--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--配置springMVCr.xml作为mvc的配置文件--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springMVC.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">async-supported</span>&gt;</span>true<span class="tag">&lt;/<span class="name">async-supported</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>由spring初始化的bean（和mybatis相关），dataSource， sqlSessionFactory， mapper</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/ssm?characterEncoding=UTF-8"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSession"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"com.shuaiyy.pojo"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!--&lt;property name="mapperLocations" value="classpath:com/shuaiyy/mapper/*.xml"/&gt;--&gt;</span></div><div class="line">        <span class="comment">&lt;!--&lt;property name="mapperLocations" value="classpath:com/shuaiyy/mapper/*.*"/&gt;--&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.shuaiyy.mapper"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure><p>​</p></li><li><p>spring mvc 负责定位资源及模板，扫描装配Controller bean。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></div><div class="line">  <span class="comment">&lt;!--启用spring的一些annotation --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 配置注解驱动 可以将request参数与绑定到controller参数上 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!--静态资源映射--&gt;</span></div><div class="line">  <span class="comment">&lt;!--本项目把静态资源放在了webapp的statics目录下，资源映射如下--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/css/**"</span> <span class="attr">location</span>=<span class="string">"/WEB-INF/statics/css/"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/js/**"</span> <span class="attr">location</span>=<span class="string">"/WEB-INF/statics/js/"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/image/**"</span> <span class="attr">location</span>=<span class="string">"/WEB-INF/statics/image/"</span>/&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 视图定位 --&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 对模型视图名称的解析，即在模型视图名称添加前后缀(如果最后一个还是表示文件夹,则最后的斜杠不要漏了) 使用JSP--&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 默认的视图解析器 在上边的解析错误时使用 (默认使用html)- --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"defaultViewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"viewClass"</span> <span class="attr">value</span>=<span class="string">"org.springframework.web.servlet.view.JstlView"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/view/jsp/"</span>/&gt;</span><span class="comment">&lt;!--设置JSP文件的目录位置--&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"exposeContextBeansAsAttributes"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 自动扫描装配 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.shuaiyy.controller"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span></span></div><div class="line"><span class="tag">                              <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></div></pre></td></tr></table></figure><p>​</p></li></ol><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><p>首先定义一个Page对象来接收request参数，start， count， end。</p><ol><li><p>在sql查询语句中使用limit关键字 </p><p>​</p></li><li><p>使用PageHelper插件</p><p>在bean容器配置文件applicationContext中的sqlSessionFactory bean中配置插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSession"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"com.how2java.pojo"</span> /&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:com/how2java/mapper/*.xml"</span>/&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"plugins"</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">array</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.github.pagehelper.PageInterceptor"</span>&gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"properties"</span>&gt;</span></div><div class="line">                 <span class="comment">&lt;!--使用下面的方式配置参数，一行配置一个 --&gt;</span></div><div class="line">                 <span class="tag">&lt;<span class="name">value</span>&gt;</span></div><div class="line">                 <span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">               <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">             <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">           <span class="tag">&lt;/<span class="name">array</span>&gt;</span></div><div class="line">         <span class="tag">&lt;/<span class="name">property</span>&gt;</span>    </div><div class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure><p>​</p></li></ol><h2 id="更换连接池"><a href="#更换连接池" class="headerlink" title="更换连接池"></a>更换连接池</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span> <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 基本属性 url、user、password --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/ssm?characterEncoding=UTF-8"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span></div><div class="line"> </div><div class="line">        <span class="comment">&lt;!-- 配置初始化大小、最小、最大 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialSize"</span> <span class="attr">value</span>=<span class="string">"3"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minIdle"</span> <span class="attr">value</span>=<span class="string">"3"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"20"</span> /&gt;</span></div><div class="line"> </div><div class="line">        <span class="comment">&lt;!-- 配置获取连接等待超时的时间 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWait"</span> <span class="attr">value</span>=<span class="string">"60000"</span> /&gt;</span></div><div class="line"> </div><div class="line">        <span class="comment">&lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"timeBetweenEvictionRunsMillis"</span> <span class="attr">value</span>=<span class="string">"60000"</span> /&gt;</span></div><div class="line"> </div><div class="line">        <span class="comment">&lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minEvictableIdleTimeMillis"</span> <span class="attr">value</span>=<span class="string">"300000"</span> /&gt;</span></div><div class="line"> </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"validationQuery"</span> <span class="attr">value</span>=<span class="string">"SELECT 1"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testWhileIdle"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnBorrow"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnReturn"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></div><div class="line"> </div><div class="line">        <span class="comment">&lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"poolPreparedStatements"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolPreparedStatementPerConnectionSize"</span> <span class="attr">value</span>=<span class="string">"20"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="实现CRUD-1"><a href="#实现CRUD-1" class="headerlink" title="实现CRUD"></a>实现CRUD</h2><ol><li><p>控制器中配置相应URL映射和视图模型，调用service接口实现对应的数据操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"addCategory"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">addCategory</span><span class="params">(Category category)</span></span>&#123;</div><div class="line">categoryService.add(category);</div><div class="line">ModelAndView mav = <span class="keyword">new</span> ModelAndView(<span class="string">"redirect:/listCategory"</span>);</div><div class="line">    <span class="keyword">return</span> mav;</div><div class="line">&#125;</div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"deleteCategory"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">deleteCategory</span><span class="params">(Category category)</span></span>&#123;</div><div class="line">categoryService.delete(category);</div><div class="line">ModelAndView mav = <span class="keyword">new</span> ModelAndView(<span class="string">"redirect:/listCategory"</span>);</div><div class="line"><span class="keyword">return</span> mav;</div><div class="line">&#125;</div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"editCategory"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">editCategory</span><span class="params">(Category category)</span></span>&#123;</div><div class="line">Category c= categoryService.get(category.getId());</div><div class="line">ModelAndView mav = <span class="keyword">new</span> ModelAndView(<span class="string">"editCategory"</span>);</div><div class="line">mav.addObject(<span class="string">"c"</span>, c);</div><div class="line"><span class="keyword">return</span> mav;</div><div class="line">&#125;</div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"updateCategory"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">updateCategory</span><span class="params">(Category category)</span></span>&#123;</div><div class="line">categoryService.update(category);</div><div class="line">ModelAndView mav = <span class="keyword">new</span> ModelAndView(<span class="string">"redirect:/listCategory"</span>);</div><div class="line"><span class="keyword">return</span> mav;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>​</p></li><li><p>service接口的实现类中调用mapper接口进行数据库操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryServiceImpl</span> <span class="keyword">implements</span> <span class="title">CategoryService</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> CategoryMapper categoryMapper;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Category category)</span> </span>&#123;</div><div class="line">        categoryMapper.add(category);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Category  category)</span> </span>&#123;</div><div class="line">        categoryMapper.delete(category);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Category category)</span> </span>&#123;</div><div class="line">        categoryMapper.update(category);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Category <span class="title">get</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> categoryMapper.get(id);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>​</p></li><li><p>mapper接口实现数据库访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CategoryMapper</span> </span>&#123;</div><div class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into category_(id,NAME) VALUES(#&#123;id&#125;, #&#123;name&#125;)"</span>)</div><div class="line"><span class="comment">//    @Insert(" insert into category_ ( name ) values (#&#123;name&#125;)")</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Category category)</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@Delete</span>(<span class="string">"delete from category_ where id = #&#123;id&#125; and name= #&#123;name&#125;"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Category category)</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@Select</span>(<span class="string">" select * from category_ where id = #&#123;id&#125;"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> Category <span class="title">get</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@Update</span>(<span class="string">"update category_ set name=#&#123;name&#125; where id = #&#123;id&#125;"</span> )</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Category category)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><h2 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h2><p>需要导入aspectjweaver包依赖。</p><ul><li><p>配置事务管理器和事务注解扫描器 applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure><p>​</p></li><li><p>为指定的方法加上事务注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="meta">@Transactional</span>(propagation=Propagation.REQUIRED,rollbackForClassName=<span class="string">"Exception"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTwo</span><span class="params">()</span> </span>&#123;</div><div class="line">         </div><div class="line">        Category c1 = <span class="keyword">new</span> Category();</div><div class="line">        c1.setName(<span class="string">"短的名字"</span>);</div><div class="line">        categoryMapper.add(c1);</div><div class="line">         </div><div class="line">        Category c2 = <span class="keyword">new</span> Category();</div><div class="line">        c2.setName(<span class="string">"名字长对应字段放不下,名字长对应字段放不下,名字长对应字段放不下,名字长对应字段放不下,名字长对应字段放不下,名字长对应字段放不下,名字长对应字段放不下,名字长对应字段放不下,"</span>);</div><div class="line">        categoryMapper.add(c2);</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p>使用AOP方式配置事务管理</p><ul><li><p>配置AOP</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txadvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span> </div><div class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span> </div><div class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"add*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">rollback-for</span>=<span class="string">"Exception"</span> /&gt;</span> </div><div class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"del*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">rollback-for</span>=<span class="string">"Exception"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"edit*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">rollback-for</span>=<span class="string">"Exception"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">rollback-for</span>=<span class="string">"Exception"</span>/&gt;</span> </div><div class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"list*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">rollback-for</span>=<span class="string">"Exception"</span>/&gt;</span> </div><div class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span> </div><div class="line">        </div><div class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span> </div><div class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"serviceMethod"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.how2java.service.*.*(..))"</span>/&gt;</span> </div><div class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">pointcut-ref</span>=<span class="string">"serviceMethod"</span> <span class="attr">advice-ref</span>=<span class="string">"txadvice"</span>/&gt;</span> </div><div class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></div></pre></td></tr></table></figure><p>​</p></li></ul><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><ul><li><p>使用fastjson依赖包处理json字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">JSONObject result = <span class="keyword">new</span> JSONObject();</div><div class="line">result.put(<span class="string">"OK"</span>, <span class="string">"OK"</span>);</div></pre></td></tr></table></figure><p>​</p></li><li><p>spring mvc 依赖jackson依赖包，处理RequestBody， ResponseBody中的json对象。</p><p>@RequestBody 从请求体解析json对象 @ResponseBody，将返回的json字符串作为响应体。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ResponseBody</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/submitCategory"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">submitCategory</span><span class="params">(@RequestBody Category category)</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"SSM接受到浏览器提交的json，并转换为Category对象:"</span>+category);</div><div class="line">    JSONObject result = <span class="keyword">new</span> JSONObject();</div><div class="line">    result.put(<span class="string">"OK"</span>, <span class="string">"OK"</span>);</div><div class="line">    <span class="keyword">return</span> result.toJSONString();</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>jquery提交post请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;form &gt;</div><div class="line">    id：&lt;input type=<span class="string">"text"</span> id=<span class="string">"id"</span> value=<span class="string">"123"</span> /&gt;<span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></div><div class="line">    名称：&lt;input type=<span class="string">"text"</span> id=<span class="string">"name"</span> value=<span class="string">"category xxx"</span>/&gt;<span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></div><div class="line">    &lt;input type=<span class="string">"button"</span> value=<span class="string">"提交"</span> id=<span class="string">"sender3"</span>&gt;</div><div class="line">&lt;<span class="regexp">/form&gt;</span></div><div class="line"><span class="regexp">&lt;div id="messageDiv3"&gt;&lt;/</span>div&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">    $(<span class="string">'#sender3'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> id=<span class="built_in">document</span>.getElementById(<span class="string">'id'</span>).value;</div><div class="line">        <span class="keyword">var</span> name=<span class="built_in">document</span>.getElementById(<span class="string">'name'</span>).value;</div><div class="line">        <span class="keyword">var</span> category=&#123;<span class="string">"name"</span>:name,<span class="string">"id"</span>:id&#125;;</div><div class="line">        <span class="keyword">var</span> jsonData = <span class="built_in">JSON</span>.stringify(category);</div><div class="line">        <span class="keyword">var</span> page=<span class="string">"submitCategory"</span>;</div><div class="line"></div><div class="line">        $.ajax(&#123;</div><div class="line">            type:<span class="string">"post"</span>,</div><div class="line">            url: page,</div><div class="line">            data:jsonData,</div><div class="line">            dataType:<span class="string">"json"</span>,</div><div class="line">            contentType : <span class="string">"application/json;charset=UTF-8"</span>,</div><div class="line">            success: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</div><div class="line">                alert(<span class="string">"提交成功，请在Tomcat控制台查看服务端接收到的数据"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure><p>​</p></li></ul><h2 id="RESTFUL-API"><a href="#RESTFUL-API" class="headerlink" title="RESTFUL API"></a>RESTFUL API</h2><p>restful简单的讲URI指定资源，http请求的方法来决定对资源对象的操作。</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180402/mmc71b4gBh.png?imageslim" alt="mark"></p><ul><li><p>SpringMVC的dispatcherServlet只能处理post和get，因此需要在web.xml中配置filter增加对put和delete方法的变相支持，会将POST请求转换为对应的方法。即在POST表单中指定<code>_method</code>为<code>PUT</code>或<code>DELETE</code>, 表单域可以设为hidden。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>在jsp中实现CRUD对应的请求发起操作</p><p>在POST表单中定义<code>_method</code>隐藏域的请求方法属性值， 确定action的URI，最后jQuery POST提交函数。</p></li><li><p>jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">        &lt;c:forEach items=<span class="string">"$&#123;categorys&#125;"</span> var=<span class="string">"c"</span> varStatus=<span class="string">"st"</span>&gt;</div><div class="line">            &lt;tr&gt;</div><div class="line">                &lt;td&gt;$&#123;c.id&#125;&lt;/td&gt;</div><div class="line">                &lt;td&gt;$&#123;c.name&#125;&lt;/td&gt;</div><div class="line">                &lt;td&gt;&lt;a class="edit" name="$&#123;c.name&#125;/$&#123;c.id&#125;" href="#add_edit" &gt;编辑&lt;/a&gt;&lt;/td&gt;</div><div class="line">                &lt;td&gt;&lt;a class="delete" href="category/$&#123;c.id&#125;"&gt;删除&lt;/a&gt;&lt;/td&gt;</div><div class="line">            &lt;/tr&gt;</div><div class="line">        &lt;/c:forEach&gt;</div><div class="line"></div><div class="line">    &lt;div&gt;  &lt;!-- 增加使用PUT方法--&gt;</div><div class="line">        &lt;form id=<span class="string">"add_edit"</span> method=<span class="string">"post"</span> action=<span class="string">"category"</span>&gt;</div><div class="line">            &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"_method"</span> value=<span class="string">"PUT"</span>&gt;</div><div class="line">            分类id： &lt;input name=<span class="string">"id"</span> value=<span class="string">""</span> type=<span class="string">"text"</span> &gt; &lt;br&gt;&lt;br&gt;</div><div class="line">            分类名称： &lt;input name=<span class="string">"name"</span> value=<span class="string">""</span> type=<span class="string">"text"</span>&gt; &lt;br&gt;&lt;br&gt;</div><div class="line">            &lt;input type=<span class="string">"submit"</span> value=<span class="string">"增加分类"</span>&gt;</div><div class="line">            &lt;input type=<span class="string">"reset"</span> value=<span class="string">"清空输入"</span>&gt;</div><div class="line">        &lt;/form&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;form id=<span class="string">"formdelete"</span> action=<span class="string">""</span> method=<span class="string">"POST"</span> &gt;</div><div class="line">    &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"_method"</span> value=<span class="string">"DELETE"</span>&gt;</div><div class="line">&lt;/form&gt;</div><div class="line"></div><div class="line"></div><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="comment">/*将post method 改变为delete*/</span></div><div class="line">    $(function()&#123;</div><div class="line">        $(<span class="string">".delete"</span>).click(function()&#123;</div><div class="line">            var href=$(<span class="keyword">this</span>).attr(<span class="string">"href"</span>);</div><div class="line">            $(<span class="string">"#formdelete"</span>).attr(<span class="string">"action"</span>,href).submit();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;)</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">/* 修改操作使用post method*/</span></div><div class="line">    $(function()&#123;</div><div class="line">        $(<span class="string">".edit"</span>).click(function()&#123;</div><div class="line">            var list =$(<span class="keyword">this</span>).attr(<span class="string">"name"</span>).split(<span class="string">"/"</span>);</div><div class="line">            var cid = list.pop();</div><div class="line">            var name = list.pop();</div><div class="line">            var uri = <span class="string">"category/"</span>+cid;</div><div class="line">            $(<span class="string">"#add_edit"</span>).attr(<span class="string">"action"</span>, uri);</div><div class="line">            $(<span class="string">"#add_edit input[name=id]"</span>).attr(<span class="string">"value"</span>, cid);</div><div class="line">            $(<span class="string">"#add_edit input[name=id]"</span>).attr(<span class="string">"disabled"</span>, <span class="string">"disabled"</span>);</div><div class="line">            $(<span class="string">"#add_edit input[name=name]"</span>).attr(<span class="string">"value"</span>, name);</div><div class="line">            $(<span class="string">"#add_edit input[type=submit]"</span>).attr(<span class="string">"value"</span>, <span class="string">"修改此分类"</span>);</div><div class="line">            $(<span class="string">"#add_edit input[type=hidden]"</span>).remove();</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><p>​</p></li><li><p>controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 删除</span></div><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"category/&#123;id&#125;"</span>, method = RequestMethod.DELETE)</div><div class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">delete</span><span class="params">(@PathVariable <span class="keyword">int</span> id)</span></span>&#123;</div><div class="line">        categoryService.deleteByID(id);</div><div class="line">        ModelAndView mav = <span class="keyword">new</span> ModelAndView(<span class="string">"redirect:/listCategory"</span>);</div><div class="line">        <span class="keyword">return</span> mav;</div><div class="line">    &#125;</div><div class="line"><span class="comment">// 修改</span></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"category/&#123;id&#125;"</span>, method = RequestMethod.POST)</div><div class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">edit</span><span class="params">(Category category)</span></span>&#123;</div><div class="line">        categoryService.update(category);</div><div class="line">        ModelAndView mav = <span class="keyword">new</span> ModelAndView(<span class="string">"redirect:/listCategory"</span>);</div><div class="line">        <span class="keyword">return</span> mav;</div><div class="line">    &#125;</div><div class="line"><span class="comment">// 增加</span></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"category"</span>, method = RequestMethod.PUT)</div><div class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">addCategoryByPost</span><span class="params">(Category category)</span></span>&#123;</div><div class="line">        categoryService.add(category);</div><div class="line">        ModelAndView mav = <span class="keyword">new</span> ModelAndView(<span class="string">"redirect:/listCategory"</span>);</div><div class="line">        <span class="keyword">return</span> mav;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>​</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Mybatis&quot;&gt;&lt;a href=&quot;#Mybatis&quot; class=&quot;headerlink&quot; title=&quot;Mybatis&quot;&gt;&lt;/a&gt;Mybatis&lt;/h1&gt;&lt;p&gt;MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。&lt;/p&gt;
&lt;p&gt;Python Django的ORM框架提供了增删改查接口， mybatis必须要手动配置SQL语句。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.mybatis.org/mybatis-3/zh/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;hello-world&quot;&gt;&lt;a href=&quot;#hello-world&quot; class=&quot;headerlink&quot; title=&quot;hello world&quot;&gt;&lt;/a&gt;hello world&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;创建表和数据&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;USE how2java;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;CREATE TABLE category_ (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  id int(11) NOT NULL AUTO_INCREMENT,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  name varchar(32) DEFAULT NULL,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  PRIMARY KEY (id)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;) ENGINE=MyISAM AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;INSERT INTO category_ VALUES (null,&amp;apos;category1&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;INSERT INTO category_ VALUES (null,&amp;apos;category2&amp;apos;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建对应的pojo对象&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; com.how2java.pojo;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Category&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; id;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; id;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setId&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; id)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.id = id;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String name)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Java" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/Java/"/>
    
      <category term="Mybatis" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/Java/Mybatis/"/>
    
    
      <category term="Java" scheme="http://shuaiyy.cn/tags/Java/"/>
    
      <category term="ORM" scheme="http://shuaiyy.cn/tags/ORM/"/>
    
      <category term="MyBatis" scheme="http://shuaiyy.cn/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate入门</title>
    <link href="http://shuaiyy.cn/2018/02/16/%E6%8A%80%E6%9C%AF/Hibernate%E5%85%A5%E9%97%A8/"/>
    <id>http://shuaiyy.cn/2018/02/16/技术/Hibernate入门/</id>
    <published>2018-02-15T16:00:00.000Z</published>
    <updated>2018-06-03T08:10:54.801Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hibernate入门"><a href="#Hibernate入门" class="headerlink" title="Hibernate入门"></a>Hibernate入门</h1><p>一个Java 领域的持久化框架，ORM 框架。</p><p>“持久化”包括和数据库相关的各种操作：增删查改，根据OID加载对象。</p><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><ul><li><p>创建数据库表和POJO对象 Product.java</p></li><li><p>配置POJO到table的映射关系 <code>Product.hbm.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></div><div class="line"><span class="meta">        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></div><div class="line"><span class="meta">        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">"cn.shuaiyy.pojo"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"Product"</span> <span class="attr">table</span>=<span class="string">"product_"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">generator</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"price"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></div></pre></td></tr></table></figure></li></ul>  <a id="more"></a><ul><li><p>Hibernate配置文件<code>hibernate.cfg.xml</code>中配置数据库连接，并添加mapping配置。</p><p>​</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version='1.0' encoding='utf-8'?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE hibernate-configuration PUBLIC</span></div><div class="line"><span class="meta">        "-//Hibernate/Hibernate Configuration DTD 3.0//EN"</span></div><div class="line"><span class="meta">        "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- Database connection settings --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.driver_class"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.url"</span>&gt;</span>jdbc:mysql://localhost:3306/test?characterEncoding=UTF-8<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.password"</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- SQL dialect --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- 映射关系配置 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"cn/shuaiyy/pojo/Product.hbm.xml"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>导入hibernate-core包，进行测试 <code>TestHibernate.java</code></p><ol><li>获取SessionFactory对象，并创建一个session</li><li>在session中开启一个事务</li><li>通过session进行CRUD</li><li>session提交事务</li><li>关闭session和sessionFactory</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">      <span class="comment">// 获取session，开启事务</span></div><div class="line">      SessionFactory sf = <span class="keyword">new</span> Configuration().configure().buildSessionFactory();</div><div class="line"><span class="comment">// 如果配置文件不在classpath下目录，可以传入File对象。</span></div><div class="line"><span class="comment">// File config = new File("xx/xxx/hibernate.cfg.xml");</span></div><div class="line"><span class="comment">// new Configuration().configure(config)</span></div><div class="line">      Session s = sf.openSession();</div><div class="line">      s.beginTransaction();</div><div class="line">      </div><div class="line">      Product p = <span class="keyword">new</span> Product();</div><div class="line">      p.setName(<span class="string">"iphone8"</span>);</div><div class="line">      p.setPrice(<span class="number">8000</span>);</div><div class="line">      s.save(p);  <span class="comment">// 增加</span></div><div class="line">      p = s.get(Product.class, <span class="number">1</span>); <span class="comment">// 查询</span></div><div class="line">      System.out.println(p.getName() + p.getPrice());</div><div class="line">      s.getTransaction().commit(); <span class="comment">// 提交事务</span></div><div class="line">      s.close();</div><div class="line">      sf.close();</div></pre></td></tr></table></figure><p>​</p></li></ul><h2 id="hibernate配置"><a href="#hibernate配置" class="headerlink" title="hibernate配置"></a>hibernate配置</h2><p><strong>cfg.xml</strong></p><ul><li>show_sql：是否将运行期生成的SQL输出到日志以供调试</li><li>format_sql：是否将SQL 转化为格式良好的SQL</li><li>hbm2ddl.auto：在启动和停止时自动地创建，更新或删除数据库。取值create | update | create-drop |<br>validate</li><li>hibernate.jdbc.fetch_size：需要底层数据库支持，每次查询取出的记录数。取100时性能较好。</li><li>hibernate.jdbc.batch_size：批量操作的批次大小，Oracle数据库取30较好。</li></ul><p><strong>hbm.xml</strong></p><p>hibernate-mapping的属性：</p><ul><li>default-cascade(默认为none): 设置hibernate默认的级联风格</li><li>default-access (默认为property): 指定Hibernate 的默认的属性访问策略。默认值为 property, 即使用getter, setter 方法来访问属性. 若指定access, 则通过反射访问成员变量.</li><li>default-lazy(默认为true): 设置Hibernat morning的延迟加载策略. 该属性的默认值为 true, 即启用延迟加载策略. </li><li>package (可选): 指定一个包前缀，配置类名时该包下的类可以不用全类名。</li></ul><p>class节点的属性: 用于配置类与表的映射。</p><ul><li>name:指定该持久化类映射的持久化类的类名</li><li>table:指定该持久化类映射的表名, Hibernate 默认以持久化类的类名作为表名</li><li>dynamic-insert: 若设置为true, 表示当保存一个对象时, 会动态生成 insert 语句, insert 语句中仅包含所有取值不为null 的字段. 默认值为false</li><li>dynamic-update: 若设置为true, 表示当更新一个对象时, 会动态生成 update 语句, update 语句中仅包含所有<br>取值需要更新的字段. 默认值为false</li><li>select-before-update:设置Hibernate 在更新某个持久化对象之前是否需要先执行一次查询. 默认值为false</li><li>batch-size:指定根据OID 来抓取实例时每批抓取的实例数.</li><li>lazy: 指定是否使用延迟加载. </li><li>mutable: 若设置为true, 等价于所有的<code>&lt;property&gt;</code> 元素的update 属性为false, 表示整个实例不能被更新. 默<br>认为true. </li><li>discriminator-value: 指定区分不同子类的值. 当使用<code>&lt;subclass/&gt;</code> 元素来定义持久化类的继承关系时需要使<br>用该属性</li></ul><p>id节点：设定持久化类的OID 和表的主键的映射</p><ul><li><p>name: 标识持久化类OID 的属性名</p></li><li><p>column: 设置标识属性所映射的数据表的列名(主键字段的名字). </p></li><li><p>unsaved-value:若设定了该属性, Hibernate 会通过比较持久化类的OID 值和该属性值来区分当前持久化类的<br>对象是否为临时对象</p></li><li><p>type:指定Hibernate 映射类型. Hibernate 映射类型是Java 类型与SQL 类型的桥梁. 如果没有为某个属性显<br>式设定映射类型, Hibernate 会运用反射机制先识别出持久化类的特定属性的Java 类型, 然后自动使用与之对<br>应的默认的Hibernate 映射类型</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180412/d5c4a99mlG.png?imageslim" alt="mark"></p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180412/fkE9GkkfL6.png?imageslim" alt="mark"></p><p>​</p></li><li><p>Java 的基本数据类型和包装类型对应相同的Hibernate 映射类型. 基本数据类型无法表达null, 所以对于持久化<br>类的OID 推荐使用包装类型。对于时间类型，java类中应使用Date，Hibernate内部实现了对于的映射时间类型。</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180412/6B92FEbbL8.png?imageslim" alt="mark"></p></li></ul><p>property节点：</p><ul><li><p>name:指定该持久化类的属性的名字</p></li><li><p>column:指定与类的属性映射的表的字段名. 如果没有设置该属性, Hibernate 将直接使用类的属性名作为字段名. </p></li><li><p>type:指定Hibernate 映射类型. Hibernate 映射类型是Java 类型与SQL 类型的桥梁. 如果没有为某个属性显式设定映射类型, Hibernate 会运用反射机制先识别出持久化类的特定属性的 Java 类型, 然后自动使用与之对应的默认的 Hibernate 映射类型.</p></li><li><p>not-null:若该属性值为true, 表明不允许为null, 默认为false</p></li><li><p>access:指定Hibernate 的默认的属性访问策略。默认值为property, 即使用getter, setter 方法来访问属性. 若指定field, 则Hibernate 会忽略getter/setter 方法, 而通过反射访问成员变量</p></li><li><p>unique: 设置是否为该属性所映射的数据列添加唯一约束. </p></li><li><p>index: 指定一个字符串的索引名称. 当系统需要Hibernate 自动建表时, 用于为该属性所映射的数据列创建索引, 从而加快该数据列的查询.</p></li><li><p>length: 指定该属性所映射数据列的字段的长度</p></li><li><p>scale: 指定该属性所映射数据列的小数位数, 对double, float, decimal 等类型的数据列有效.</p></li><li><p>formula：设置一个SQL 表达式, Hibernate 将根据它来计算出派生属性的值. </p><p>派生属性: 并不是持久化类的所有属性都直接和表的字段匹配, 持久化类的有些属性的值必须在运行时通过计算才能得出来,</p><p><code>formula=&quot;(SELECT concat(author, &#39;: &#39;, title) FROM NEWS n WHERE n.id = id)&quot;</code>, 必须把sql放到括号内，其中id 是入参, 和当前持久化对象的id 属性对应的列的 id 值将作为参数传入.</p></li></ul><p>component子节点： 一个实体类是另外一个实体类组成的一部分</p><ul><li>parent：指定组成关系</li><li>property节点：同class下的property。</li></ul><h2 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h2><h3 id="利用主键获取一个对象"><a href="#利用主键获取一个对象" class="headerlink" title="利用主键获取一个对象"></a>利用主键获取一个对象</h3><ul><li>get方式，立即调用SQL获取对象全部属性，如果不存在则返回null。</li><li>load方式，延迟加载，当访问对象属性时，才执行SQL语句。如果对象不存在会抛出异常。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Product p1 = s.get(Product.class, <span class="number">80</span>); <span class="comment">// 查询</span></div><div class="line">Product p2 = s.load(Product.class, <span class="number">81</span>); <span class="comment">// 查询</span></div></pre></td></tr></table></figure><h3 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">p.setName(<span class="string">"shuaiyy"</span> + i);</div><div class="line">p.setPrice(<span class="number">200</span>*i);</div><div class="line">s.save(p);  <span class="comment">// 增加</span></div></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Product p2 = s.load(Product.class, <span class="number">81</span>); <span class="comment">// 查询</span></div><div class="line">s.delete(p2); <span class="comment">// 删除</span></div><div class="line">s.getTransaction().commit(); <span class="comment">// 提交事务</span></div></pre></td></tr></table></figure><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">s.beginTransaction();</div><div class="line">Product p =(Product) s.get(Product.class, <span class="number">6</span>); <span class="comment">//获取修改对象</span></div><div class="line">p.setName(<span class="string">"new_name"</span>);  <span class="comment">// 修改</span></div><div class="line">s.update(p);  <span class="comment">// 更新</span></div><div class="line">s.getTransaction().commit();</div></pre></td></tr></table></figure><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>查询策略：</p><ol><li><p>减少内存浪费，关联对象如果没被访问，则不应提前载入内存</p><p>class的延迟加载。set的lazy和fetch属性</p></li><li><p>提高查询效率：较少的发送SQL语句</p><p>batch-size</p></li></ol><ul><li><p>HQL方式</p><p>hibernate query language， 不需要select，from后是对象，而不是数据表。</p><ol><li>创建一个Query对象，根据hql语法</li><li>设置参数，参数起始于0</li><li>调用list或者getSingleResult 获取查询结果</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1. 创建 Query 对象，基于位置的参数. </span></div><div class="line">String hql = <span class="string">"FROM Employee e WHERE e.salary &gt; ? AND e.email LIKE ? AND e.dept = ? "</span></div><div class="line">  + <span class="string">"ORDER BY e.salary"</span>;</div><div class="line">Query query = session.createQuery(hql);</div><div class="line"><span class="comment">//2. 绑定参数， Query 对象调用 setXxx 方法支持方法链的编程风格.</span></div><div class="line">Department dept = <span class="keyword">new</span> Department();</div><div class="line">dept.setId(<span class="number">80</span>); </div><div class="line">query.setFloat(<span class="number">0</span>, <span class="number">6000</span>)</div><div class="line">  .setString(<span class="number">1</span>, <span class="string">"%A%"</span>)</div><div class="line">  .setEntity(<span class="number">2</span>, dept);</div><div class="line"><span class="comment">//3. 执行查询</span></div><div class="line">List&lt;Employee&gt; emps = query.list();</div><div class="line">System.out.println(emps.size()); </div><div class="line"></div><div class="line"><span class="comment">/**** 使用命名参数 :name ***/</span></div><div class="line"><span class="comment">//1。基于命名参数的query查询，传入的值可以是entity实体类对象。</span></div><div class="line">String hql = <span class="string">"FROM Employee e WHERE e.salary &gt; :sal AND e.email LIKE :email"</span>;</div><div class="line">Query query = session.createQuery(hql);</div><div class="line"><span class="comment">//2. 绑定参数</span></div><div class="line">query.setFloat(<span class="string">"sal"</span>, <span class="number">7000</span>)</div><div class="line">  .setString(<span class="string">"email"</span>, <span class="string">"%A%"</span>);</div><div class="line"><span class="comment">//3. 执行查询</span></div><div class="line">List&lt;Employee&gt; emps = query.list();</div><div class="line">System.out.println(emps.size());  </div><div class="line"></div><div class="line"><span class="comment">// 分页查询</span></div><div class="line"><span class="keyword">int</span> pageNo = <span class="number">22</span>;</div><div class="line"><span class="keyword">int</span> pageSize = <span class="number">5</span>;</div><div class="line">List&lt;Employee&gt; emps = query.setFirstResult((pageNo - <span class="number">1</span>) * pageSize)</div><div class="line">  .setMaxResults(pageSize)</div><div class="line">  .list();</div></pre></td></tr></table></figure></li><li><p>QBC（Query by Criteria）方式</p><p>criteria： 准则；条件；规准。</p><p>新版本中不被推荐使用了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Criteria query = s.createCriteria(Product.class);</div><div class="line">query.add(Restrictions.like(<span class="string">"name"</span>, <span class="string">"%uai%"</span>));</div><div class="line">List&lt;Product&gt; ps= query.list();</div><div class="line"><span class="keyword">for</span> (Product p : ps) &#123;</div><div class="line">  System.out.println(p.getName());</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>​</p></li><li><p>标准SQL方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">String sql = <span class="string">"select * from product_ p where p.name like '%ai%'"</span>;</div><div class="line">Query q= s.createSQLQuery(sql);</div><div class="line">List&lt;Object[]&gt; records= q.list();</div><div class="line"><span class="keyword">for</span> (Object[] record : records) &#123;</div><div class="line">  <span class="keyword">for</span> (Object filed: record) &#123;</div><div class="line">    System.out.print(filed+<span class="string">"\t"</span>);</div><div class="line">  &#125;</div><div class="line">  System.out.println();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>​</p></li></ul><h2 id="对象关系"><a href="#对象关系" class="headerlink" title="对象关系"></a>对象关系</h2><ul><li>如果需要把持久化类的实例放到Set 中(如多对一映射),需要重写eqauls 和hashCode 方法。</li><li>持久化类需要一个标识属性(identifier property): 通常映射为数据库表的主键字段.否则一些功能将不起作用，如：<code>Session.saveOrUpdate()</code></li><li>持久化类为非final类，因为Hibernate的代理机制。类字段要设置setter 、getter访问方法。</li></ul><h3 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h3><ul><li><p>基于外键的方式，在存在外键的一端使用many-to-one，为其加上unique=”true”。另一端使用one-to-one，其property-ref属性的值为关联实体many-to-one属性的name。</p></li><li><p>基于主键的方式：一端的主键采用foreign生成器的方式关联，并在one-to-one属性上添加constrained=true 属性, 以使当前的主键上添加外键约束。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"Department"</span> <span class="attr">table</span>=<span class="string">"DEPARTMENTS"</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"deptId"</span> <span class="attr">type</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"DEPT_ID"</span> /&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 使用外键的方式来生成当前的主键，即department的主键生成要根据mgr的主键来生成，不能自己独立创建 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"foreign"</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!-- property 属性指定使用当前持久化类的哪一个属性的主键作为外键 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"property"</span>&gt;</span>mgr<span class="tag">&lt;/<span class="name">param</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">generator</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--  </span></div><div class="line"><span class="comment">采用 foreign 主键生成器策略的一端增加 one-to-one 元素映射关联属性,</span></div><div class="line"><span class="comment">其 one-to-one 节点还应增加 constrained=true 属性, 以使当前的主键上添加外键约束</span></div><div class="line"><span class="comment">--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">one-to-one</span> <span class="attr">name</span>=<span class="string">"mgr"</span> <span class="attr">class</span>=<span class="string">"Manager"</span> <span class="attr">constrained</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">one-to-one</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"Manager"</span> <span class="attr">table</span>=<span class="string">"MANAGERS"</span>&gt;</span></div><div class="line">        </div><div class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"mgrId"</span> <span class="attr">type</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"MGR_ID"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">one-to-one</span> <span class="attr">name</span>=<span class="string">"dept"</span> </span></div><div class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"Department"</span>&gt;</span><span class="tag">&lt;/<span class="name">one-to-one</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></div></pre></td></tr></table></figure><p>​</p></li></ul><h3 id="多对一"><a href="#多对一" class="headerlink" title="多对一"></a>多对一</h3><p>一个category下有多个product，通过product找到其对应的category。</p><ol><li><p>product pojo中增加category属性，数据表中增加一列cid，对应category_表中的id</p></li><li><p>配置category和product的hibernate 映射配置文件。product中增加一个<code>&lt;many-to-one&gt;</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">"cn.shuaiyy.pojo"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"Product"</span> <span class="attr">table</span>=<span class="string">"product_"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">generator</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"price"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">many-to-one</span> <span class="attr">name</span>=<span class="string">"category"</span> <span class="attr">class</span>=<span class="string">"Category"</span> <span class="attr">column</span>=<span class="string">"cid"</span>  /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>查询和访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">s.beginTransaction();</div><div class="line">Query query = s.createQuery(<span class="string">"from Product p where p.category.id=?"</span>);</div><div class="line">query.setParameter(<span class="number">0</span>, <span class="number">2</span>);</div><div class="line">List&lt;Product&gt; ps= query.list();</div><div class="line"><span class="keyword">for</span> (Product p : ps) &#123;</div><div class="line">  System.out.println(p.getName());</div><div class="line">  System.out.println(p.getCategory().getName());</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>​</p></li></ol><h3 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h3><ol><li><p>通过一个category查找其对应的多个product</p></li><li><p>categeory pojo 中增加属性products，可以是list set map类型，必须是集合接口，可以赋初值为null。</p></li><li><p>配置一对多的集合映射</p><p>xml会检查子元素的顺序，key， list-index， one-to-many</p><p>设置<code>inverse=&quot;true&quot;</code>，即本端不维护关联关系，有多的那端维护。 </p><p>order-by，SQL中的排序条件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">"cn.shuaiyy.pojo"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"Category"</span> <span class="attr">table</span>=<span class="string">"category_"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">generator</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">list</span> <span class="attr">name</span>=<span class="string">"products"</span> <span class="attr">table</span>=<span class="string">"product_"</span> &gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"cid"</span> <span class="attr">not-null</span>=<span class="string">"false"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">list-index</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">"Product"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">      </div><div class="line">        <span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"productsSet"</span> <span class="attr">table</span>=<span class="string">"product_"</span> <span class="attr">inverse</span>=<span class="string">"true"</span></span></div><div class="line"><span class="tag">             <span class="attr">order-by</span>=<span class="string">"ORDER_NAME DESC"</span> <span class="attr">lazy</span>=<span class="string">"true"</span></span></div><div class="line"><span class="tag">        <span class="attr">batch-size</span>=<span class="string">"2"</span> <span class="attr">fetch</span>=<span class="string">"subselect"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"cid"</span> <span class="attr">not-null</span>=<span class="string">"false"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">"Product"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></div><div class="line">      </div><div class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Query query = s.createQuery(<span class="string">"from Category c"</span>);</div><div class="line">List&lt;Category&gt; cs= query.list();</div><div class="line">System.out.println(cs);</div><div class="line"><span class="keyword">for</span> (Category c : cs) &#123;</div><div class="line">  System.out.println(c.getName());</div><div class="line">  System.out.println(c.getProducts());</div><div class="line">  System.out.println(c.getProductsSet());</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>​</p></li></ol><h3 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h3><ol><li><p>一个用户可以购买多个商品，而一个商品也可以被多个用户购买，因此需要额外的user_product对应关系表。</p></li><li><p>many-to-many两边都要指定column属性，且指向相同的表。必须其中一端放弃维护关系(inverse=”true”)，否则有可能造成主键冲突。</p></li><li><p>实体类都有集合属性。User pojo中增加products属性，type为set。Product pojo中增加users属性，type为 set。</p></li><li><p>配置对应的mapping</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">"cn.shuaiyy.pojo"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"Product"</span> <span class="attr">table</span>=<span class="string">"product_"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">generator</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"price"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">many-to-one</span> <span class="attr">name</span>=<span class="string">"category"</span> <span class="attr">class</span>=<span class="string">"Category"</span> <span class="attr">column</span>=<span class="string">"cid"</span>  /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"users"</span> <span class="attr">table</span>=<span class="string">"user_product_"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"pid"</span> <span class="attr">not-null</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">many-to-many</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">class</span>=<span class="string">"User"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"User"</span> <span class="attr">table</span>=<span class="string">"user_"</span> &gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"user_id"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"user_name"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"products"</span> <span class="attr">table</span>=<span class="string">"user_product_"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">not-null</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">many-to-many</span> <span class="attr">class</span>=<span class="string">"Product"</span> <span class="attr">column</span>=<span class="string">"pid"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>访问对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Query query = s.createQuery(<span class="string">"from User c"</span>);</div><div class="line">List&lt;User&gt; users= query.list();</div><div class="line">System.out.println(users);</div><div class="line"><span class="keyword">for</span> (User user : users) &#123;</div><div class="line">  System.out.println(user.getName());</div><div class="line">  Set&lt;Product&gt; ps = user.getProducts();  <span class="comment">// 通过user访问其购买的product</span></div><div class="line">  <span class="keyword">for</span> (Product p : ps) &#123;</div><div class="line">    System.out.println(p.getName());</div><div class="line">    Set&lt;User&gt; pUsers = p.getUsers(); <span class="comment">// 通过product访问购买者user</span></div><div class="line">    System.out.println(<span class="string">"购买&#123; "</span>+p.getName()+<span class="string">"&#125; 的人共有："</span>+ pUsers.size()); </div><div class="line">    <span class="keyword">for</span>(User u : pUsers) System.out.println(u.getName() + <span class="string">" 购买了"</span> + p.getName());</div><div class="line">    &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure><p>​</p></li></ol><h2 id="继承映射"><a href="#继承映射" class="headerlink" title="继承映射"></a>继承映射</h2><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180412/23EEJ11HF6.png?imageslim" alt="mark"></p><p>实现多态查询，当查询父类对象时，也可以将其所有子类一起找到。</p><ul><li><p>subclass: 使用一张表保存父类和子类，使用一个辨别类型type字段<code>discriminator column</code>，并给父类和子类设定type的取值<code>discriminator-value</code>。子类自有的字段，在父类记录中为null值。</p><p>缺点是有冗余字段，子类独有字段不能加非空约束。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"Person"</span> <span class="attr">table</span>=<span class="string">"PERSONS"</span> <span class="attr">discriminator-value</span>=<span class="string">"PERSON"</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">type</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"ID"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"NAME"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 配置辨别者列 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">discriminator</span> <span class="attr">column</span>=<span class="string">"TYPE"</span> <span class="attr">type</span>=<span class="string">"string"</span>&gt;</span><span class="tag">&lt;/<span class="name">discriminator</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 映射子类 Student, 使用 subclass 进行映射 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">subclass</span> <span class="attr">name</span>=<span class="string">"Student"</span> <span class="attr">discriminator-value</span>=<span class="string">"STUDENT"</span>&gt;</span></div><div class="line">          <span class="comment">&lt;!--子类独有的属性 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"school"</span> <span class="attr">type</span>=<span class="string">"string"</span> <span class="attr">column</span>=<span class="string">"SCHOOL"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">subclass</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>joined-subclass:  父类实例保存在父类表中，子类实例由父类表和子类表共同存储。父类表保存共同的属性，每个子类使用单独的表保存独有字段。</p><p>插入子类时，要插入2张数据表。查询时也要做内连接查询。</p><p>优点：没有冗余字段，子类独有字段可以加非空约束。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"Person"</span> <span class="attr">table</span>=<span class="string">"PERSONS"</span>&gt;</span></div><div class="line"></div><div class="line">       <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">type</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"ID"</span> /&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span> /&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">       </div><div class="line">       <span class="tag">&lt;<span class="name">joined-subclass</span> <span class="attr">name</span>=<span class="string">"Student"</span> <span class="attr">table</span>=<span class="string">"STUDENTS"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"STUDENT_id"</span>&gt;</span><span class="tag">&lt;/<span class="name">key</span>&gt;</span>  <span class="comment">&lt;!-- 关联父类的ID --&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"school"</span> <span class="attr">type</span>=<span class="string">"string"</span> <span class="attr">column</span>=<span class="string">"SCHOOL"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">joined-subclass</span>&gt;</span> </div><div class="line">   <span class="tag">&lt;/<span class="name">class</span>&gt;</span></div></pre></td></tr></table></figure><p>​</p></li><li><p>union-subclass</p><p>父类表只包含父类的记录，子类表里只包含子类的记录，子类表包含父类的全部字段以及专有字段，因此父表主键的生成策略不能是identity(native) 的主键生成策略， native 会根据数据库优先使identity或sequence。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"Person"</span> <span class="attr">table</span>=<span class="string">"PERSONS"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">type</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"ID"</span> /&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 主键生成策略不能是native或identity --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"hilo"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">union-subclass</span> <span class="attr">name</span>=<span class="string">"Student"</span> <span class="attr">table</span>=<span class="string">"STUDENTS"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"school"</span> <span class="attr">column</span>=<span class="string">"SCHOOL"</span> <span class="attr">type</span>=<span class="string">"string"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">union-subclass</span>&gt;</span>               </div><div class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></div></pre></td></tr></table></figure><p>​</p></li></ul><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><ul><li><p>包括类，属性，关系的注解，及其他的注解。</p></li><li><p>使用注解和使用xml配置的优缺点</p><p>小的项目，简单的配置使用注解，开发速度快。大的项目，维护复杂，多人协同，用配置文件。</p><ul><li>配置文件： 容易编辑修改，配置集中，方便别人理解，重启生效，无需编译。缺点是繁琐、丑陋，配置过多时难以管理。</li><li>注解：简洁，开发时方便，和代码聚合度高。缺点也很明显，配置分散在各个类文件里，不易维护，修改后必须重新编译、打包、发布、上线启动应用。</li></ul></li></ul><h3 id="类、属性、关系注解"><a href="#类、属性、关系注解" class="headerlink" title="类、属性、关系注解"></a>类、属性、关系注解</h3><ul><li><p>修饰类</p><p>@Entity 表示这是一个实体类，用于映射表<br>@Table(name = “product”) 表示这是一个类，映射到的表名:product</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Table</span>(name = <span class="string">"product_"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> id;</div><div class="line">    String name;</div><div class="line">    <span class="keyword">float</span> price;</div><div class="line">  </div><div class="line">  <span class="meta">@Id</span></div><div class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY) </div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"id"</span>)   </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"name"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>属性注解</p><p>注意：属性的注解是配置在对应属性的getter方法上。</p><p>@Id 表示这是主键<br>@GeneratedValue(strategy = GenerationType.IDENTITY) </p><ul><li>identity 表示自增长方式使用mysql自带的</li><li>sequence 底层数据库序列生成标识符，mysql不支持</li><li>hilo 由Hibernate负责生成，应用high/low算法</li><li>native：自行依次匹配上面3种</li></ul><p>@Column(name = “id”) 表示映射到字段id</p></li><li><p>多对一注解</p><p>多个Product对应一个category，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Table</span>(name = <span class="string">"product_"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> Category category;</div><div class="line">  <span class="meta">@ManyToOne</span>(targetEntity = Category.class)</div><div class="line">    <span class="meta">@JoinColumn</span>(name = <span class="string">"cid"</span>) <span class="comment">//外键</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Category <span class="title">getCategory</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> category;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 或者使用JoinTable</span></div><div class="line">      <span class="meta">@ManyToOne</span>(cascade=&#123;CascadeType.PERSIST,CascadeType.MERGE&#125;) </div><div class="line">      <span class="meta">@JoinTable</span>(name=<span class="string">"关联表名"</span>， </div><div class="line">      joinColumns = <span class="meta">@JoinColumn</span>(name=<span class="string">"主表外键"</span>), </div><div class="line">      inverseJoinColumns = <span class="meta">@JoinColumns</span>(name=<span class="string">"从表外键"</span>) </div><div class="line">      )</div><div class="line">      <span class="function"><span class="keyword">public</span> Category <span class="title">getCategory</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> category;</div><div class="line">      &#125;</div></pre></td></tr></table></figure><p>​</p></li><li><p>一对多注解</p><p>1个category可以获取多个product</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Table</span>(name = <span class="string">"category_"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Category</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Set&lt;Product&gt; productsSet;</div><div class="line">  </div><div class="line">    <span class="meta">@OneToMany</span>(fetch = FetchType.EAGER)</div><div class="line">    <span class="meta">@JoinColumn</span>(name=<span class="string">"cid"</span>)  <span class="comment">// 外键</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Product&gt; <span class="title">getProductsSet</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> productsSet;</div><div class="line">    &#125;</div><div class="line">  <span class="comment">//或者  mappedBy= “多” pojo类的关联属性</span></div><div class="line">  <span class="meta">@OneToMany</span>(fetch = FetchType.EAGER, mappedBy = <span class="string">"category"</span>) <span class="comment">// Product的 category属性</span></div><div class="line">  <span class="function"><span class="keyword">public</span> Set&lt;Product&gt; <span class="title">getProductsSet</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> productsSet;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>​</p></li><li><p>多对多注解</p><p>多个用户可以拥有多个物品，需要单独一张表维护用户-物品关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@Entity</span></div><div class="line"><span class="meta">@Table</span>(name = <span class="string">"user_"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Set&lt;Product&gt; products;  <span class="comment">// 通过用户获取其多个物品   </span></div><div class="line">    <span class="meta">@ManyToMany</span>(targetEntity = Product.class)</div><div class="line">    <span class="meta">@JoinTable</span>(name = <span class="string">"user_product_"</span>,</div><div class="line">            joinColumns = <span class="meta">@JoinColumn</span>(name=<span class="string">"uid"</span>), <span class="comment">// user与user_product join</span></div><div class="line">            inverseJoinColumns = <span class="meta">@JoinColumn</span>(name=<span class="string">"pid"</span>)) <span class="comment">// product与user_product 连接</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Product&gt; <span class="title">getProducts</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> products;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Table</span>(name = <span class="string">"product_"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Set&lt;User&gt; users;  <span class="comment">//获取拥有该物品的全部用户</span></div><div class="line">  </div><div class="line">    <span class="meta">@ManyToMany</span>(targetEntity = User.class)  </div><div class="line">    <span class="meta">@JoinTable</span>(name = <span class="string">"user_product_"</span>,</div><div class="line">      joinColumns = <span class="meta">@JoinColumn</span>(name = <span class="string">"pid"</span>), <span class="comment">// product 与user_product的关联列是pid</span></div><div class="line">     inverseJoinColumns = <span class="meta">@JoinColumn</span>(name = <span class="string">"uid"</span>)) <span class="comment">// user与user_product的关联列是uid</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Set&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> users;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>​</p></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>对数据的修改操作应在事务中进行，以保护数据的完整性。</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180411/dL3id7h48j.png?imageslim" alt="mark"></p><p>hibernate.connection.isolation 属性设置事务的隔离级别。</p><h3 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h3><p>通过JDBC的API来实现，具体的方式是实现Work接口的匿名类。</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180411/kgkl0h5Cc3.png?imageslim" alt="mark"></p><h3 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h3><p>数据库底层的触发器对Session是透明的，会导致缓存与数据库里的数据不一致。尤其是update()方法，无论游离对象的属性是否变化，都会执行update查询，激活相应的触发器。</p><p>解决方法1、执行数据操作后立即显示的调用flush和refresh方法。2、映射文件的class级别设置属性<code>select-before-update</code>，更新前先检查对象是否发生变化。</p><h3 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h3><ul><li><p>属性延迟加载</p><p>使用load获取对象时，只有第一次访问到了对象的属性，才去数据库里取该对象数据。</p></li><li><p>关系延迟加载</p><p>映射关系的lazy设置为true <code>&lt;</code>setname<code>=</code>“products” lazy<code>=</code>“true”<code>&gt;</code></p></li><li><p>一旦session关闭，访问延时加载的属性就会抛出延时加载异常</p></li></ul><h3 id="级联"><a href="#级联" class="headerlink" title="级联"></a>级联</h3><p>级联一般用在one-many 或many-to-many的关系上，在删除，保存，更新时，同时修改其关联的数据对象。</p><p>比如删除一个分类吗，则该分类下的产品都删除。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> <span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"products"</span> <span class="attr">cascade</span>=<span class="string">"delete"</span> <span class="attr">lazy</span>=<span class="string">"false"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"cid"</span> <span class="attr">not-null</span>=<span class="string">"false"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">"Product"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></div></pre></td></tr></table></figure><p>cascade取值常用的有4种：</p><ol><li><p>none，默认值，不级联</p></li><li><p>delete， 删除操作级联</p><p>删除分类时，会将对应cid的product都删除。不级联时，只把cid设置为null。</p></li><li><p>save-update，保存更新时级联</p><p>保存category时，会将其products属性里的product写入数据库</p></li><li><p>all，即删除，保存，更新时级联</p></li><li><p>delete-orphan： 删除所有和当前对象解除关联关系的对象。比如删除一个category，则该分类下的商品都是孤儿，会被删除。</p></li></ol><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><ul><li><p>一级缓存</p><p>同一session下的相同查询，只访问一次数据库。</p><ul><li>flush()  将缓存中对象的变更同步到数据库，commit事务之后才会执行写数据库。调用commit或执行查询之前都会调用flush方法。但是如果调用save方法，且OID为native生成器生成时，会立即执行sql写入数据库。因为必须访问数据库才能确定OID，所以是直接插入。</li><li>refresh()： 从数据库中更新session缓存</li><li>clear()  清除session缓存</li></ul></li><li><p>二级缓存</p><p>不同session的相同查询，只第一次去数据库取数据</p><p>hibernate本身未实现二级缓存功能，，需要第三方插件，这里使用EhCache</p><ol><li><p>导入ehcache包，并增加二级缓存的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></div><div class="line">  ...  </div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.cache.use_second_level_cache"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.cache.provider_class"</span>&gt;</span>org.hibernate.cache.EhCacheProvider<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>创建一个ehcache.xml用于EHCache的缓存配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ehcache</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--  </span></div><div class="line"><span class="comment">    指定一个目录：当 EHCache 把数据写到硬盘上时, 将把数据写到这个目录下.</span></div><div class="line"><span class="comment">    --&gt;</span>     </div><div class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">"d:\\tempDirectory"</span>/&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--Default Cache configuration. These will applied to caches programmatically created through</span></div><div class="line"><span class="comment">        the CacheManager.</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">        The following attributes are required for defaultCache:</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">        maxInMemory       - Sets the maximum number of objects that will be created in memory</span></div><div class="line"><span class="comment">        eternal           - Sets whether elements are eternal. If eternal,  timeouts are ignored and the element</span></div><div class="line"><span class="comment">                            is never expired.</span></div><div class="line"><span class="comment">        timeToIdleSeconds - Sets the time to idle for an element before it expires. Is only used</span></div><div class="line"><span class="comment">                            if the element is not eternal. Idle time is now - last accessed time</span></div><div class="line"><span class="comment">        timeToLiveSeconds - Sets the time to live for an element before it expires. Is only used</span></div><div class="line"><span class="comment">                            if the element is not eternal. TTL is now - creation time</span></div><div class="line"><span class="comment">        overflowToDisk    - Sets whether elements can overflow to disk when the in-memory cache</span></div><div class="line"><span class="comment">                            has reached the maxInMemory limit.</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">        --&gt;</span></div><div class="line">    <span class="comment">&lt;!--  </span></div><div class="line"><span class="comment">    设置缓存的默认数据过期策略 </span></div><div class="line"><span class="comment">    --&gt;</span>    </div><div class="line">    <span class="tag">&lt;<span class="name">defaultCache</span></span></div><div class="line"><span class="tag">        <span class="attr">maxElementsInMemory</span>=<span class="string">"10000"</span></span></div><div class="line"><span class="tag">        <span class="attr">eternal</span>=<span class="string">"false"</span></span></div><div class="line"><span class="tag">        <span class="attr">timeToIdleSeconds</span>=<span class="string">"120"</span></span></div><div class="line"><span class="tag">        <span class="attr">timeToLiveSeconds</span>=<span class="string">"120"</span></span></div><div class="line"><span class="tag">        <span class="attr">overflowToDisk</span>=<span class="string">"true"</span></span></div><div class="line"><span class="tag">        /&gt;</span></div><div class="line"></div><div class="line">   <span class="comment">&lt;!--  </span></div><div class="line"><span class="comment">   设定具体的命名缓存的数据过期策略。每个命名缓存代表一个缓存区域</span></div><div class="line"><span class="comment">   缓存区域(region)：一个具有名称的缓存块，可以给每一个缓存块设置不同的缓存策略。</span></div><div class="line"><span class="comment">   如果没有设置任何的缓存区域，则所有被缓存的对象，都将使用默认的缓存策略。即：&lt;defaultCache.../&gt;</span></div><div class="line"><span class="comment">   Hibernate 在不同的缓存区域保存不同的类/集合。</span></div><div class="line"><span class="comment">对于类而言，区域的名称是类名。如:com.atguigu.domain.Customer</span></div><div class="line"><span class="comment">对于集合而言，区域的名称是类名加属性名。如com.atguigu.domain.Customer.orders</span></div><div class="line"><span class="comment">   --&gt;</span></div><div class="line">   <span class="comment">&lt;!--  </span></div><div class="line"><span class="comment">   name: 设置缓存的名字,它的取值为类的全限定名或类的集合的名字 </span></div><div class="line"><span class="comment">maxElementsInMemory: 设置基于内存的缓存中可存放的对象最大数目 </span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">eternal: 设置对象是否为永久的, true表示永不过期,</span></div><div class="line"><span class="comment">此时将忽略timeToIdleSeconds 和 timeToLiveSeconds属性; 默认值是false </span></div><div class="line"><span class="comment">timeToIdleSeconds:设置对象空闲最长时间,以秒为单位, 超过这个时间,对象过期。</span></div><div class="line"><span class="comment">当对象过期时,EHCache会把它从缓存中清除。如果此值为0,表示对象可以无限期地处于空闲状态。 </span></div><div class="line"><span class="comment">timeToLiveSeconds:设置对象生存最长时间,超过这个时间,对象过期。</span></div><div class="line"><span class="comment">如果此值为0,表示对象可以无限期地存在于缓存中. 该属性值必须大于或等于 timeToIdleSeconds 属性值 </span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">overflowToDisk:设置基于内存的缓存中的对象数目达到上限后,是否把溢出的对象写到基于硬盘的缓存中 </span></div><div class="line"><span class="comment">   --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">cache</span> <span class="attr">name</span>=<span class="string">"com.hello.entities.Employee"</span></span></div><div class="line"><span class="tag">        <span class="attr">maxElementsInMemory</span>=<span class="string">"1"</span></span></div><div class="line"><span class="tag">        <span class="attr">eternal</span>=<span class="string">"false"</span></span></div><div class="line"><span class="tag">        <span class="attr">timeToIdleSeconds</span>=<span class="string">"300"</span></span></div><div class="line"><span class="tag">        <span class="attr">timeToLiveSeconds</span>=<span class="string">"600"</span></span></div><div class="line"><span class="tag">        <span class="attr">overflowToDisk</span>=<span class="string">"true"</span></span></div><div class="line"><span class="tag">        /&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">cache</span> <span class="attr">name</span>=<span class="string">"com.hello.Department.emps"</span></span></div><div class="line"><span class="tag">        <span class="attr">maxElementsInMemory</span>=<span class="string">"1000"</span></span></div><div class="line"><span class="tag">        <span class="attr">eternal</span>=<span class="string">"true"</span></span></div><div class="line"><span class="tag">        <span class="attr">timeToIdleSeconds</span>=<span class="string">"0"</span></span></div><div class="line"><span class="tag">        <span class="attr">timeToLiveSeconds</span>=<span class="string">"0"</span></span></div><div class="line"><span class="tag">        <span class="attr">overflowToDisk</span>=<span class="string">"false"</span></span></div><div class="line"><span class="tag">        /&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>在需要缓存的pojo对象的mapping配置里增加一行 <code>&lt;</code>cacheusage<code>=</code>“read-only”/&gt;</p></li></ol></li><li><p>对象缓存机制</p><p>Hibernate的缓存机制，可以通过ID将查询到的对象保存在缓存中。</p><p>但是query.list()的查询结果都是取自数据库的，而不是从缓存中获取已有对象。</p><p>可以通过<strong>N+1</strong>的查询方式，利用缓存。即分2步查询：</p><ul><li>第一步查询获得N条记录，但只取出其ID；</li><li>第二部：如果ID存在缓存中，则从缓存获取对象，否则访问数据库获取ID对应的数据记录。</li></ul><p>具体代码也很简单，query的Iterator对象会先得到ID集合，然后调用next()方法获取对象即可，hibernate自动访问缓存对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">String name = <span class="string">"iphone"</span>;</div><div class="line">         </div><div class="line">Query q =s.createQuery(<span class="string">"from Product p where p.name like ?"</span>);</div><div class="line"></div><div class="line">q.setString(<span class="number">0</span>, <span class="string">"%"</span>+name+<span class="string">"%"</span>);</div><div class="line"></div><div class="line">Iterator&lt;Product&gt; it= q.iterate();</div><div class="line"><span class="keyword">while</span>(it.hasNext())&#123;</div><div class="line">  Product p =it.next();</div><div class="line">  System.out.println(p.getName());</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>​</p></li></ul><h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><p>使用Criteria进行分页查询 无论你使用的是Oracle,Mysql,NoSQL还是DB2，分页查询的代码写法都是一样的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">Session s = sf.openSession();</div><div class="line">s.beginTransaction();</div><div class="line"></div><div class="line">String name = <span class="string">"iphone"</span>;</div><div class="line"></div><div class="line">Criteria c= s.createCriteria(Product.class);</div><div class="line"> <span class="comment">//得到滚动结果集</span></div><div class="line">ScrollableResults scroll = c.scroll();</div><div class="line"><span class="comment">//滚动到最后一行</span></div><div class="line">scroll.last();</div><div class="line"><span class="keyword">int</span> total = scroll.getRowNumber() + <span class="number">1</span>; <span class="comment">// 全部记录数</span></div><div class="line"></div><div class="line">c.add(Restrictions.like(<span class="string">"name"</span>, <span class="string">"%"</span>+name+<span class="string">"%"</span>));</div><div class="line"><span class="comment">//起始</span></div><div class="line">c.setFirstResult(<span class="number">2</span>);</div><div class="line"><span class="comment">//每页数量</span></div><div class="line">c.setMaxResults(<span class="number">5</span>);</div><div class="line"></div><div class="line"><span class="comment">// 拿到数据</span></div><div class="line">List&lt;Product&gt; ps = c.list();</div><div class="line"><span class="keyword">for</span> (Product p : ps) &#123;</div><div class="line">  System.out.println(p.getName());</div><div class="line">&#125;</div><div class="line">          </div><div class="line">s.getTransaction().commit();</div></pre></td></tr></table></figure><p>获取总数的另一种方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Query q =s.createQuery(<span class="string">"select count(*) from Product p where p.name like ?"</span>);</div><div class="line">q.setString(<span class="number">0</span>, <span class="string">"%"</span>+name+<span class="string">"%"</span>);</div><div class="line"><span class="keyword">long</span> total= (Long) q.uniqueResult();</div><div class="line">System.out.println(total);</div></pre></td></tr></table></figure><h3 id="OpenSession"><a href="#OpenSession" class="headerlink" title="OpenSession"></a>OpenSession</h3><p>获取session有两种方式： openSession 和getCurrentSession</p><ol><li>openSession每次都会得到一个新的Session对象， 只有在增加，删除，修改的时候需要事务，查询时不需要的 。</li><li>getCurrentSession在同一个线程中，每次都是获取相同的Session对象，但是在不同的线程中获取的是不同的Session对象 。getCurrentSession是所有操作都<strong>必须</strong>放在<strong>事务</strong>中进行，并且提交事务后，session就<strong>自动关闭</strong>，不能够调用close方法。 </li></ol><h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><p>数据库锁机制是为了保护数据完整性，防止产生脏数据的。</p><p>以脏读数据为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">i = <span class="number">0</span>;</div><div class="line">session1&#123;</div><div class="line">  get i;</div><div class="line">  i++; <span class="comment">// i=1</span></div><div class="line">&#125;</div><div class="line">session2&#123;</div><div class="line">  get i;</div><div class="line">  i++; <span class="comment">// i=1</span></div><div class="line">&#125;</div><div class="line">session1.commit()</div><div class="line">session1.commit()</div><div class="line"><span class="comment">// 两次相加后i仍是1，而不是2.因为session在未提交时，没写回最新数据，旧数据又被读出</span></div></pre></td></tr></table></figure><p> 实现乐观锁的核心，版本控制：</p><ol><li><p>为product pojo 增加version属性。</p></li><li><p>在mapping配置中，增加version节点，version必须紧挨着id节点的下一个。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"Product"</span> <span class="attr">table</span>=<span class="string">"product_"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></div><div class="line">  <span class="comment">&lt;!--version元素必须紧挨着id后面  --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span> <span class="attr">name</span>=<span class="string">"version"</span> <span class="attr">column</span>=<span class="string">"ver"</span> <span class="attr">type</span>=<span class="string">"int"</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"price"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></div></pre></td></tr></table></figure><p>​</p></li></ol><h3 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h3><p>导入c3p0包hibernate-c3p0，使用c3p0连接池，在cfg配置文件的session-factory中添加如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--&lt;property name="hibernate.connection.provider_class"&gt;--&gt;</span></div><div class="line">            <span class="comment">&lt;!--org.hibernate.c3p0.internal.C3P0ConnectionProvider--&gt;</span></div><div class="line">        <span class="comment">&lt;!--&lt;/property&gt;--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.c3p0.max_size"</span>&gt;</span>20<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.c3p0.min_size"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.c3p0.timeout"</span>&gt;</span>50000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.c3p0.max_statements"</span>&gt;</span>100<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.c3p0.idle_test_period"</span>&gt;</span>3000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 当连接池耗尽并接到获得连接的请求，则新增加连接的数量 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.c3p0.acquire_increment"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 是否验证，检查连接 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.c3p0.validate"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div></pre></td></tr></table></figure><h1 id="Spring-Hibernate"><a href="#Spring-Hibernate" class="headerlink" title="Spring + Hibernate"></a>Spring + Hibernate</h1><p>由spring管理bean对象 和SessionFactory对象</p><ol><li><p>数据库连接池</p></li><li><p>Hibernate SessionFactory</p></li><li><p>session bean</p><p>hibernate3需要一个继承 <code>HibernateTemplate</code>的子类来接收SessionFactory的注入</p><p>hibernate4不在需要由spring提供HibernateTemplate类的支持，使用原生的hibernate API更好。</p><p>因此可以在dao中直接获取sessionFactory使用session创建query查询。</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 连接池 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/test?characterEncoding=UTF-8"</span>/&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.LocalSessionFactoryBean"</span>&gt;</span></div><div class="line">     <span class="comment">&lt;!-- 指定Hibernate配置文件的路径， 或者使用 property name="hibernateProperties"--&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"hibernate.cfg.xml"</span>/&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></div><div class="line">     <span class="comment">&lt;!-- 指定映射文件的位置 --&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappingResources"</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>cn/shuaiyy/pojo/Category.hbm.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>cn/shuaiyy/pojo/Product.hbm.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>cn/shuaiyy/pojo/User.hbm.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">           <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernateProperties"</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">value</span>&gt;</span></div><div class="line">               hibernate.dialect=org.hibernate.dialect.MySQLDialect</div><div class="line">               hibernate.show_sql=true</div><div class="line">               hbm2ddl.auto=update</div><div class="line">           <span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">   </div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"dao"</span> <span class="attr">class</span>=<span class="string">"cn.shuaiyy.dao.DAO"</span>&gt;</span></div><div class="line">       <span class="comment">&lt;!-- 为dao注入sessionFactory属性 --&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>/&gt;</span> </div><div class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.shuaiyy.pojo"</span>/&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></div></pre></td></tr></table></figure><ol><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testSpring</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">        ApplicationContext context = <span class="keyword">new</span>  ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</div><div class="line">        DAO dao = (DAO) context.getBean(<span class="string">"dao"</span>);</div><div class="line">        Product p = dao.get(Product.class, <span class="number">1</span>);</div><div class="line"></div><div class="line">        SessionFactory sf = (SessionFactory) context.getBean(<span class="string">"sessionFactory"</span>);</div><div class="line">        Session session =  sf.openSession();</div><div class="line">        System.out.println(session.get(Product.class, <span class="number">1</span>).toString());</div><div class="line">        System.out.println(p.getName());</div><div class="line">        List&lt;Category&gt; cs = (List&lt;Category&gt;) session.createQuery(<span class="string">"from Category c "</span>).list();</div><div class="line">        <span class="keyword">for</span> (Category c : cs) &#123;</div><div class="line">            System.out.println(c.getName());</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>​</p></li></ol><h1 id="Spring-SpringMVC-Hibernate"><a href="#Spring-SpringMVC-Hibernate" class="headerlink" title="Spring + SpringMVC + Hibernate"></a>Spring + SpringMVC + Hibernate</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hibernate入门&quot;&gt;&lt;a href=&quot;#Hibernate入门&quot; class=&quot;headerlink&quot; title=&quot;Hibernate入门&quot;&gt;&lt;/a&gt;Hibernate入门&lt;/h1&gt;&lt;p&gt;一个Java 领域的持久化框架，ORM 框架。&lt;/p&gt;
&lt;p&gt;“持久化”包括和数据库相关的各种操作：增删查改，根据OID加载对象。&lt;/p&gt;
&lt;h2 id=&quot;Hello-World&quot;&gt;&lt;a href=&quot;#Hello-World&quot; class=&quot;headerlink&quot; title=&quot;Hello World&quot;&gt;&lt;/a&gt;Hello World&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;创建数据库表和POJO对象 Product.java&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;配置POJO到table的映射关系 &lt;code&gt;Product.hbm.xml&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE hibernate-mapping PUBLIC&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;hibernate-mapping&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;package&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;cn.shuaiyy.pojo&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;Product&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;table&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;product_&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;column&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;generator&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;native&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;generator&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;price&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;class&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;hibernate-mapping&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Java" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/Java/"/>
    
      <category term="Hibernate" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/Java/Hibernate/"/>
    
    
      <category term="Java" scheme="http://shuaiyy.cn/tags/Java/"/>
    
      <category term="ORM" scheme="http://shuaiyy.cn/tags/ORM/"/>
    
      <category term="Hibernate" scheme="http://shuaiyy.cn/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>IDEA创建Java Web项目</title>
    <link href="http://shuaiyy.cn/2018/02/11/%E6%8A%80%E6%9C%AF/IDEA%E5%88%9B%E5%BB%BAWEB%E9%A1%B9%E7%9B%AE/"/>
    <id>http://shuaiyy.cn/2018/02/11/技术/IDEA创建WEB项目/</id>
    <published>2018-02-10T16:00:00.000Z</published>
    <updated>2018-06-03T08:05:58.105Z</updated>
    
    <content type="html"><![CDATA[<h3 id="IDEA创建WEB项目"><a href="#IDEA创建WEB项目" class="headerlink" title="IDEA创建WEB项目"></a>IDEA创建WEB项目</h3><ul><li><p>new project  &gt; web application</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180304/BHKlfgKFHm.png?imageslim" alt="mark"></p></li><li><p>更改编译输出的目录，引入项目依赖的包</p><p><code>ctrl alt shift s</code> 打开project structure：</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180304/mBkJHl4hEB.png?imageslim" alt="mark"></p><a id="more"></a></li><li><p>配置Tomcat 和项目自动部署</p><ol><li><p>edit configure，添加Tomcat服务器</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180304/36IbcHd940.png?imageslim" alt="mark"> </p></li><li><p>在deployment选项卡下，添加Artifact</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180304/f3IemdEIJl.png?imageslim" alt="mark"> </p></li><li><p>选中server选项卡，配置项目自动更新和部署</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180304/iDikH9FG70.png?imageslim" alt="mark"> </p></li><li><p>应用设置后，运行Tomcat</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180304/KC6EHbmG3D.png?imageslim" alt="mark"></p></li></ol></li><li><p>修改webapp的部署路径</p><p>修改<strong>Project Structure—&gt;Artifacts</strong>中的<strong>Output</strong>的目录，如改到tomat的webapps下。</p></li></ul><h3 id="Java普通项目转为-Web-Application"><a href="#Java普通项目转为-Web-Application" class="headerlink" title="Java普通项目转为 Web Application"></a>Java普通项目转为 Web Application</h3><ul><li><p>新建一个java普通项目</p></li><li><p>从已有的web项目中，将webapp文件夹复制到普通java项目中</p></li><li><p>File-&gt;project structure-&gt;Facts，然后点击绿色的“+”号，点击web，</p><p>在右侧框中，上半部分的路径修改为web.xml的路径，下半部分的路径修改为webapp文件夹的路径</p><p>如果有黄色的！，则fix -&gt; created。创建的artifacts中<strong>Output</strong>路径定位到web一级。</p></li><li><p>edit configure，配置Tomcat服务器和Deployment设置。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;IDEA创建WEB项目&quot;&gt;&lt;a href=&quot;#IDEA创建WEB项目&quot; class=&quot;headerlink&quot; title=&quot;IDEA创建WEB项目&quot;&gt;&lt;/a&gt;IDEA创建WEB项目&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;new project  &amp;gt; web application&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o8i01ajlj.bkt.clouddn.com/blog/180304/BHKlfgKFHm.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;更改编译输出的目录，引入项目依赖的包&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctrl alt shift s&lt;/code&gt; 打开project structure：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o8i01ajlj.bkt.clouddn.com/blog/180304/mBkJHl4hEB.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Java" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/Java/"/>
    
      <category term="IDEA" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/Java/IDEA/"/>
    
    
      <category term="Java" scheme="http://shuaiyy.cn/tags/Java/"/>
    
      <category term="IDEA" scheme="http://shuaiyy.cn/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>Java编程高级编程</title>
    <link href="http://shuaiyy.cn/2018/02/10/%E6%8A%80%E6%9C%AF/J2EE/"/>
    <id>http://shuaiyy.cn/2018/02/10/技术/J2EE/</id>
    <published>2018-02-09T16:00:00.000Z</published>
    <updated>2018-06-03T08:06:38.520Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><h4 id="下载Tomcat"><a href="#下载Tomcat" class="headerlink" title="下载Tomcat"></a>下载Tomcat</h4><p>进入官网<a href="http://tomcat.apache.org/，选择download，下载所需Tomcat版本。" target="_blank" rel="external">http://tomcat.apache.org/，选择download，下载所需Tomcat版本。</a></p><p>我用的是Tomcat7，core x64 zip。不同版本的比较参考<a href="http://tomcat.apache.org/whichversion.html" target="_blank" rel="external">官网</a>。</p><p>解压后，点击bin里的startup.bat运行，访问<a href="http://127.0.0.1:8080，可以看到欢迎界面，运行shutdown.bat关闭Tomcat。" target="_blank" rel="external">http://127.0.0.1:8080，可以看到欢迎界面，运行shutdown.bat关闭Tomcat。</a></p><h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><ul><li><p>在系统变量里添加2个变量 CATALINA_BASE，CATALINA_HOME</p><p><strong>变量名：CATALINA_BASE</strong></p><p><strong>变量值：C:\Program Files\Java\apache-tomcat-7.0.85       //Tomcat安装目录</strong></p><p><strong>变量名：CATALINA_HOME</strong></p><p><strong>变量值：C:\Program Files\Java\apache-tomcat-7.0.85</strong></p></li><li><p>修改classpath和path</p><p>在ClassPath的变量值中加入：<code>%CATALINA_HOME%\lib\servlet-api.jar;</code>（注意加的时候在原变量值后加<code>;</code>）</p><p>在path中添加 <code>%CATALINA_HOME%\bin;%CATALINA_HOME%\lib;</code></p></li><li><p>验证</p><p>新打开一个cmd，输入startup：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">C:\Users\<span class="number">20189</span>&gt;startup</div><div class="line">Using CATALINA_BASE:   <span class="string">"C:\Program Files\Java\apache-tomcat-7.0.85"</span></div><div class="line">Using CATALINA_HOME:   <span class="string">"C:\Program Files\Java\apache-tomcat-7.0.85"</span></div><div class="line">Using CATALINA_TMPDIR: <span class="string">"C:\Program Files\Java\apache-tomcat-7.0.85\temp"</span></div><div class="line">Using JRE_HOME:        <span class="string">"C:\Program Files\Java\jdk1.8.0_151"</span></div><div class="line">Using CLASSPATH:       <span class="string">"C:\Program Files\Java\apache-tomcat-7.0.85\bin\bootstrap.jar;C:\Program Files\Java\apache-tomcat-7.0.85\bin\tomcat-juli.jar"</span></div></pre></td></tr></table></figure></li></ul><a id="more"></a><h4 id="Tomcat的配置文件"><a href="#Tomcat的配置文件" class="headerlink" title="Tomcat的配置文件"></a>Tomcat的配置文件</h4><p>在conf目录下，server.xml中修改端口号和webapps所在的目录</p><p>Host下增加<code>&lt;Context path=&quot;/web&quot; reloadable=&quot;false&quot; docBase=&quot;D:\\j2ee\\web&quot; /&gt;</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></div><div class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></div><div class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"localhost"</span>  <span class="attr">appBase</span>=<span class="string">"webapps"</span></span></div><div class="line"><span class="tag">            <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">"/web"</span> <span class="attr">reloadable</span>=<span class="string">"false"</span> <span class="attr">docBase</span>=<span class="string">"D:\\j2ee\\web"</span> /&gt;</span> </div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- SingleSignOn valve, share authentication between web applications</span></div><div class="line"><span class="comment">             Documentation at: /docs/config/valve.html --&gt;</span></div><div class="line">        <span class="comment">&lt;!--</span></div><div class="line"><span class="comment">        &lt;Valve className="org.apache.catalina.authenticator.SingleSignOn" /&gt;</span></div><div class="line"><span class="comment">        --&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- Access log processes all example.</span></div><div class="line"><span class="comment">             Documentation at: /docs/config/valve.html</span></div><div class="line"><span class="comment">             <span class="doctag">Note:</span> The pattern used is equivalent to using pattern="common" --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.valves.AccessLogValve"</span> <span class="attr">directory</span>=<span class="string">"logs"</span></span></div><div class="line"><span class="tag">               <span class="attr">prefix</span>=<span class="string">"localhost_access_log."</span> <span class="attr">suffix</span>=<span class="string">".txt"</span></span></div><div class="line"><span class="tag">               <span class="attr">pattern</span>=<span class="string">"%h %l %u %t &amp;quot;%r&amp;quot; %s %b"</span> /&gt;</span></div><div class="line"></div><div class="line">      <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></div></pre></td></tr></table></figure><p>cmd查看端口占用并kill相关进程</p><ul><li>查看端口占用进程的pid <code>netstat -ano|findstr &quot;80&quot;</code> </li><li>找到对应PID的进程详情<code>tasklist|findstr &quot;1828&quot;</code></li><li>根据进程名kill进程 <code>taskkill /f /t /im java.exe</code></li></ul><h4 id="在IDEA中配置Tomcat"><a href="#在IDEA中配置Tomcat" class="headerlink" title="在IDEA中配置Tomcat"></a>在IDEA中配置Tomcat</h4><ol><li><p>点击Run-Edit Configurations…</p></li><li><p>点击左侧“+”，选择Tomcat Server–Local</p></li><li><p>在Tomcat Server -&gt; Unnamed -&gt; Server -&gt; Application server下，点击 Configuration ，找到本地 Tomcat 服务器所在目录，点击 OK按钮。还可以修改name，端口号等其他配置。</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180302/f2HLdDC7fc.png?imageslim" alt="mark"></p></li></ol><h4 id="IDEA中部署webapp到Tomcat"><a href="#IDEA中部署webapp到Tomcat" class="headerlink" title="IDEA中部署webapp到Tomcat"></a>IDEA中部署webapp到Tomcat</h4><h3 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h3><h4 id="简单的Servlet"><a href="#简单的Servlet" class="headerlink" title="简单的Servlet"></a>简单的Servlet</h4><p>项目结构：</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180303/KDJm2I6hD8.png?imageslim" alt="mark"></p><ul><li><p>创建目录<code>web\WEB-INF\classes</code> ，将Servlet类的编译文件输出到classes目录下。</p><p>IDEA修改项目编译输出的位置：“ ctrl alt shift s” 打开project structure，module  -&gt; Paths </p></li><li><p>与classes同级的位置创建<code>web.xml</code>配置文件，配置Servlet类的URL映射。</p></li></ul><ul><li><p>HelloServlet.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            resp.getWriter().println(<span class="string">"&lt;h1&gt;Hello World！&lt;/h1&gt; &lt;br&gt;"</span>);</div><div class="line">            resp.getWriter().println(<span class="keyword">new</span> Date().toString());</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p><code>web/WEB-INF/web.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- URL映射 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p><code>Tomcat/conf/server.xml</code></p><p>Tomcat的<code>server.xml</code>中配置网站的prefix URL和对应的web文件目录。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"localhost"</span>  <span class="attr">appBase</span>=<span class="string">"webapps"</span> <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- webapp的前缀URL和对应的webapp的位置 --&gt;</span> </div><div class="line">              <span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">"/web"</span> <span class="attr">reloadable</span>=<span class="string">"false"</span> <span class="attr">docBase</span>=<span class="string">"C:\Users\20189\IdeaProjects\HelloWeb\web"</span> /&gt;</span></div></pre></td></tr></table></figure></li></ul><h4 id="request和response对象"><a href="#request和response对象" class="headerlink" title="request和response对象"></a>request和response对象</h4><ul><li><p>定义处理get 、post请求</p><p>重写HttpServlet的doGet、doPost方法,或者使用service方法，会自动判读get、post请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span>&#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span>&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>​</p></li><li><p>获取参数和中文解析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">request.setCharacterEncoding(<span class="string">"utf-8"</span>); <span class="comment">// 最开始设置编码后，就不用对每个参数都中文解码了</span></div><div class="line"></div><div class="line">String username = request.getParameter(<span class="string">"username"</span>); <span class="comment">// get ,post 获取参数方式一样</span></div><div class="line">        <span class="comment">//中文参数解码</span></div><div class="line"><span class="comment">//        byte[] bytes=  username.getBytes("ISO-8859-1");</span></div><div class="line"><span class="comment">//        username = new String(bytes,"UTF-8");</span></div></pre></td></tr></table></figure><p>​</p></li><li><p>返回响应</p><p>html标签要齐全，必须在头文件中声明html格式内容，这样浏览器才能正常解析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 返回的响应支持中文编码</span></div><div class="line">response.setContentType(<span class="string">"text/html; charset=UTF-8"</span>); <span class="comment">// 设置内容格式和编码格式</span></div><div class="line">response.setCharacterEncoding(<span class="string">"UTF-8"</span>); <span class="comment">//设置编码格式的</span></div><div class="line">PrintWriter pw = response.getWriter();</div><div class="line">pw.println(html);</div></pre></td></tr></table></figure></li><li><p>URL跳转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 让Servlet进行页面跳转, 浏览器的url改变 302临时跳转</span></div><div class="line">        response.sendRedirect(<span class="string">"fail.html"</span>);</div><div class="line"><span class="comment">// 301永久重定向, url跳转</span></div><div class="line">        response.setStatus(<span class="number">301</span>);</div><div class="line">        response.setHeader(<span class="string">"Location"</span>, <span class="string">"404.html"</span>);</div><div class="line"></div><div class="line"><span class="comment">//服务器页面跳转，浏览器地址中的地址不变</span></div><div class="line">        request.getRequestDispatcher(<span class="string">"success.html"</span>).forward(request, response);</div></pre></td></tr></table></figure></li><li><p>常用方法</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// 获取ip 端口等，默认的端口80，取到的值为空</span></div><div class="line"></div><div class="line">    System.out.println(<span class="string">"完整的URL请求（协议、主机名、端口）: "</span> + request.getRequestURL());</div><div class="line">    System.out.println(<span class="string">"请求的资源名部分，去掉了协议和主机名: "</span> + request.getRequestURI());</div><div class="line">    System.out.println(<span class="string">"请求行中的参数部分: "</span> + request.getQueryString());</div><div class="line">    System.out.println(<span class="string">"浏览器所处于的客户机的IP地址: "</span> + request.getRemoteAddr());</div><div class="line">    System.out.println(<span class="string">"浏览器所处于的客户机的主机名: "</span> + request.getRemoteHost());</div><div class="line">    System.out.println(<span class="string">"浏览器所处于的客户机使用的网络端口: "</span> + request.getRemotePort());</div><div class="line">    System.out.println(<span class="string">"服务器的IP地址: "</span> + request.getLocalAddr());</div><div class="line">    System.out.println(<span class="string">"服务器的主机名: "</span> + request.getLocalName());</div><div class="line">    System.out.println(<span class="string">"得到客户机请求方式: "</span> + request.getMethod());</div><div class="line"><span class="comment">// 获取浏览器头信息</span></div><div class="line">        Enumeration&lt;String&gt; headerNames= request.getHeaderNames();</div><div class="line">        <span class="keyword">while</span>(headerNames.hasMoreElements())&#123;</div><div class="line">            String header = headerNames.nextElement();</div><div class="line">            String value = request.getHeader(header);</div><div class="line">            System.out.printf(<span class="string">"%s\t%s%n"</span>,header,value);</div><div class="line">        &#125;</div><div class="line"><span class="comment">// 获取用户提交的参数</span></div><div class="line">        Map&lt;String, String[]&gt; parameters = request.getParameterMap();</div><div class="line"></div><div class="line">        Set&lt;String&gt; paramNames = parameters.keySet();</div><div class="line">        <span class="keyword">for</span> (String param : paramNames) &#123;</div><div class="line">            String[] value = parameters.get(param);</div><div class="line">            System.out.println(param + <span class="string">":"</span> + Arrays.asList(value));</div><div class="line">        &#125;</div><div class="line"><span class="comment">// 设置编码格式，第一种会要求浏览器也使用utf-8编码</span></div><div class="line">        response.setContentType(<span class="string">"text/html; charset=UTF-8"</span>);</div><div class="line">        response.setCharacterEncoding(<span class="string">"UTF-8"</span>);</div><div class="line"><span class="comment">// 浏览器不缓存页面</span></div><div class="line">        response.setDateHeader(<span class="string">"Expires"</span>,<span class="number">0</span> );</div><div class="line">        response.setHeader(<span class="string">"Cache-Control"</span>,<span class="string">"no-cache"</span>);</div><div class="line">        response.setHeader(<span class="string">"pragma"</span>,<span class="string">"no-cache"</span>);</div></pre></td></tr></table></figure><h4 id="Servlet实例化与生命周期"><a href="#Servlet实例化与生命周期" class="headerlink" title="Servlet实例化与生命周期"></a>Servlet实例化与生命周期</h4><p>一个Servlet的生命周期由 实例化，初始化，提供服务，销毁，被回收 几个步骤组成。</p><ul><li><p>实例化</p><p>一个servlet在webapp启动后只会被实例化一次。</p></li><li><p>初始化</p><p>覆写HttpServlet的init方法，可以在servlet被实例化时执行初始化相关代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"init(ServletConfig)"</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>​</p></li><li><p>提供服务</p><p>通过service或者doPost doGet方法提供http服务</p></li><li><p>销毁和GC回收</p><p>web应用重启时 或Tomcat服务器关闭时，销毁。</p><p>在server.xml中配置改为reloadable=”true”，任何类发生更新，则web应用自动重启。</p><p><code>&lt;Context path=&quot;/&quot; docBase=&quot;e:\\web&quot; debug=&quot;0&quot; reloadable=&quot;true&quot; /&gt;</code></p></li></ul><h4 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h4><ol><li><p>Post表单上传文件，提交数据为二进制文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/upload"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></div><div class="line">  英雄名称:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userName"</span> /&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">  上传头像 : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"filepath"</span> /&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"上传"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>导入依赖包</p><p>下载第三方的jar包，commons-io.jar和commons-fileupload.jar,放在WEB-INF/lib下.然后在项目中引入。</p></li><li><p>UploadServlet</p><p>获取文件流，定义文件名，获取相对路径和存储位置，保存文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUploadServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">        String filename = <span class="keyword">null</span>; <span class="comment">// 不能直接使用上传文件的文件名，以免重复</span></div><div class="line">        DiskFileItemFactory factory = <span class="keyword">new</span> DiskFileItemFactory();</div><div class="line">        factory.setSizeThreshold(<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">5</span>); <span class="comment">// 上传大小不超过5M</span></div><div class="line">        ServletFileUpload upload = <span class="keyword">new</span> ServletFileUpload(factory);</div><div class="line">        List items = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            items = upload.parseRequest(request);</div><div class="line">        &#125; <span class="keyword">catch</span> (FileUploadException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        Iterator iter = items.iterator();</div><div class="line">        <span class="keyword">while</span> (iter.hasNext())&#123;</div><div class="line">            FileItem item = (FileItem) iter.next();</div><div class="line">            <span class="keyword">if</span> (!item.isFormField())&#123; <span class="comment">// 不是表单域，即上传的文件</span></div><div class="line">                filename = System.currentTimeMillis() + <span class="string">".jpg"</span>; <span class="comment">// 自定义存储文件名</span></div><div class="line">                <span class="comment">//通过getRealPath获取上传文件夹，如果项目在./web,那么就会自动获取到 ./web/uploaded</span></div><div class="line">                String photoFolder =request.getServletContext().getRealPath(<span class="string">"uploaded"</span>);</div><div class="line">                System.out.println(photoFolder);</div><div class="line">                File f = <span class="keyword">new</span> File(photoFolder, filename);</div><div class="line">                f.getParentFile().mkdirs();</div><div class="line"></div><div class="line">                InputStream is = item.getInputStream();</div><div class="line">                FileOutputStream fout = <span class="keyword">new</span> FileOutputStream(f);</div><div class="line">                <span class="keyword">byte</span> b[] = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>*<span class="number">1024</span>];</div><div class="line">                <span class="keyword">int</span> length = <span class="number">0</span>;</div><div class="line">                <span class="keyword">while</span> ((length = is.read(b)) != -<span class="number">1</span>)&#123;</div><div class="line">                    fout.write(b, <span class="number">0</span>, length);</div><div class="line">                &#125;</div><div class="line">                fout.close();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;  <span class="comment">// 处理表单域</span></div><div class="line">                System.out.println(item.getFieldName());</div><div class="line">                <span class="comment">// 中文处理</span></div><div class="line">                String value = <span class="keyword">new</span> String(item.getString().getBytes(<span class="string">"iso-8859-1"</span>), <span class="string">"utf-8"</span>);</div><div class="line">                System.out.println(value);</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure><p>​</p></li><li><p>处理不是File的字段</p><p>由于form提交的是二进制数据，因此无法使用<code>request.getParameter(&quot;XXX&quot;)</code>,  使用item取出的值如果有中文，还需要进行编码处理。</p></li><li><p>在<code>web.xml</code>中配置servlet和URL路由。</p></li></ol><h4 id="使用JQuery和JSON提交数据"><a href="#使用JQuery和JSON提交数据" class="headerlink" title="使用JQuery和JSON提交数据"></a>使用JQuery和JSON提交数据</h4><ol><li><p>下载json-lib包，放入WEB-INF/lib目录，并在项目中导入json包</p><p>要使用json-lib，必须同时导入其依赖的另外5个包：</p><p><strong>commons</strong> -beanutils-1.8.3.jar   commons -lang -2.5.jar  commons -logging.jar  commons-collections-3.1.jar    ezmorph-1.0.6.jar</p><p>不然使用json-lib库会报错，<code>java.lang.ClassNotFoundException</code> </p><p>maven项目可以设置自动导入相关依赖包。</p></li><li><p>html前端使用jQuery ajax异步post提交数据</p><p>导入JQuery包</p><p>form中使用button，不使用submit input。submit按钮点击后就会自动提交。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"form-data"</span>&gt;</span></div><div class="line">       用户名称： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>  <span class="attr">placeholder</span>=<span class="string">"用户名"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">       年龄： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"year"</span> &gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"以json方式提交"</span> <span class="attr">id</span>=<span class="string">"json-post"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    $(<span class="string">"#json-post"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">        <span class="keyword">var</span> url = <span class="string">"json"</span>;</span></div><div class="line"><span class="javascript">        <span class="keyword">var</span> username = $(<span class="string">"#form-data input[name='username']"</span>).val();</span></div><div class="line"><span class="javascript">        <span class="keyword">var</span> year = $(<span class="string">"#form-data input[name='year']"</span>).val();</span></div><div class="line"><span class="javascript">        <span class="keyword">var</span> data=&#123;<span class="string">"username"</span>:username,<span class="string">"year"</span>:year&#125;;</span></div><div class="line"><span class="javascript">        <span class="built_in">console</span>.log(username);</span></div><div class="line"><span class="javascript">        <span class="built_in">console</span>.log(year);</span></div><div class="line"><span class="javascript">        $.post(</span></div><div class="line"><span class="undefined">            url,</span></div><div class="line"><span class="javascript">            &#123;<span class="string">"data"</span>: <span class="built_in">JSON</span>.stringify(data)&#125;,</span></div><div class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span></div><div class="line"><span class="javascript">                alert(<span class="string">"已经提交数据"</span>);</span></div><div class="line"><span class="javascript">                <span class="built_in">console</span>.log(res);</span></div><div class="line"><span class="undefined">            &#125;);</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>编写servlet，配置路由</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> net.sf.json.JSONObject;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">        String data = req.getParameter(<span class="string">"data"</span>);</div><div class="line">        JSONObject json = JSONObject.fromObject(data);</div><div class="line">        System.out.println(<span class="string">"data: "</span>+ data);</div><div class="line">        System.out.println(<span class="string">"json: "</span>+ json);</div><div class="line"><span class="comment">//        Hero hero = (Hero)JSONObject.toBean(json,Hero.class);</span></div><div class="line"><span class="comment">//        System.out.println("转换为Hero对象之后是："+hero);</span></div><div class="line">      </div><div class="line">        resp.getWriter().println(<span class="string">"submit success!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><h4 id="使用json和JQuery获取对象"><a href="#使用json和JQuery获取对象" class="headerlink" title="使用json和JQuery获取对象"></a>使用json和JQuery获取对象</h4><ol><li><p>jquery代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"data"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"获取json对象"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">  $(<span class="string">"input"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> url = <span class="string">"getdata"</span>;</span></div><div class="line"><span class="javascript">    $.post(</span></div><div class="line"><span class="undefined">    url,</span></div><div class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span></div><div class="line"><span class="javascript">        <span class="keyword">var</span> man = <span class="built_in">JSON</span>.parse(res);</span></div><div class="line"><span class="javascript">        $(<span class="string">"#data"</span>).html(<span class="string">"名字："</span> + man.name + <span class="string">"&lt;br&gt;年龄:"</span> + man.year);</span></div><div class="line"><span class="undefined">      &#125;);</span></div><div class="line"><span class="undefined">  &#125;);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>​</p></li><li><p>servlet</p><p>创建一个Hero对象并将其转换为JSONObject对象，用个一个新的JSONObject对象存放Hero JSONObject，其key值为man。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> net.sf.json.JSONObject; </div><div class="line">   </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetOneServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123; </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span></div><div class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">          </div><div class="line">        Hero hero = <span class="keyword">new</span> Hero();</div><div class="line">        hero.setName(<span class="string">"盖伦"</span>);</div><div class="line">        hero.setYear(<span class="number">353</span>);</div><div class="line">         </div><div class="line">        JSONObject json= <span class="keyword">new</span> JSONObject();</div><div class="line">        json.put(<span class="string">"hero"</span>, JSONObject.fromObject(hero));</div><div class="line">      </div><div class="line">        response.setContentType(<span class="string">"text/html;charset=utf-8"</span>); </div><div class="line">        response.getWriter().print(json);</div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><p><strong>获取多个对象，JSON数组</strong></p><ol><li><p>jQuery代码, 通过<code>$.parseJSON</code>转换为json数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#sender'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">        <span class="keyword">var</span> url=<span class="string">"getdata"</span>; </div><div class="line">        $.post(</div><div class="line">                url,</div><div class="line">                <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">                    <span class="keyword">var</span> heros = $.parseJSON(data);</div><div class="line">                     <span class="keyword">for</span>(i <span class="keyword">in</span> heros)&#123;</div><div class="line">                         <span class="keyword">var</span> oldHtml = $(<span class="string">"#data"</span>).html();</div><div class="line">                         <span class="keyword">var</span> hero = heros[i];</div><div class="line">                         $(<span class="string">"#data"</span>).html(oldHtml + <span class="string">"&lt;br&gt;"</span>+hero.name+<span class="string">"   -----   "</span>+hero.hp); </div><div class="line">                     &#125;</div><div class="line">         &#125;);  </div><div class="line">    &#125;);</div></pre></td></tr></table></figure></li><li><p>servlet</p><p>将10个Hero对象的集合，通过<code>JSONSerializer.toJSON(heros)</code>转化为JSON字符串,然后返回给浏览器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> net.sf.json.JSONSerializer; </div><div class="line">   </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetManyServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123; </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span></div><div class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">        List&lt;Hero&gt; heros = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">            Hero hero = <span class="keyword">new</span> Hero();</div><div class="line">            hero.setName(<span class="string">"name"</span>+i);</div><div class="line">            hero.setYear(<span class="number">500</span>+i);</div><div class="line">            heros.add(hero);</div><div class="line">        &#125;</div><div class="line">         </div><div class="line">        String result =JSONSerializer.toJSON(heros).toString();</div><div class="line"> </div><div class="line">        response.setContentType(<span class="string">"text/html;charset=utf-8"</span>); </div><div class="line">        response.getWriter().print(result);</div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>​</p></li></ol><h3 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h3><h4 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h4><p>Host: 主机名<br>Use-Agent: 浏览器基本资料<br>Accept: 浏览器能够识别的响应类型<br>Accept-Language: 浏览器默认语言<br>Accept-Encoding: 浏览器能够识别的压缩方式<br>Referer: 来路页面， /addHero 这个路径是通过addHero.html这个页面跳转过来的。<br>Connecton：是否保持连接</p><h4 id="请求数据"><a href="#请求数据" class="headerlink" title="请求数据"></a>请求数据</h4><p>GET参数</p><p>Post的form表单数据</p><h4 id="响应状态码"><a href="#响应状态码" class="headerlink" title="响应状态码"></a>响应状态码</h4><p>200 ok</p><p>301 表示客户端跳转，永久性的跳转</p><p>302 客户端跳转，临时性的跳转</p><p>304 表示资源未被修改。</p><p>404 页面不存在</p><p>500 表示服务端的错误</p><h4 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h4><p>Content-Length: 表示长度<br>Content-Type: 内容格式<br>Date: 日期<br>Server: 服务器类型</p><h4 id="响应正文"><a href="#响应正文" class="headerlink" title="响应正文"></a>响应正文</h4><p>html、css、js、img等。</p><h3 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h3><blockquote><p>在Servlet中写html代码很麻烦，既不直观，也很难处理页面样式和数据之间的关系。</p><p>JSP可以实现在HTML文件中编写执行Java代码，在页面需要数据、逻辑控制的地方调用java代码实现。</p></blockquote><h4 id="hello-jsp"><a href="#hello-jsp" class="headerlink" title="hello jsp"></a>hello jsp</h4><ul><li><code>hello.jsp</code></li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;%<span class="meta">@page</span> contentType=<span class="string">"text/html; charset=UTF-8"</span>  pageEncoding=<span class="string">"UTF-8"</span> <span class="keyword">import</span>=<span class="string">"java.util.*"</span>%&gt;</div><div class="line"> </div><div class="line">你好 JSP</div><div class="line">&lt;br&gt;</div><div class="line">&lt;%=<span class="keyword">new</span> Date().toLocaleString()%&gt;</div></pre></td></tr></table></figure><ul><li><p><code>&lt;%@page</code> jsp指令，配置页面</p></li><li><p><code>&lt;%=</code> 调用java代码执行输出</p></li><li><p>在访问hello.jsp页面时，实际上hello.jsp已经被转换为hello_jsp.java，然后编译成hello<em>jsp.class，是一个servlet，位于tomcat的子目录`\work\Catalina\localhost\</em>\org\apache\jsp` ,servlet将生产的html返回给浏览器。</p><p>hello_jsp.java继承了<code>HttpJspBase</code>类，<code>HttpJspBase</code>是HttpServlet的子类。</p></li></ul><h4 id="JSP指令"><a href="#JSP指令" class="headerlink" title="JSP指令"></a>JSP指令</h4><table><thead><tr><th><strong>指令</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><code>&lt;%@ page ... %&gt;</code></td><td>定义网页依赖属性，比如脚本语言、error页面、缓存需求等等</td></tr><tr><td><code>&lt;%@ include ... %&gt;</code></td><td>包含其他文件</td></tr><tr><td><code>&lt;%@ taglib ... %&gt;</code></td><td>引入标签库的定义</td></tr></tbody></table><p>语法格式<code>&lt;%@ page attribute=&quot;value&quot; %&gt;</code> 等价于XML格式<code>&lt;jsp:directive.page attribute=&quot;value&quot; /&gt;</code>。</p><table><thead><tr><th><strong>属性</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>buffer</td><td>指定out对象使用缓冲区的大小</td></tr><tr><td>autoFlush</td><td>控制out对象的 缓存区</td></tr><tr><td>contentType</td><td>指定当前JSP页面的MIME类型和字符编码</td></tr><tr><td>errorPage</td><td>指定当JSP页面发生异常时需要转向的错误处理页面</td></tr><tr><td>isErrorPage</td><td>指定当前页面是否可以作为另一个JSP页面的错误处理页面</td></tr><tr><td>extends</td><td>指定servlet从哪一个类继承</td></tr><tr><td>import</td><td>导入要使用的Java类，逗号隔开</td></tr><tr><td>info</td><td>定义JSP页面的描述信息</td></tr><tr><td>isThreadSafe</td><td>指定对JSP页面的访问是否为线程安全</td></tr><tr><td>language</td><td>定义JSP页面所用的脚本语言，默认是Java</td></tr><tr><td>session</td><td>指定JSP页面是否使用session</td></tr><tr><td>isELIgnored</td><td>指定是否执行EL表达式</td></tr><tr><td>isScriptingEnabled</td><td>确定脚本元素能否被使用</td></tr></tbody></table><p>include指令<code>&lt;%@ include file=&quot;文件相对 url 地址&quot; %&gt;</code>,等价于xml <code>&lt;jsp:directive.include file=&quot;文件相对 url 地址&quot; /&gt;</code>， 被包含的文件可以是JSP文件、HTML文件或文本文件。</p><p>taglib指令： <code>&lt;%@ taglib uri=&quot;uri&quot; prefix=&quot;prefixOfTag&quot; %</code>, 等价XML <code>&lt;jsp:directive.taglib uri=&quot;uri&quot; prefix=&quot;prefixOfTag&quot; /&gt;</code>. uri属性确定标签库的位置，prefix属性指定标签库的前缀。</p><h4 id="JSP页面元素"><a href="#JSP页面元素" class="headerlink" title="JSP页面元素"></a>JSP页面元素</h4><ul><li><p>静态内容</p><p>html js css等</p></li><li><p>指令</p></li><li><p>表达式<code>&lt;%= %&gt;</code></p><p>用于输出一段html，<code>&lt;% out.println(&quot;hello&quot;);%&gt;也可以实现相同功能。</code></p></li><li><p>动作</p><p>XML格式的,如<code>&lt;jsp:include page=&quot;xxx.jsp&quot;&gt;</code></p></li><li><p>Scriptlet <code>&lt;% %&gt;</code></p><p>在<code>&lt;% %&gt;</code>之间可以写任意java代码</p></li><li><p>声明字段或方法 <code>&lt;%! %&gt;</code></p><p>不建议使用</p></li><li><p>注释<code>&lt;%--  --%&gt;</code></p><p>不同于HTML的注释，在浏览器看不到该注释，相当于在servlet中的注释。</p></li></ul><h4 id="JSP动作"><a href="#JSP动作" class="headerlink" title="JSP动作"></a>JSP动作</h4><p>语法格式： <code>&lt;jsp:action_name attribute=&quot;value&quot; /&gt;</code></p><table><thead><tr><th>语法</th><th>描述</th></tr></thead><tbody><tr><td>jsp:include</td><td>在页面被请求的时候引入一个文件。</td></tr><tr><td>jsp:useBean</td><td>寻找或者实例化一个JavaBean。</td></tr><tr><td>jsp:setProperty</td><td>设置JavaBean的属性。</td></tr><tr><td>jsp:getProperty</td><td>输出某个JavaBean的属性。</td></tr><tr><td>jsp:forward</td><td>把请求转到一个新的页面。</td></tr><tr><td>jsp:plugin</td><td>根据浏览器类型为Java插件生成OBJECT或EMBED标记。</td></tr><tr><td>jsp:element</td><td>定义动态XML元素</td></tr><tr><td>jsp:attribute</td><td>设置动态定义的XML元素属性。</td></tr><tr><td>jsp:body</td><td>设置动态定义的XML元素内容。</td></tr><tr><td>jsp:text</td><td>在JSP页面和文档中使用写入文本的模板</td></tr></tbody></table><ul><li><p>jsp:include</p><p>使用jsp动作include文件时，被include的页面单独编译成servlet，请求页面时，服务端会访问该servlet。可以传递参数进去，在jsp文件中使用<code>&lt;%=request.getParameter(</code>“year”<code>)%&gt;</code>获取参数。</p><p>使用include指令时，直接将被include的文件插入，而不是单独编译，服务端只有一个servlet。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;jsp:include page=<span class="string">"footer.jsp"</span>&gt;</div><div class="line">    &lt;jsp:param  name=<span class="string">"year"</span> value=<span class="string">"2017"</span> /&gt;</div><div class="line">&lt;/jsp:include&gt;</div><div class="line"></div><div class="line">&lt;%<span class="meta">@include</span> file=<span class="string">"footer.jsp"</span> %&gt;</div></pre></td></tr></table></figure></li><li><p>jsp:forward</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 客户端跳转 --&gt;</div><div class="line">&lt;%</div><div class="line">response.sendRedirect(<span class="string">"hello.jsp"</span>);  </div><div class="line">%&gt;</div><div class="line">&lt;!-- 服务端跳转 --&gt;</div><div class="line">&lt;%</div><div class="line">request.getRequestDispatcher(<span class="string">"hello.jsp"</span>).forward(request, response); </div><div class="line">%&gt;</div><div class="line">&lt;!-- 服务端跳转，jsp动作的代码更简洁 --&gt;</div><div class="line">&lt;jsp:forward page=<span class="string">"hello.jsp"</span>/&gt;</div></pre></td></tr></table></figure><p>​</p></li></ul><h4 id="JSP隐式对象"><a href="#JSP隐式对象" class="headerlink" title="JSP隐式对象"></a>JSP隐式对象</h4><table><thead><tr><th><strong>对象</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>request</td><td><strong>HttpServletRequest</strong>类的实例</td></tr><tr><td>response</td><td><strong>HttpServletResponse</strong>类的实例</td></tr><tr><td>out</td><td><strong>JspWriter</strong>类的实例，用于把结果输出至网页上</td></tr><tr><td>session</td><td><strong>HttpSession</strong>类的实例</td></tr><tr><td>application</td><td><strong>ServletContext</strong>类的实例，与应用上下文有关</td></tr><tr><td>config</td><td><strong>ServletConfig</strong>类的实例</td></tr><tr><td>pageContext</td><td><strong>PageContext</strong>类的实例，提供对JSP页面所有对象以及命名空间的访问</td></tr><tr><td>page</td><td>类似于Java类中的this关键字</td></tr><tr><td>Exception</td><td><strong>Exception</strong>类的对象，代表发生错误的JSP页面中对应的异常对象</td></tr></tbody></table><ul><li><p>request对象提供了一系列方法，可以获取HTTP头，cookies等等。</p></li><li><p>session对象跟踪服务器-客户端请求的对话。</p></li><li><p>pageContext对象</p><p>提供获取request、response、out、session、config等对象实例的方法。</p><p>可以修改、获取、移除作用域中的属性，<code>pageContext.removeAttribute(&quot;attrName&quot;, pageContext.PAGE_SCOPE);</code>  不提供作用域参数时，则移除4个作用域中的属性，PAGE_SCOPE，REQUEST_SCOPE，SESSION_SCOPE， APPLICATION_SCOPE。</p></li></ul><h4 id="JSP作用域"><a href="#JSP作用域" class="headerlink" title="JSP作用域"></a>JSP作用域</h4><ul><li><p>pageContext ：当前页面的作用域，也可以管理其他作用域的变量。 page相当于java中的this，servlet实例。 </p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 设置的属性只能在当前页面访问 --&gt;</div><div class="line">&lt;% pageContext.setAttribute(<span class="string">"name"</span>,<span class="string">"gareen"</span>); %&gt;</div><div class="line">&lt;%=pageContext.getAttribute(<span class="string">"name"</span>)%&gt;</div></pre></td></tr></table></figure></li><li><p>request： 一次请求，服务端跳转仍是同一请求。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;% request.setAttribute(<span class="string">"name"</span>,<span class="string">"gareen"</span>); %&gt;  </div><div class="line">&lt;%=request.getAttribute(<span class="string">"name"</span>)%&gt;</div><div class="line"></div><div class="line">&lt;!-- 使用pageContext --&gt;</div><div class="line">&lt;% pageContext.setAttribute(<span class="string">"name"</span>,<span class="string">"gareen"</span>,pageContext.REQUEST_SCOPE); %&gt;</div><div class="line"></div><div class="line">&lt;%= pageContext.getAttribute(<span class="string">"name"</span>,pageContext.REQUEST_SCOPE) %&gt;</div></pre></td></tr></table></figure></li><li><p>session：当前会话 </p><p>页面间参数传递可以使用session</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;%</div><div class="line">    session.setAttribute(<span class="string">"name"</span>,<span class="string">"gareen"</span>);</div><div class="line">    response.sendRedirect(<span class="string">"getContext.jsp"</span>);</div><div class="line">%&gt;</div><div class="line">&lt;%=session.getAttribute(<span class="string">"name"</span>)%&gt;</div><div class="line"></div><div class="line">&lt;!-- 使用pageContext --&gt;</div><div class="line">&lt;% </div><div class="line">pageContext.setAttribute(<span class="string">"name"</span>,<span class="string">"gareen"</span>,pageContext.SESSION_SCOPE);</div><div class="line">pageContext.getAttribute(<span class="string">"name"</span>,pageContext.SESSION_SCOPE);</div><div class="line">%&gt;</div></pre></td></tr></table></figure></li><li><p>application：全局，所有用户共享</p><p> application对象是ServletContext接口的实例,也可以通过 request.getServletContext()来获取.</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;%</div><div class="line">    application.setAttribute(<span class="string">"name"</span>,<span class="string">"gareen"</span>);</div><div class="line">    System.out.println(application == request.getServletContext());</div><div class="line">    response.sendRedirect(<span class="string">"getContext.jsp"</span>);</div><div class="line">%&gt;</div><div class="line">&lt;%=application.getAttribute(<span class="string">"name"</span>)%&gt;</div><div class="line"></div><div class="line">&lt;!-- 使用pageContext --&gt;</div><div class="line">&lt;% </div><div class="line">pageContext.setAttribute(<span class="string">"name"</span>,<span class="string">"gareen"</span>,pageContext.APPLICATION_SCOPE);</div><div class="line">pageContext.getAttribute(<span class="string">"name"</span>,pageContext.APPLICATION_SCOPE)</div><div class="line">%&gt;</div></pre></td></tr></table></figure></li></ul><h4 id="JSTL标准标签库"><a href="#JSTL标准标签库" class="headerlink" title="JSTL标准标签库"></a>JSTL标准标签库</h4><p>需要先导入两个包 jstl.jar 和standard.jar。</p><p>在jsp中使用taglib指令导入需要的标签库模块，常用的有core、format和function</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 变量访问，移除 --&gt;</div><div class="line">&lt;%@ taglib uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> prefix=<span class="string">"c"</span>%&gt;</div><div class="line"> </div><div class="line">设置值：&lt;c:set var=<span class="string">"name"</span> value=<span class="string">"$&#123;'gareen'&#125;"</span> scope=<span class="string">"request"</span> /&gt;</div><div class="line"> </div><div class="line">通过标签获取name: &lt;c:out value=<span class="string">"$&#123;name&#125;"</span> /&gt; &lt;br&gt;</div><div class="line"> </div><div class="line">移除变量：&lt;c:remove var=<span class="string">"name"</span> scope=<span class="string">"request"</span> /&gt; &lt;br&gt;</div><div class="line"> </div><div class="line">&lt;!-- 实现<span class="keyword">if</span>-<span class="keyword">else</span>逻辑，JSTL没有<span class="keyword">else</span>语法，可以用<span class="keyword">if</span>非或choose实现  --&gt;</div><div class="line">&lt;c:set var=<span class="string">"hp"</span> value=<span class="string">"$&#123;10&#125;"</span> scope=<span class="string">"request"</span> /&gt;</div><div class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;hp&lt;5&#125;"</span>&gt;</div><div class="line">    &lt;p&gt;这个英雄要挂了&lt;/p&gt;</div><div class="line">&lt;/c:if&gt;</div><div class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;!(hp&lt;5)&#125;"</span>&gt;</div><div class="line">    &lt;p&gt;这个英雄觉得自己还可以再抢救抢救&lt;/p&gt;</div><div class="line">&lt;/c:if&gt;</div><div class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;empty weapon&#125;"</span>&gt;</div><div class="line">    &lt;p&gt;没有装备武器&lt;/p&gt;</div><div class="line">&lt;/c:if&gt;</div><div class="line"></div><div class="line">&lt;c:choose&gt;</div><div class="line">    &lt;c:when test=<span class="string">"$&#123;hp&lt;5&#125;"</span>&gt;</div><div class="line">        &lt;p&gt;这个英雄要挂了&lt;/p&gt;</div><div class="line">    &lt;/c:when&gt;</div><div class="line">    &lt;c:otherwise&gt;</div><div class="line">        &lt;p&gt;这个英雄觉得自己还可以再抢救抢救&lt;/p&gt;</div><div class="line">    &lt;/c:otherwise&gt;</div><div class="line">&lt;/c:choose&gt;</div><div class="line"></div><div class="line">&lt;!-- <span class="keyword">for</span>循环 --&gt;</div><div class="line">&lt;c:forEach items=<span class="string">"$&#123;heros&#125;"</span> var=<span class="string">"hero"</span> varStatus=<span class="string">"st"</span>  &gt;</div><div class="line">  &lt;!-- varStatus表示当前遍历的状态 --&gt;</div><div class="line">    &lt;tr&gt;</div><div class="line">        &lt;td&gt;&lt;c:out value="$&#123;st.count&#125;" /&gt;&lt;/td&gt;</div><div class="line">        &lt;td&gt;&lt;c:out value="$&#123;hero&#125;" /&gt;&lt;/td&gt;</div><div class="line">    &lt;/tr&gt;</div><div class="line">&lt;/c:forEach&gt;</div><div class="line"></div><div class="line">&lt;!-- forTokes字符串拆分 --&gt;</div><div class="line">&lt;c:set var=<span class="string">"strs"</span> value=<span class="string">"塔姆,艾克;巴德|雷克赛!卡莉丝塔"</span> /&gt;</div><div class="line"> </div><div class="line">&lt;c:forTokens items=<span class="string">"$&#123;strs&#125;"</span> delims=<span class="string">":;|!"</span> var=<span class="string">"sub_str"</span>&gt;</div><div class="line">    &lt;c:out value=<span class="string">"$&#123;sub_str&#125;"</span> /&gt; &lt;br /&gt;</div><div class="line">&lt;/c:forTokens&gt;</div></pre></td></tr></table></figure><ul><li><p>format格式化数字和时间</p><p>yyyy 表示年份，MM 表示月份，dd 表示日期，E 表示星期几，a 表示是上午还是下午</p><p>HH 表示小时，mm 表示分钟，ss 表示秒，S 表示毫秒，z 表示时区</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;%@ taglib uri=<span class="string">"http://java.sun.com/jsp/jstl/fmt"</span>  prefix=<span class="string">'fmt'</span> %&gt;</div><div class="line">&lt;core:set var=<span class="string">"money"</span> value=<span class="string">"39.45896"</span>/&gt;</div><div class="line">&lt;!-- 最少<span class="number">2</span>位，最多<span class="number">6</span>位小数 --&gt;</div><div class="line">&lt;fmt:formatNumber type=<span class="string">"number"</span> value=<span class="string">"$&#123;money&#125;"</span> minFractionDigits=<span class="string">"2"</span> maxFractionDigits=<span class="string">"6"</span> /&gt; </div><div class="line"></div><div class="line">&lt;!--  格式化date --&gt;</div><div class="line">&lt;%</div><div class="line">    Date now = <span class="keyword">new</span> Date();</div><div class="line">    pageContext.setAttribute(<span class="string">"now"</span>,now);</div><div class="line">%&gt;</div><div class="line"> </div><div class="line">完整日期: &lt;fmt:formatDate value=<span class="string">"$&#123;now&#125;"</span> pattern=<span class="string">"G yyyy年MM月dd日 E"</span>/&gt;&lt;br&gt;</div><div class="line">完整时间: &lt;fmt:formatDate value=<span class="string">"$&#123;now&#125;"</span> pattern=<span class="string">"a HH:mm:ss.S z"</span>/&gt;&lt;br&gt;</div><div class="line">常见格式: &lt;fmt:formatDate value=<span class="string">"$&#123;now&#125;"</span> pattern=<span class="string">"yyyy-MM-dd HH:mm:ss"</span>/&gt;</div></pre></td></tr></table></figure><p>​</p></li><li><p>function函数库</p><p><code>&lt;%@ taglib prefix=&quot;fn&quot; uri=&quot;http://java.sun.com/jsp/jstl/functions&quot; %&gt;</code></p><p>提供了很多实用的函数</p><p>| <strong>函数</strong>                                   | <strong>描述</strong>                                   |<br>| —————————————- | —————————————- |<br>| fn:contains(string, substring)           | 如果参数string中包含参数substring，返回true          |<br>| fn:containsIgnoreCase(string, substring) | 如果参数string中包含参数substring（忽略大小写），返回true   |<br>| fn:endsWith(string, suffix)              | 如果参数 string 以参数suffix结尾，返回true           |<br>| fn:escapeXml(string)                     | 将有特殊意义的XML (和HTML)转换为对应的XML character entity code，并返回 |<br>| fn:indexOf(string, substring)            | 返回参数substring在参数string中第一次出现的位置          |<br>| fn:join(array, separator)                | 将一个给定的数组array用给定的间隔符separator串在一起，组成一个新的字符串并返回。 |<br>| fn:length(item)                          | 返回参数item中包含元素的数量。参数Item类型是数组、collection或者String。如果是String类型,返回值是String中的字符数。 |<br>| fn:replace(string, before, after)        | 返回一个String对象。用参数after字符串替换参数string中所有出现参数before字符串的地方，并返回替换后的结果 |<br>| fn:split(string, separator)              | 返回一个数组，以参数separator 为分割符分割参数string，分割后的每一部分就是数组的一个元素 |<br>| fn:startsWith(string, prefix)            | 如果参数string以参数prefix开头，返回true             |<br>| fn:substring(string, begin, end)         | 返回参数string部分字符串, 从参数begin开始到参数end位置，包括end位置的字符 |<br>| fn:substringAfter(string, substring)     | 返回参数substring在参数string中后面的那一部分字符串        |<br>| fn:substringBefore(string, substring)    | 返回参数substring在参数string中前面的那一部分字符串        |<br>| fn:toLowerCase(string)                   | 将参数string所有的字符变为小写，并将其返回                 |<br>| fn:toUpperCase(string)                   | 将参数string所有的字符变为大写，并将其返回                 |<br>| fn:trim(string)                          | 去除参数string 首尾的空格，并将其返回                   |</p></li></ul><h4 id="EL表达式语言"><a href="#EL表达式语言" class="headerlink" title="EL表达式语言"></a>EL表达式语言</h4><p>使用page指令开始EL表达式支持 <code>&lt;%@ page isELIgnored =&quot;true|false&quot; %&gt;</code></p><ul><li><p>语法： <code>${expression表达式}</code> <code>${JavaBeanObjeact.attr}</code></p></li><li><p>取变量值： <code>${killNumber}</code>;取请求参数 <code>${param.name}</code>,用到了隐式对象</p></li><li><p><code>.</code>获取JavaBean的属性</p><p>JavaBean是特殊的Java类，使用J ava语言书写，并且遵守JavaBean API规范。</p><ul><li><p>提供一个默认的无参构造</p></li><li><p>可以被序列化，实现序列化接口Serializable接口</p></li><li><p>可读写的属性以setter、getter方法提供访问</p></li><li><p>Boolean属性提供isXXX方法。</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span> pageEncoding=<span class="string">"UTF-8"</span>%&gt;</div><div class="line">&lt;!-- jsp创建JavaBean对象，设置和获取属性 --&gt;</div><div class="line">&lt;jsp:useBean id=<span class="string">"students"</span>  <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.runoob.StudentsBean"</span>&gt; </div><div class="line">   &lt;jsp:setProperty name=<span class="string">"students"</span> property=<span class="string">"firstName"</span> value=<span class="string">"小强"</span>/&gt;</div><div class="line">   &lt;jsp:setProperty name=<span class="string">"students"</span> property=<span class="string">"lastName"</span> value=<span class="string">"王"</span>/&gt;</div><div class="line">   &lt;jsp:setProperty name=<span class="string">"students"</span> property=<span class="string">"age"</span> value=<span class="string">"10"</span>/&gt;</div><div class="line">&lt;/jsp:useBean&gt;</div><div class="line"></div><div class="line">&lt;p&gt;学生名字: &lt;jsp:getProperty name="students" property="firstName"/&gt;&lt;/p&gt;</div><div class="line">&lt;p&gt;学生姓氏: &lt;jsp:getProperty name="students" property="lastName"/&gt; &lt;/p&gt;</div><div class="line">&lt;p&gt;学生年龄:  &lt;jsp:getProperty name="students" property="age"/&gt;&lt;/p&gt;</div></pre></td></tr></table></figure><p>​</p></li></ul></li><li><p>支持三元运算，可以替代if-else  <code>${killNumber ge 10? &quot;超神&quot;:&quot;还没超神&quot; }</code></p><p>基础操作符：</p><p>| <strong>操作符</strong>    | <strong>描述</strong>             |<br>| ———- | —————— |<br>| .          | 访问一个Bean属性或者一个映射条目 |<br>| []         | 访问一个数组或者链表的元素      |<br>| ( )        | 组织一个子表达式以改变优先级     |<br>| +          | 加                  |<br>| -          | 减或负                |<br>| *          | 乘                  |<br>| / or div   | 除                  |<br>| % or mod   | 取模                 |<br>| == or eq   | 测试是否相等             |<br>| != or ne   | 测试是否不等             |<br>| &lt; or lt    | 测试是否小于             |<br>| &gt; or gt    | 测试是否大于             |<br>| &lt;= or le   | 测试是否小于等于           |<br>| &gt;= or ge   | 测试是否大于等于           |<br>| &amp;&amp; or and  | 测试逻辑与              |<br>| || or or | 测试逻辑或              |<br>| ! or not   | 测试取反               |<br>| empty      | 测试是否空值             |</p></li><li><p>EL隐含对象</p><p>| <strong>隐含对象</strong>         | <strong>描述</strong>             |<br>| —————- | —————— |<br>| pageScope        | page 作用域           |<br>| requestScope     | request 作用域        |<br>| sessionScope     | session 作用域        |<br>| applicationScope | application 作用域    |<br>| param            | Request 对象的参数，字符串  |<br>| paramValues      | Request对象的参数，字符串集合 |<br>| header           | HTTP 信息头，字符串       |<br>| headerValues     | HTTP 信息头，字符串集合     |<br>| initParam        | 上下文初始化参数           |<br>| cookie           | Cookie值            |<br>| pageContext      | 当前页面的pageContext   |</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$&#123;pageContext.request.queryString&#125;</div><div class="line">$&#123;param[<span class="string">"username"</span>]&#125;</div><div class="line">$&#123;param.username&#125;</div><div class="line">$&#123;header[<span class="string">"user-agent"</span>]&#125;</div></pre></td></tr></table></figure><p>​</p></li></ul><h3 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h3><h3 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h3><blockquote><p>在请求访问服务器资源之前，拦截请求并处理；</p><p>在服务器返回响应之前，拦截响应并处理</p></blockquote><h4 id="Filter对象及方法"><a href="#Filter对象及方法" class="headerlink" title="Filter对象及方法"></a>Filter对象及方法</h4><p>过滤器是一个实现了 <code>javax.servlet.Filter</code> 接口的 Java 类。javax.servlet.Filter 接口定义了三个方法：</p><table><thead><tr><th>序号</th><th>方法 &amp; 描述</th></tr></thead><tbody><tr><td>1</td><td><strong>public void doFilter (ServletRequest, ServletResponse, FilterChain)</strong>该方法完成实际的过滤操作，当客户端请求方法与过滤器设置匹配的URL时，Servlet容器将先调用过滤器的doFilter方法。FilterChain用户访问后续过滤器。</td></tr><tr><td>2</td><td><strong>public void init(FilterConfig filterConfig)</strong>web 应用程序启动时，web 服务器将创建Filter 的实例对象，并调用其init方法，读取web.xml配置，完成对象的初始化功能，从而为后续的用户请求作好拦截的准备工作（filter对象只会创建一次，init方法也只会执行一次）。开发人员通过init方法的参数，可获得代表当前filter配置信息的FilterConfig对象。</td></tr><tr><td>3</td><td><strong>public void destroy()</strong>Servlet容器在销毁过滤器实例前调用该方法，在该方法中释放Servlet过滤器占用的资源。</td></tr></tbody></table><p> init 方法中提供了一个 FilterConfig 对象,可以用于获取filter在web.xml下的配置。</p><p><code>filterConfig.getInitParameter(&quot;Site&quot;);</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>LogFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>LogFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>Site<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>LogFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div></pre></td></tr></table></figure><p>一个处理中文编码的过滤器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Utf8Filter</span> <span class="keyword">implements</span> <span class="title">Filter</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</div><div class="line">        HttpServletRequest request = (HttpServletRequest) servletRequest;</div><div class="line">        request.setCharacterEncoding(<span class="string">"utf-8"</span>);</div><div class="line">        filterChain.doFilter(request, servletResponse);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="应用过滤器的顺序"><a href="#应用过滤器的顺序" class="headerlink" title="应用过滤器的顺序"></a>应用过滤器的顺序</h4><p>多个过滤器应用的顺序依据<code>web.xml</code>中<code>filter-mapping</code>定义的顺序。</p><h4 id="规范建议的过滤器"><a href="#规范建议的过滤器" class="headerlink" title="规范建议的过滤器"></a>规范建议的过滤器</h4><ul><li><p>身份验证过滤器（Authentication Filters）。</p><p>指定页面不使用过滤器，在filter的init参数里定义不过滤的url，然后在Filter里先获取初始参数，然后过滤方法里判断是否需要过滤。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>LoginFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>filter.LoginFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>excludedPages<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/index.jsp,/register.html,/login.html,/login,/jquery.min.js,<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> String excludeParam;</div><div class="line">    <span class="keyword">private</span> String[] excludePages;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line">        excludeParam = filterConfig.getInitParameter(<span class="string">"excludedPages"</span>);</div><div class="line">        <span class="keyword">if</span>(excludeParam!=<span class="keyword">null</span> &amp;&amp; excludeParam.length()&gt;<span class="number">0</span>)&#123;</div><div class="line">            excludePages = excludeParam.split(<span class="string">","</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</div><div class="line">        HttpServletRequest request = (HttpServletRequest) servletRequest;</div><div class="line">        HttpServletResponse response = (HttpServletResponse) servletResponse;</div><div class="line">        String username = (String) request.getSession().getAttribute(<span class="string">"username"</span>);</div><div class="line">        <span class="keyword">boolean</span> notFilter = <span class="keyword">false</span>;</div><div class="line">        <span class="comment">// 判断是否过滤页面</span></div><div class="line">        <span class="keyword">for</span>(String excludeUrl: excludePages)&#123;</div><div class="line"><span class="comment">//            System.out.println(excludeUrl);</span></div><div class="line"><span class="comment">//            System.out.println(request.getRequestURI());</span></div><div class="line">            String uri = request.getRequestURI();</div><div class="line">            <span class="keyword">if</span>(excludeUrl.trim().equals(uri))&#123;</div><div class="line">                notFilter = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(uri.endsWith(<span class="string">".css"</span>)||uri.endsWith(<span class="string">".js"</span>))&#123;</div><div class="line">                notFilter = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line"><span class="comment">//            System.out.println(request.getServletPath());</span></div><div class="line"><span class="comment">//            if(excludeUrl.trim().equals(request.getRequestURI()))&#123;</span></div><div class="line"><span class="comment">//                NotFilter = true;</span></div><div class="line"><span class="comment">//            &#125;</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (notFilter)&#123;</div><div class="line">            filterChain.doFilter(request, response);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">if</span> (username!=<span class="keyword">null</span> &amp;&amp; username.length()&gt;<span class="number">0</span>)&#123;</div><div class="line">                System.out.println(username);</div><div class="line">                filterChain.doFilter(request, servletResponse);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                response.sendRedirect(<span class="string">"login.html"</span>);</div><div class="line"><span class="comment">//            request.getRequestDispatcher("login.html").forward(request, response);</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>​</p></li><li><p>数据压缩过滤器（Data compression Filters）。</p></li><li><p>加密过滤器（Encryption Filters）。</p></li><li><p>触发资源访问事件过滤器。</p></li><li><p>图像转换过滤器（Image Conversion Filters）。</p></li><li><p>日志记录和审核过滤器（Logging and Auditing Filters）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123; &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</div><div class="line">        HttpServletRequest request = (HttpServletRequest) servletRequest;</div><div class="line">        String ip = request.getRemoteAddr();</div><div class="line">        String url = request.getRequestURL().toString();</div><div class="line">        System.out.println(ip +<span class="string">"在"</span>+ <span class="keyword">new</span> Date().toString() + <span class="string">"访问了网址："</span>+ url);</div><div class="line">        <span class="comment">// 允许过滤器链的后续过滤</span></div><div class="line">        filterChain.doFilter(servletRequest, servletResponse);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>​</p></li><li><p>MIME-TYPE 链过滤器（MIME-TYPE Chain Filters）。</p></li><li><p>标记化过滤器（Tokenizing Filters）。</p></li><li><p>XSL/T 过滤器（XSL/T Filters），转换 XML 内容。</p></li></ul><h3 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h3><ul><li><p>监听 web应用的创建和销毁，以及其attribute发生的变化。 </p><p>web应用即ServletContext对象(jsp的<a href="http://how2j.cn/k/jsp/jsp-object/580.html" target="_blank" rel="external">隐式对象application</a>) </p></li><li><p>监听<a href="http://how2j.cn/k/listener/listener-session/606.html" target="_blank" rel="external">session</a>和<a href="http://how2j.cn/k/listener/listener-request/607.html" target="_blank" rel="external">request</a>的生命周期，以及其attribute发生的变化。</p></li></ul><h4 id="监听Context"><a href="#监听Context" class="headerlink" title="监听Context"></a>监听Context</h4><ul><li><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>listener.ContextListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div></pre></td></tr></table></figure><p>​</p></li><li><p>Listener,实现两个接口方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span>, <span class="title">ServletContextAttributeListener</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent servletContextEvent)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"web应用初始化"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent servletContextEvent)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"web 应用销毁"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeAdded</span><span class="params">(ServletContextAttributeEvent servletContextAttributeEvent)</span> </span>&#123;</div><div class="line">        ServletContextAttributeEvent e = servletContextAttributeEvent;</div><div class="line">        System.out.println(String.format(<span class="string">"添加了属性：%s ---- %s"</span>, e.getName(), e.getValue()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeRemoved</span><span class="params">(ServletContextAttributeEvent servletContextAttributeEvent)</span> </span>&#123;</div><div class="line">        ServletContextAttributeEvent e = servletContextAttributeEvent;</div><div class="line">        System.out.println(String.format(<span class="string">"移除了属性：%s ---- %s"</span>, e.getName(), e.getValue()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeReplaced</span><span class="params">(ServletContextAttributeEvent servletContextAttributeEvent)</span> </span>&#123;</div><div class="line">        ServletContextAttributeEvent e = servletContextAttributeEvent;</div><div class="line">        System.out.println(String.format(<span class="string">"替换了属性：%s ---- %s"</span>, e.getName(), e.getValue()));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>​</p></li></ul><h4 id="监听Session"><a href="#监听Session" class="headerlink" title="监听Session"></a>监听Session</h4><ul><li><p>实现<code>HttpSessionListener</code>  <code>HttpSessionAttributeListener</code> 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionListener</span> <span class="keyword">implements</span> <span class="title">HttpSessionListener</span>, <span class="title">HttpSessionAttributeListener</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionCreated</span><span class="params">(HttpSessionEvent httpSessionEvent)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"session创建，session_id"</span> + httpSessionEvent.getSession().getId());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionDestroyed</span><span class="params">(HttpSessionEvent httpSessionEvent)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"session销毁，session_id"</span> + httpSessionEvent.getSession().getId());</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeAdded</span><span class="params">(HttpSessionBindingEvent httpSessionBindingEvent)</span> </span>&#123;</div><div class="line">        HttpSessionBindingEvent e = httpSessionBindingEvent;</div><div class="line">        System.out.println(String.format(<span class="string">"session属性添加：%s --- %s"</span>, e.getName(), e.getValue()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeRemoved</span><span class="params">(HttpSessionBindingEvent httpSessionBindingEvent)</span> </span>&#123;</div><div class="line">        HttpSessionBindingEvent e = httpSessionBindingEvent;</div><div class="line">        System.out.println(String.format(<span class="string">"session属性移除：%s --- %s"</span>, e.getName(), e.getValue()));</div><div class="line">&#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeReplaced</span><span class="params">(HttpSessionBindingEvent httpSessionBindingEvent)</span> </span>&#123;</div><div class="line">        HttpSessionBindingEvent e = httpSessionBindingEvent;</div><div class="line">        System.out.println(String.format(<span class="string">"session属性替换：%s --- %s"</span>, e.getName(), e.getValue()));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h4 id="监听Request"><a href="#监听Request" class="headerlink" title="监听Request"></a>监听Request</h4><ul><li><p>实现接口<code>ServletRequestListener</code> ,<code>ServletRequestAttributeListener</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestListener</span> <span class="keyword">implements</span> <span class="title">ServletRequestListener</span>,<span class="title">ServletRequestAttributeListener</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestDestroyed</span><span class="params">(ServletRequestEvent servletRequestEvent)</span> </span>&#123;</div><div class="line">        ServletRequestEvent e = servletRequestEvent;</div><div class="line">        System.out.println(<span class="string">"request被销毁！"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestInitialized</span><span class="params">(ServletRequestEvent servletRequestEvent)</span> </span>&#123;</div><div class="line">        ServletRequestEvent e = servletRequestEvent;</div><div class="line">        System.out.println(<span class="string">"request创建！"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeAdded</span><span class="params">(ServletRequestAttributeEvent servletRequestAttributeEvent)</span> </span>&#123;</div><div class="line">        ServletRequestAttributeEvent e = servletRequestAttributeEvent;</div><div class="line">        System.out.println(String.format(<span class="string">"request添加属性：%s --- %s"</span>, e.getName(), e.getValue()));</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeRemoved</span><span class="params">(ServletRequestAttributeEvent servletRequestAttributeEvent)</span> </span>&#123;</div><div class="line">        ServletRequestAttributeEvent e = servletRequestAttributeEvent;</div><div class="line">        System.out.println(String.format(<span class="string">"request移除了属性：%s --- %s"</span>, e.getName(), e.getValue()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeReplaced</span><span class="params">(ServletRequestAttributeEvent servletRequestAttributeEvent)</span> </span>&#123;</div><div class="line">        ServletRequestAttributeEvent e = servletRequestAttributeEvent;</div><div class="line">        System.out.println(String.format(<span class="string">"request替换属性：%s --- %s"</span>, e.getName(), e.getValue()));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h4 id="web在线人数统计"><a href="#web在线人数统计" class="headerlink" title="web在线人数统计"></a>web在线人数统计</h4><p>监听session的创建和销毁，一个session对应一个在线用户，设置一个application全局变量userNum保存在线用户数。创建session时userNum 加1，销毁时-1，如果不存在，则初始化值为0。</p><ul><li><p>OnlineUserListener</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OnlineUserListener</span> <span class="keyword">implements</span> <span class="title">HttpSessionListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionCreated</span><span class="params">(HttpSessionEvent httpSessionEvent)</span> </span>&#123;</div><div class="line">        HttpSessionEvent e = httpSessionEvent;</div><div class="line">        ServletContext application = e.getSession().getServletContext();</div><div class="line">        Integer userNum = (Integer) application.getAttribute(<span class="string">"userNum"</span>);</div><div class="line">        <span class="keyword">if</span> (userNum == <span class="keyword">null</span>)&#123;</div><div class="line">            application.setAttribute(<span class="string">"userNum"</span>, <span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">        userNum++;</div><div class="line">        application.setAttribute(<span class="string">"userNum"</span>, userNum);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionDestroyed</span><span class="params">(HttpSessionEvent httpSessionEvent)</span> </span>&#123;</div><div class="line">        HttpSessionEvent e = httpSessionEvent;</div><div class="line">        ServletContext application = e.getSession().getServletContext();</div><div class="line">        Integer userNum = (Integer) application.getAttribute(<span class="string">"userNum"</span>);</div><div class="line">        <span class="keyword">if</span> (userNum == <span class="keyword">null</span> || userNum &lt; <span class="number">1</span>)&#123;</div><div class="line">            application.setAttribute(<span class="string">"userNum"</span>, <span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            userNum--;</div><div class="line">            application.setAttribute(<span class="string">"userNum"</span>, userNum);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>​</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Tomcat&quot;&gt;&lt;a href=&quot;#Tomcat&quot; class=&quot;headerlink&quot; title=&quot;Tomcat&quot;&gt;&lt;/a&gt;Tomcat&lt;/h3&gt;&lt;h4 id=&quot;下载Tomcat&quot;&gt;&lt;a href=&quot;#下载Tomcat&quot; class=&quot;headerlink&quot; title=&quot;下载Tomcat&quot;&gt;&lt;/a&gt;下载Tomcat&lt;/h4&gt;&lt;p&gt;进入官网&lt;a href=&quot;http://tomcat.apache.org/，选择download，下载所需Tomcat版本。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://tomcat.apache.org/，选择download，下载所需Tomcat版本。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我用的是Tomcat7，core x64 zip。不同版本的比较参考&lt;a href=&quot;http://tomcat.apache.org/whichversion.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官网&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;解压后，点击bin里的startup.bat运行，访问&lt;a href=&quot;http://127.0.0.1:8080，可以看到欢迎界面，运行shutdown.bat关闭Tomcat。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://127.0.0.1:8080，可以看到欢迎界面，运行shutdown.bat关闭Tomcat。&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;配置环境变量&quot;&gt;&lt;a href=&quot;#配置环境变量&quot; class=&quot;headerlink&quot; title=&quot;配置环境变量&quot;&gt;&lt;/a&gt;配置环境变量&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在系统变量里添加2个变量 CATALINA_BASE，CATALINA_HOME&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;变量名：CATALINA_BASE&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;变量值：C:\Program Files\Java\apache-tomcat-7.0.85       //Tomcat安装目录&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;变量名：CATALINA_HOME&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;变量值：C:\Program Files\Java\apache-tomcat-7.0.85&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修改classpath和path&lt;/p&gt;
&lt;p&gt;在ClassPath的变量值中加入：&lt;code&gt;%CATALINA_HOME%\lib\servlet-api.jar;&lt;/code&gt;（注意加的时候在原变量值后加&lt;code&gt;;&lt;/code&gt;）&lt;/p&gt;
&lt;p&gt;在path中添加 &lt;code&gt;%CATALINA_HOME%\bin;%CATALINA_HOME%\lib;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;验证&lt;/p&gt;
&lt;p&gt;新打开一个cmd，输入startup：&lt;/p&gt;
&lt;figure class=&quot;highlight powershell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;C:\Users\&lt;span class=&quot;number&quot;&gt;20189&lt;/span&gt;&amp;gt;startup&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Using CATALINA_BASE:   &lt;span class=&quot;string&quot;&gt;&quot;C:\Program Files\Java\apache-tomcat-7.0.85&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Using CATALINA_HOME:   &lt;span class=&quot;string&quot;&gt;&quot;C:\Program Files\Java\apache-tomcat-7.0.85&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Using CATALINA_TMPDIR: &lt;span class=&quot;string&quot;&gt;&quot;C:\Program Files\Java\apache-tomcat-7.0.85\temp&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Using JRE_HOME:        &lt;span class=&quot;string&quot;&gt;&quot;C:\Program Files\Java\jdk1.8.0_151&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Using CLASSPATH:       &lt;span class=&quot;string&quot;&gt;&quot;C:\Program Files\Java\apache-tomcat-7.0.85\bin\bootstrap.jar;C:\Program Files\Java\apache-tomcat-7.0.85\bin\tomcat-juli.jar&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Java" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/Java/"/>
    
    
      <category term="Java" scheme="http://shuaiyy.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript实现的部分功能</title>
    <link href="http://shuaiyy.cn/2018/02/05/%E6%8A%80%E6%9C%AF/JavaScript%E5%89%8D%E7%AB%AF%E9%83%A8%E5%88%86%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/"/>
    <id>http://shuaiyy.cn/2018/02/05/技术/JavaScript前端部分功能实现/</id>
    <published>2018-02-04T16:00:00.000Z</published>
    <updated>2018-06-03T08:05:12.214Z</updated>
    
    <content type="html"><![CDATA[<ul><li>JavaScript判断表单内容，不满足条件则不提交</li></ul><p><code>&lt;form method=&quot;post&quot; action=&quot;/study/register.jsp&quot; onsubmit=&quot;return register()&quot;&gt;</code><br>长度判断<br>整数判断<br>正则判断</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"/study/register.jsp"</span> <span class="attr">onsubmit</span>=<span class="string">"return register()"</span>&gt;</span></div><div class="line">账号：<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"name"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line"></div><div class="line">年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"age"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"age"</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">  </div><div class="line">EMail：<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"email"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"email"</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">  </div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注册"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">    </div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">register</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript">   <span class="keyword">var</span> name = <span class="built_in">document</span>.getElementById(<span class="string">"name"</span>);</span></div><div class="line"><span class="javascript">   <span class="keyword">if</span>(name.value.length&lt;<span class="number">3</span>)&#123;</span></div><div class="line"><span class="javascript">     alert(<span class="string">"用户名至少需要3位长度"</span>);</span></div><div class="line"><span class="javascript">     <span class="keyword">return</span> <span class="literal">false</span>;</span></div><div class="line"><span class="undefined">   &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">   <span class="keyword">var</span> age = <span class="built_in">document</span>.getElementById(<span class="string">"age"</span>);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">   <span class="keyword">if</span>(<span class="built_in">isNaN</span>(age.value))&#123;</span></div><div class="line"><span class="javascript">     alert(<span class="string">"年龄必须是数字"</span>);</span></div><div class="line"><span class="javascript">     <span class="keyword">return</span> <span class="literal">false</span>;</span></div><div class="line"><span class="undefined">   &#125;</span></div><div class="line"><span class="undefined">  </span></div><div class="line"><span class="javascript">  <span class="keyword">var</span> email = <span class="built_in">document</span>.getElementById(<span class="string">"email"</span>);</span></div><div class="line"><span class="undefined">       </span></div><div class="line"><span class="javascript">  <span class="keyword">if</span>(<span class="number">0</span>==email.value.length)&#123;</span></div><div class="line"><span class="javascript">     alert(<span class="string">"email不能为空"</span>);</span></div><div class="line"><span class="javascript">    <span class="keyword">return</span> <span class="literal">false</span>;</span></div><div class="line"><span class="undefined">  &#125;</span></div><div class="line"><span class="undefined">    </span></div><div class="line"><span class="javascript">  <span class="keyword">var</span> Regex = <span class="regexp">/^(?:\w+\.?)*\w+@(?:\w+\.)*\w+$/</span>;       </span></div><div class="line"><span class="undefined">    </span></div><div class="line"><span class="javascript">  <span class="keyword">if</span> (!Regex.test(email.value))&#123;                </span></div><div class="line"><span class="javascript">       alert(<span class="string">"email格式不正确"</span>);</span></div><div class="line"><span class="javascript">       <span class="keyword">return</span> <span class="literal">false</span>;</span></div><div class="line"><span class="undefined">  &#125;            </span></div><div class="line"><span class="javascript">   <span class="keyword">return</span> <span class="literal">true</span>;</span></div><div class="line"><span class="undefined">  &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure><a id="more"></a><ul><li>javascript 显示或隐藏元素</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hide</span>(<span class="params"></span>)</span>&#123;</div><div class="line"> <span class="keyword">var</span> d = <span class="built_in">document</span>.getElementById(<span class="string">"d"</span>);</div><div class="line"> d.style.display=<span class="string">"none"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span>&#123;</div><div class="line"> <span class="keyword">var</span> d = <span class="built_in">document</span>.getElementById(<span class="string">"d"</span>);</div><div class="line"> d.style.display=<span class="string">"block"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><p>javascript 删除内容前提示</p><p>window.confirm<br>parentNode<br>removeChild<br>deleteRow(rowIndex)</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">deleteRow</span>(<span class="params">link</span>)</span>&#123;</span></div><div class="line"><span class="javascript"> <span class="keyword">var</span> b =  confirm(<span class="string">"确定删除？"</span>)</span></div><div class="line"><span class="javascript"> <span class="keyword">if</span>(!b)</span></div><div class="line"><span class="javascript">   <span class="keyword">return</span>;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="keyword">var</span> table = <span class="built_in">document</span>.getElementById(<span class="string">"heroTable"</span>);</span></div><div class="line"><span class="javascript"><span class="keyword">var</span> td = link.parentNode;</span></div><div class="line"><span class="javascript"><span class="keyword">var</span> tr = td.parentNode;</span></div><div class="line"><span class="javascript"><span class="keyword">var</span> index=tr.rowIndex;</span></div><div class="line"><span class="undefined">table.deleteRow(index);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span> <span class="attr">id</span>=<span class="string">"heroTable"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span>英雄名称<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">       操作</div><div class="line">   <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">td</span>&gt;</span>盖伦<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">onclick</span>=<span class="string">"deleteRow(this)"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span>     </div><div class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">td</span>&gt;</span>提莫<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">onclick</span>=<span class="string">"deleteRow(this)"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span>     </div><div class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">td</span>&gt;</span>祈求者<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">onclick</span>=<span class="string">"deleteRow(this)"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span>     </div><div class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure><ul><li>javascript 实现表格排序</li></ul><p>使用col记录上次点击的列，reverse记录升序还是降序；如果再次点击该列，则排序方式取逆。<br>table append节点时，由于插入的是原有的元素节点，因而tr的内容和总行数不会发生变化，只有顺序改变。<br>比较器自定义，使用String.localeCompare比较字符串。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">table&#123;</span></div><div class="line"><span class="css"><span class="selector-tag">border-collapse</span><span class="selector-pseudo">:collapse</span>;</span></div><div class="line"><span class="css"><span class="selector-tag">width</span><span class="selector-pseudo">:90</span>%;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined">tr&#123;</span></div><div class="line"><span class="undefined">border-bottom-style: solid;</span></div><div class="line"><span class="undefined">border-bottom-width: 1px;</span></div><div class="line"><span class="undefined">border-bottom-color: lightgray;</span></div><div class="line"><span class="css"><span class="selector-tag">height</span><span class="selector-pseudo">:35px</span>;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined">    </span></div><div class="line"><span class="undefined">td&#123;</span></div><div class="line"><span class="css"><span class="selector-tag">width</span><span class="selector-pseudo">:25</span>%;</span></div><div class="line"><span class="css"><span class="selector-tag">text-align</span><span class="selector-pseudo">:center</span>;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined">  </span></div><div class="line"><span class="undefined">a&#123;</span></div><div class="line"><span class="undefined">  text-decoration: none;</span></div><div class="line"><span class="css">  <span class="selector-tag">color</span><span class="selector-pseudo">:skyblue</span>;</span></div><div class="line"><span class="undefined">&#125;  </span></div><div class="line"><span class="undefined">  </span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="keyword">var</span> col = <span class="number">0</span>;</span></div><div class="line"><span class="javascript"><span class="keyword">var</span> reverse = <span class="literal">false</span>;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params">column</span>)</span>&#123;</span></div><div class="line"><span class="javascript"> <span class="keyword">if</span>(column == col)</span></div><div class="line"><span class="undefined">     reverse = !reverse;</span></div><div class="line"><span class="undefined"> col = column;</span></div><div class="line"><span class="javascript"> <span class="keyword">var</span> tbody = <span class="built_in">document</span>.getElementById(<span class="string">"tbody"</span>);</span></div><div class="line"><span class="javascript"> <span class="comment">//通过getElementsByTagName取出来是一个Collection</span></span></div><div class="line"><span class="javascript"> <span class="keyword">var</span> trsCollection =  <span class="built_in">document</span>.getElementsByTagName(<span class="string">"tr"</span>);</span></div><div class="line"><span class="javascript"> <span class="comment">//因为Collection没有自带的排序函数，所以需要转换为数组，利用数组自带的排序</span></span></div><div class="line"><span class="javascript"> <span class="keyword">var</span> trs =<span class="keyword">new</span> <span class="built_in">Array</span>();</span></div><div class="line"><span class="javascript"> <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>; i &lt;trsCollection.length; i++) &#123;</span></div><div class="line"><span class="undefined">    trs.push(trsCollection[i]);</span></div><div class="line"><span class="undefined"> &#125;</span></div><div class="line"><span class="undefined"> trs.sort(comparator);</span></div><div class="line"><span class="javascript"> <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt;trs.length; i++) &#123;</span></div><div class="line"><span class="undefined">  tbody.appendChild(trs[i]);</span></div><div class="line"><span class="undefined"> &#125;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">comparator</span>(<span class="params">tr1,tr2</span>)</span>&#123;</span></div><div class="line"><span class="javascript">   <span class="keyword">var</span> td1 = tr1.children[col].innerHTML; <span class="comment">//取某一行的第col列中的内容</span></span></div><div class="line"><span class="javascript">   <span class="keyword">var</span> td2 = tr2.children[col].innerHTML;</span></div><div class="line"><span class="javascript">   <span class="keyword">if</span>(reverse)</span></div><div class="line"><span class="javascript">    <span class="keyword">return</span> td1.localeCompare(td2);</span></div><div class="line"><span class="javascript">   <span class="keyword">else</span></span></div><div class="line"><span class="javascript">    <span class="keyword">return</span> td2.localeCompare(td1);</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">id</span>=<span class="string">"tbody"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0)"</span> <span class="attr">onclick</span>=<span class="string">"sort(0)"</span>&gt;</span>id<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0)"</span> <span class="attr">onclick</span>=<span class="string">"sort(1)"</span>&gt;</span>名称<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0)"</span> <span class="attr">onclick</span>=<span class="string">"sort(2)"</span>&gt;</span>血量<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0)"</span> <span class="attr">onclick</span>=<span class="string">"sort(3)"</span>&gt;</span>伤害<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">td</span>&gt;</span>annie<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">td</span>&gt;</span>380<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">td</span>&gt;</span>38<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">td</span>&gt;</span>gareen<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">td</span>&gt;</span>340<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">td</span>&gt;</span>58<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">td</span>&gt;</span>teemo<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">td</span>&gt;</span>320<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">td</span>&gt;</span>76<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">td</span>&gt;</span>4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">td</span>&gt;</span>deadbrother<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">td</span>&gt;</span>400<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">td</span>&gt;</span>90<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure><ul><li>JavaScript中的json对象</li></ul><p>定义和使用json对象和数组<br>字符串转json对象，通过字符串拼接得到一个JSON结构的字符串，并不是一个JSON对象。 需要通过eval转换得到<br>转换的时候注意,eval 函数的字符串参数以<code>(</code>开头 <code>)</code>结尾。<br>或者使用JQuery的$.parseJSON转换函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">var gareen = &#123;&quot;name&quot;:&quot;盖伦&quot;,&quot;hp&quot;:616&#125;;</div><div class="line">alert(&quot;这是一个JSON对象: &quot;+gareen);</div><div class="line">alert(&quot;英雄名称: &quot; + gareen.name + &quot;&lt;br&gt;&quot;);</div><div class="line">alert(&quot;英雄血量: &quot; + gareen.hp + &quot;&lt;br&gt;&quot;);</div><div class="line"></div><div class="line">var heros=</div><div class="line">[</div><div class="line">    &#123;&quot;name&quot;:&quot;盖伦&quot;,&quot;hp&quot;:616&#125;,</div><div class="line">    &#123;&quot;name&quot;:&quot;提莫&quot;,&quot;hp&quot;:313&#125;,</div><div class="line">    &#123;&quot;name&quot;:&quot;死哥&quot;,&quot;hp&quot;:432&#125;,</div><div class="line">    &#123;&quot;name&quot;:&quot;火女&quot;,&quot;hp&quot;:389&#125;</div><div class="line">]</div><div class="line">alert( &quot;第4个英雄是:&quot; +  heros[3].name);</div><div class="line"></div><div class="line">var s1 = &quot;&#123;\&quot;name\&quot;:\&quot;盖伦\&quot;&quot;;</div><div class="line">var s2 = &quot;,\&quot;hp\&quot;:616&#125;&quot;;</div><div class="line">var s3 = s1+s2;</div><div class="line">var gareen = eval(&quot;(&quot;+s3+&quot;)&quot;);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><ul><li>AJAX实现登录前表单验证</li></ul><p>AJAX: Asynchronous JAvaScript and XML<br>判断账户是否存在<br>1、定义一个XMLHttpRequest对象，即XHR对象<br>2、设置响应函数  <code>xmlhttp.onreadystatechange=checkResult; //响应函数</code><br>3、设置访问URL和参数<br>4、执行请求</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>输入账号 :<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"name"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">onkeyup</span>=<span class="string">"check()"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"checkResult"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="keyword">var</span> xmlhttp;</span></div><div class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript">  <span class="keyword">var</span> name = <span class="built_in">document</span>.getElementById(<span class="string">"name"</span>).value;</span></div><div class="line"><span class="javascript">  <span class="keyword">var</span> url = <span class="string">"http://how2j.cn/study/checkName.jsp?name="</span>+name;</span></div><div class="line"><span class="undefined"> </span></div><div class="line"><span class="javascript">  xmlhttp =<span class="keyword">new</span> XMLHttpRequest();</span></div><div class="line"><span class="javascript">  xmlhttp.onreadystatechange=checkResult; <span class="comment">//响应函数</span></span></div><div class="line"><span class="javascript">  xmlhttp.open(<span class="string">"GET"</span>,url,<span class="literal">true</span>);   <span class="comment">//设置访问的页面</span></span></div><div class="line"><span class="javascript">  xmlhttp.send(<span class="literal">null</span>);  <span class="comment">//执行访问</span></span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"> </span></div><div class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">checkResult</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript">  <span class="keyword">if</span> (xmlhttp.readyState==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>)</span></div><div class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'checkResult'</span>).innerHTML=xmlhttp.responseText;</span></div><div class="line"><span class="undefined">  </span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"> </span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><ul><li>jquery</li></ul><p>使用前先引入jQuery库</p><p><code>$(function(){...});</code> 表示在HTML文档加载完成后在执行()里的内容 function，防止jQuery代码被提前执行；<br><code>$(&quot;css selector&quot;)</code> 用于选中元素对象<br>jQuery可以方便的在元素对象上监听事件<code>$(&quot;css selector&quot;).click(function(){})</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://how2j.cn/study/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript">   $(<span class="string">"#b1"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript">      $(<span class="string">"#d"</span>).hide();</span></div><div class="line"><span class="undefined">   &#125;);</span></div><div class="line"><span class="javascript">   $(<span class="string">"#b2"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript">      $(<span class="string">"#d"</span>).show();</span></div><div class="line"><span class="undefined">   &#125;);</span></div><div class="line"><span class="undefined">&#125;);</span></div><div class="line"><span class="undefined"> </span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"b1"</span>&gt;</span>隐藏div<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"b2"</span>&gt;</span>显示div<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"d"</span>&gt;</span></div><div class="line"> </div><div class="line">这是一个div</div><div class="line"> </div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="JQuery元素提取内容"><a href="#JQuery元素提取内容" class="headerlink" title="JQuery元素提取内容"></a>JQuery元素提取内容</h3><p>取值使用 <code>$(&quot;css selector&quot;).val();</code> 相当于 <code>document.getElementById(&quot;input1&quot;).value;</code><br>获取元素使用 <code>$(&quot;css selector&quot;).html();</code><br>不包含标签的元素 <code>$(&quot;css selector&quot;).text();</code></p><h3 id="操作css"><a href="#操作css" class="headerlink" title="操作css"></a>操作css</h3><p>增加、移除class，切换class状态，以及css函数的使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   $(<span class="string">"#b1"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      $(<span class="string">"#d"</span>).addClass(<span class="string">"pink"</span>); <span class="comment">//增加class pink，要有.pink的class定义，样式才会生效</span></div><div class="line">      $(<span class="string">"#d"</span>).removeClass(<span class="string">"pink"</span>);<span class="comment">// 移除class </span></div><div class="line">      $(<span class="string">"#d"</span>).toggleClass(<span class="string">"pink"</span>); <span class="comment">//切换class，如果存在pink则移除，不存在则添加</span></div><div class="line">      $(<span class="string">"#d2"</span>).css(&#123;<span class="string">"background-color"</span>:<span class="string">"pink"</span>,<span class="string">"color"</span>:<span class="string">"green"</span>&#125;); <span class="comment">// 使用css函数，修改style里的属性键值。</span></div><div class="line">      $(<span class="string">"#d1"</span>).css(<span class="string">"background-color"</span>,<span class="string">"pink"</span>);</div><div class="line">   &#125;);</div><div class="line">  </div><div class="line">&#125;);</div><div class="line"></div><div class="line">&lt;style&gt;</div><div class="line">.pink&#123;</div><div class="line">   background-color:pink;</div><div class="line">&#125;</div><div class="line">&lt;<span class="regexp">/style&gt;</span></div></pre></td></tr></table></figure><h3 id="jQuery选择器"><a href="#jQuery选择器" class="headerlink" title="jQuery选择器"></a>jQuery选择器</h3><p>准确的将应该是css选择器，利用标签、样式、属性选择元素。</p><ul><li><code>$(this)</code> 表示当前元素</li><li><code>$(&quot;tagName&quot;)</code></li><li><code>$(&quot;#id&quot;)</code></li><li><code>$(&quot;.className&quot;)</code></li><li><code>$(&quot;tagName&quot;)</code></li><li><code>$(&quot;div#id1 span.red a&quot;)</code></li></ul><p>有条件的选中元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"div:first"</span>).addClass(<span class="string">"pink"</span>); <span class="comment">// 选中第一个元素</span></div><div class="line">$(<span class="string">"div:last"</span>).addClass(<span class="string">"pink"</span>); <span class="comment">// 选中最后一个元素</span></div><div class="line">$(<span class="string">"div:odd"</span>).toggleClass(<span class="string">"pink"</span>); <span class="comment">// 选中偶数元素</span></div><div class="line">$(<span class="string">"div:even"</span>).toggleClass(<span class="string">"pink"</span>); <span class="comment">// 选中奇数元素</span></div><div class="line">$(<span class="string">"selector:hidden"</span>)  <span class="comment">// 满足选择器条件的不可见的元素</span></div><div class="line">$(<span class="string">"selector:visible"</span>)   <span class="comment">//  满足选择器条件的可见的元素</span></div></pre></td></tr></table></figure><p>根据属性选择元素，属性值的比较</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"selector[attribute]"</span>)   <span class="comment">// 满足选择器条件的有某属性的元素</span></div><div class="line">$(<span class="string">"selector[attribute=value]"</span>) <span class="comment">// 满足选择器条件的属性等于value的元素</span></div><div class="line">$(<span class="string">"selector[attribute!=value]"</span>) <span class="comment">// 满足选择器条件的属性不等于value的元素</span></div><div class="line">$(<span class="string">"selector[attribute^=value]"</span>) <span class="comment">// 满足选择器条件的属性以value开头的元素</span></div><div class="line">$(<span class="string">"selector[attribute$=value]"</span>) <span class="comment">// 满足选择器条件的属性以value结尾的元素</span></div><div class="line">$(<span class="string">"selector[attribute*=value]"</span>) <span class="comment">// 满足选择器条件的属性包含value的元素</span></div></pre></td></tr></table></figure><p>表单对象和表单对象属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"selector:input"</span>) <span class="comment">// 会选择所有的输入元素，不仅仅是input标签开始的那些，还包括textarea,select和button</span></div><div class="line">$(<span class="string">"selector:button"</span>) <span class="comment">// 会选择type=button的input元素和button元素</span></div><div class="line">$(<span class="string">"selector:radio"</span>) <span class="comment">// 会选择单选框</span></div><div class="line">$(<span class="string">"selector:checkbox"</span>) <span class="comment">// 会选择复选框</span></div><div class="line">$(<span class="string">"selector:text"</span>) <span class="comment">// 会选择文本框，但是不会选择文本域</span></div><div class="line">$(<span class="string">"selector:submit"</span>) <span class="comment">// 会选择提交按钮</span></div><div class="line">$(<span class="string">"selector:image"</span>) <span class="comment">// 会选择图片型提交按钮</span></div><div class="line">$(<span class="string">"selector:reset"</span>) <span class="comment">// 会选择重置按钮</span></div><div class="line"></div><div class="line"><span class="comment">//表单对象属性</span></div><div class="line"></div><div class="line">$(<span class="string">"selector:enabled"</span>) <span class="comment">// 会选择可用的输入元素 注：输入元素的默认状态都是可用 </span></div><div class="line">$(<span class="string">"selector:disabled"</span>) <span class="comment">// 会选择不可用的输入元素 </span></div><div class="line">$(<span class="string">"selector:checked"</span>) <span class="comment">// 会选择被选中的单选框和复选框 注： checked在部分浏览器上(火狐,chrome)也可以选中selected的option </span></div><div class="line">$(<span class="string">"selector:select"</span>) <span class="comment">// 会选择被选中的option元素</span></div></pre></td></tr></table></figure><h3 id="jQuery筛选器"><a href="#jQuery筛选器" class="headerlink" title="jQuery筛选器"></a>jQuery筛选器</h3><p>在选择器后可以使用的筛选函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"div"</span>).first().toggleClass(<span class="string">"pink"</span>); <span class="comment">// 选中第一个元素</span></div><div class="line">$(<span class="string">"div"</span>).last().toggleClass(<span class="string">"pink"</span>); <span class="comment">// 选中最后一个元素</span></div><div class="line">$(<span class="string">"div"</span>).eq(<span class="number">4</span>).toggleClass(<span class="string">"pink"</span>); <span class="comment">// 选中第n个元素，n起始为0</span></div><div class="line">$(<span class="string">"#currentDiv"</span>).parent().toggleClass(<span class="string">"b"</span>); <span class="comment">// 选中父元素</span></div><div class="line">$(<span class="string">"#currentDiv"</span>).parents().toggleClass(<span class="string">"b"</span>); <span class="comment">// 选中祖先元素</span></div><div class="line">$(<span class="string">"#currentDiv"</span>).children().toggleClass(<span class="string">"b"</span>); <span class="comment">// 选中直接子元素</span></div><div class="line">$(<span class="string">"#currentDiv"</span>).siblings().toggleClass(<span class="string">"b"</span>); <span class="comment">// 选中同级元素</span></div><div class="line">$(<span class="string">"#currentDiv"</span>).find(<span class="string">"div"</span>).toggleClass(<span class="string">"b"</span>); <span class="comment">// 在当前元素下继续使用selector查找</span></div></pre></td></tr></table></figure><h3 id="jQuery操作元素属性"><a href="#jQuery操作元素属性" class="headerlink" title="jQuery操作元素属性"></a>jQuery操作元素属性</h3><p>attr 和 prop 获取、修改、删除</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#h"</span>).attr(<span class="string">"align"</span>) <span class="comment">// 获取align属性</span></div><div class="line">$(<span class="string">"#h"</span>).attr(<span class="string">"align"</span>,<span class="string">"right"</span>) ; <span class="comment">// 修改align属性</span></div><div class="line">$(<span class="string">"#h"</span>).removeAttr(<span class="string">"align"</span>); <span class="comment">// 删除属性</span></div><div class="line"></div><div class="line"><span class="comment">// prop无法获取用户自定义的属性</span></div><div class="line">$(<span class="string">"#c"</span>).prop(<span class="string">"game"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 对于选中属性，如checked，attr获取的是初始值即checked, prop获取的是当前状态，返回的是true or false</span></div><div class="line">$(<span class="string">"#c"</span>).attr(<span class="string">"checked"</span>); <span class="comment">// 结果是不变的初始值</span></div><div class="line">$(<span class="string">"#c"</span>).prop(<span class="string">"checked"</span>); <span class="comment">// 结果为当前状态</span></div></pre></td></tr></table></figure><h3 id="jQuery动画效果"><a href="#jQuery动画效果" class="headerlink" title="jQuery动画效果"></a>jQuery动画效果</h3><p>效果函数允许传入一个延时参数和动画完成后的回调函数</p><ul><li>显示 隐藏 切换<br>显示 隐藏 切换 分别通过show(), hide(),toggle()实现；<br>也可以加上毫秒数，表示延时操作,比如show(2000)</li><li>滑动<br>向上滑动 向下滑动 滑动切换 分别通过slideUp(), slideDown(),slideToggle()实现<br>也可以加上毫秒数，表示延时操作，比如slideUp(2000) </li><li>淡入 淡出<br>淡入 淡出 淡入淡出切换 指定淡入程度 分别通过fadeIn(), fadeOut(),fadeToggle() fadeTo()实现<br>也可以加上毫秒数，表示延时操作，比如fadeIn(2000)<br>fadeTo跟的参数是0-1之间的小数。 0表示不淡入，1表示全部淡入</li><li>自定义动画效果<br>通过animate 可以实现更为丰富的动画效果<br>animate()第一个参数为css样式<br>animate()第二个参数为延时毫秒<br>注： 默认情况下，html中的元素都是固定，并且无法改变的位置的。 为了使用animate()自定义动画效果，需要通过css把元素的position设置为relative、absolute或者fixed。</li><li>回调函数<br>效果一般需要一定的时间，并且这个时间可长可短，所以就无法精确的确定该效果合适结束。<br>好在，效果方法都提供对回调函数callback()的支持。<br>只需要在调用效果方法的最后一个参数传入一个function，当效果结束的时候，就会自动调用该function了。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> div = $(<span class="string">"#d"</span>);</div><div class="line">div.hide();  <span class="comment">// 隐藏元素div</span></div><div class="line">div.show(); <span class="comment">// 显示元素div</span></div><div class="line">div.toggle(); <span class="comment">// 切换状态，显示或隐藏元素div</span></div><div class="line"><span class="comment">// 延时1000毫秒</span></div><div class="line">div.hide(<span class="number">1000</span>);</div><div class="line">div.show(<span class="number">1000</span>);</div><div class="line">div.toggle(<span class="number">1000</span>);</div><div class="line"></div><div class="line">div.slideUp(); <span class="comment">// 向上滑动</span></div><div class="line">div.slideDown(<span class="number">1000</span>);  <span class="comment">// 向下滑动</span></div><div class="line">div.slideToggle(); <span class="comment">// 滑动切换</span></div><div class="line"></div><div class="line">div.fadeIn(<span class="number">2000</span>); <span class="comment">// 延时2000毫秒淡入</span></div><div class="line">div.fadeOut(<span class="number">2000</span>); <span class="comment">// 延时2000毫秒淡出</span></div><div class="line">div.fadeToggle(<span class="number">2000</span>); <span class="comment">// 淡入淡出切换</span></div><div class="line"></div><div class="line"><span class="comment">// 指定淡入程度，0完全淡出元素不可见，1完全显示</span></div><div class="line">$(<span class="string">"#d1"</span>).fadeTo(<span class="string">"slow"</span>,<span class="number">0.2</span>);</div><div class="line">$(<span class="string">"#d2"</span>).fadeTo(<span class="string">"slow"</span>,<span class="number">0.5</span>);</div><div class="line">$(<span class="string">"#d3"</span>).fadeTo(<span class="string">"slow"</span>,<span class="number">0.8</span>);</div><div class="line"></div><div class="line"><span class="comment">// 自定义动画效果</span></div><div class="line">div.animate(&#123;<span class="attr">left</span>:<span class="string">'100px'</span>&#125;,<span class="number">2000</span>); <span class="comment">// 移动到距离左侧100px的位置</span></div><div class="line">div.animate(&#123;<span class="attr">left</span>:<span class="string">'0px'</span>,<span class="attr">top</span>:<span class="string">'50px'</span>,<span class="attr">height</span>:<span class="string">'50px'</span>&#125;,<span class="number">2000</span>); <span class="comment">// 移动到距左侧0px，距离顶部50px的位置，同时改变高度为50px；</span></div><div class="line"><span class="comment">// 动画结束后调用回调函数</span></div><div class="line">div.animate(&#123;<span class="attr">left</span>:<span class="string">'0px'</span>,<span class="attr">top</span>:<span class="string">'50px'</span>,<span class="attr">height</span>:<span class="string">'50px'</span>&#125;,<span class="number">2000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">     alert(<span class="string">"动画演示结束"</span>);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure><h3 id="jQuery事件"><a href="#jQuery事件" class="headerlink" title="jQuery事件"></a>jQuery事件</h3><p>加载 ：<code>$(document).ready()</code> <code>$()</code><br>图片加载： <code>load()</code><br>鼠标事件：<code>click()</code> <code>dblclick()</code>  <code>mousedown()</code> <code>mouseup()</code> <code>mousemove()</code> <code>mouseenter()</code> <code>mouseleave()</code> <code>mouseover()</code> <code>mouseout()</code><br>    mousedown 表示鼠标按下<br>mouseup表示鼠标弹起 </p><p>mousemove表示鼠标进入<br>mouseenter表示鼠标进入<br>mouseover表示鼠标进入 </p><p>mouseleave表示鼠标离开<br>mouseout表示鼠标离开 </p><p>进入事件有3个 mousemove mouseenter mouseover<br>mousemove ：当鼠标进入元素，每移动一下都会被调用<br>mouseenter ：当鼠标进入元素，调用一下，在其中移动，不调用<br>mouseover：当鼠标进入元素，调用一下，在其中移动，不调用 </p><p>mouseenter 和 mouseover的区别<br>mouseenter: 当鼠标经过其子元素不会被调用<br>mouseover：当鼠标经过其子元素会被调用 </p><p>mouseleave 和 mouseout的区别<br>mouseleave: 当鼠标经过其子元素不会被调用<br>mouseout：当鼠标经过其子元素会被调用</p><p>键盘事件 <code>keydown()</code> <code>keypress()</code> <code>keyup</code><br>    先后顺序： 按照 keydown keypress keyup 顺序发生<br>    键盘按钮值：<br>    通过event对象的which属性获取键盘的值<br>    keydown和keyup 能获取所有按键，不能识别大小写<br>    keypress 不能获取功能键，如F1 SHIFT等，能够识别大小写<br>    文本取值：<br>        keydown和keypress：不能获取最后一个字符<br>        keyup： 获取所有字符</p><p>焦点：     <code>focus()</code> <code>blur()</code><br>内容改变： <code>change()</code>  注： 对于文本框，只有当该文本失去焦点的时候，才会触发change事件。<br>提交： <code>submit()</code><br>绑定事件：<code>on()</code><br>触发事件： <code>trigger()</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// 页面加载</span></div><div class="line"> $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">"#message1"</span>).html(<span class="string">"页面加载成功"</span>);</div><div class="line">  &#125;);</div><div class="line"> </div><div class="line"> $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  <span class="comment">// 不常用</span></div><div class="line">    $(<span class="string">"#message1"</span>).html(<span class="string">"页面加载成功"</span>);</div><div class="line">  &#125;);</div><div class="line">  </div><div class="line">  <span class="comment">// 图片加载</span></div><div class="line"> $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">"#img"</span>).load(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      $(<span class="string">"#message2"</span>).html(<span class="string">"图片加载成功"</span>);</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">  </div><div class="line"><span class="comment">/* click() 表示单击 dblclick() 表示双击; </span></div><div class="line"><span class="comment">注: 空白键和回车键也可以触发click事件，但是只有双击鼠标才能造成dblclick事件 */</span></div><div class="line">  $(<span class="string">"#b"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">          $(<span class="string">"#message"</span>).html(<span class="string">"单击按钮"</span>);</div><div class="line">      &#125;);</div><div class="line">  $(<span class="string">"#b"</span>).dblclick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">          $(<span class="string">"#message"</span>).html(<span class="string">"双击按钮"</span>);</div><div class="line">      &#125;);</div><div class="line">  <span class="comment">// 键盘事件</span></div><div class="line">  $(<span class="string">"#i"</span>).keydown(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">     alert(e.which)</div><div class="line">  &#125;);</div><div class="line">  </div><div class="line">  <span class="comment">// 焦点</span></div><div class="line">  $(<span class="string">"input"</span>).focus(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="keyword">this</span>).val(<span class="string">"获取了焦点"</span>);</div><div class="line"> &#125;);</div><div class="line">  </div><div class="line">  $(<span class="string">"input"</span>).blur(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="keyword">this</span>).val(<span class="string">"失去了焦点"</span>);</div><div class="line"> &#125;);</div><div class="line"> <span class="comment">// 内容改变：</span></div><div class="line"> $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">"#input1"</span>).change(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> text = $(<span class="keyword">this</span>).val();</div><div class="line">        $(<span class="string">"#message"</span>).html(<span class="string">"input1的内容变为了"</span>+text);</div><div class="line">    &#125;);</div><div class="line"> &#125;);</div><div class="line"> </div><div class="line"> <span class="comment">// 以上操作都可以用$(element).on(event,function)形式实现</span></div><div class="line"> $(<span class="string">"#b"</span>).on(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">          $(<span class="string">"#message"</span>).html(<span class="string">"单击按钮"</span>);</div><div class="line">      &#125;);</div><div class="line"> </div><div class="line"> <span class="comment">// 事件也可以主动触发</span></div><div class="line"> $(<span class="string">"#b"</span>).trigger(<span class="string">"dblclick"</span>); <span class="comment">// 触发双击事件</span></div></pre></td></tr></table></figure><h3 id="JQuery实现AJAX"><a href="#JQuery实现AJAX" class="headerlink" title="JQuery实现AJAX"></a>JQuery实现AJAX</h3><ul><li><code>$.ajax()</code><br>默认type参数为GET请求方式<br>重要的参数有url，data，type，回调函数success、error、complete，dataType包括”xml html script json jsonp text”, 不指定则由JQuery自行判断。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#name"</span>).keyup(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">     <span class="keyword">var</span> page = <span class="string">"/study/checkName.jsp"</span>;</div><div class="line">     <span class="keyword">var</span> value = $(<span class="keyword">this</span>).val();</div><div class="line">        $.ajax(&#123;</div><div class="line">            url: page,  <span class="comment">// 提交的页面</span></div><div class="line">            data:&#123;<span class="string">"name"</span>:value&#125;, <span class="comment">// 提交的数据</span></div><div class="line">            success: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123; <span class="comment">// 成功后处理返回结果</span></div><div class="line">              $(<span class="string">"#checkResult"</span>).html(result);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">   &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><ul><li><code>$.get()</code> 和 <code>s.post()</code></li></ul><p>使用3个参数 访问的页面,提交的数据,回调函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$.get(</div><div class="line">            page,</div><div class="line">            &#123;<span class="string">"name"</span>:value&#125;,</div><div class="line">            <span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</div><div class="line">              $(<span class="string">"#checkResult"</span>).html(result);</div><div class="line">            &#125;</div><div class="line">        );</div><div class="line">        </div><div class="line"> $.post(</div><div class="line">            page,</div><div class="line">            &#123;<span class="string">"name"</span>:value&#125;,</div><div class="line">            <span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</div><div class="line">              $(<span class="string">"#checkResult"</span>).html(result);</div><div class="line">            &#125;</div><div class="line">        );</div></pre></td></tr></table></figure><ul><li><p><code>$(&quot;div&quot;).load(pageUrl, data)</code> 在指定的div里显示请求pageUrl获取到的数据</p></li><li><p><code>var data = $(&quot;#form&quot;).serialize();</code> 将表单输入值格式化字符串</p></li></ul><h3 id="JQuery操作数组、字符串、json"><a href="#JQuery操作数组、字符串、json" class="headerlink" title="JQuery操作数组、字符串、json"></a>JQuery操作数组、字符串、json</h3><ul><li><code>$.each(array, function(index, data){})</code><br> 接收一个数组和一个回调函数，回调函数的参数为下标和数组元素值</li><li><code>$.unique(array)</code>  数组去重，去重前需要先排序</li><li><code>$.inArray(data,array)</code>  判断data是否在数组中</li><li><code>$.trim(&quot; Hello JQuery    &quot;)</code>  去掉字符串首尾的空格</li><li><code>$.parseJSON(&quot;{\&quot;name\&quot;: \&quot;Teemo\&quot;}&quot;)</code> 将json字符串解析成json对象</li></ul><h3 id="JQuery对象和JavaScript-DOM对象切换"><a href="#JQuery对象和JavaScript-DOM对象切换" class="headerlink" title="JQuery对象和JavaScript DOM对象切换"></a>JQuery对象和JavaScript DOM对象切换</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// jQuery转DOM</span></div><div class="line"><span class="keyword">var</span> div= $(<span class="string">"#d"</span>);  <span class="comment">// jQuery对象</span></div><div class="line"><span class="keyword">var</span> d = div[<span class="number">0</span>];    <span class="comment">// DOM对象</span></div><div class="line"><span class="keyword">var</span> d = div.get(<span class="number">0</span>); <span class="comment">// DOM对象</span></div><div class="line"></div><div class="line"><span class="comment">// DOM转jQuery</span></div><div class="line"><span class="keyword">var</span> div= <span class="built_in">document</span>.getElementById(<span class="string">"d"</span>); <span class="comment">//DOM对象</span></div><div class="line"><span class="keyword">var</span> d = $(div); <span class="comment">// jQuery对象</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;JavaScript判断表单内容，不满足条件则不提交&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;form method=&amp;quot;post&amp;quot; action=&amp;quot;/study/register.jsp&amp;quot; onsubmit=&amp;quot;return register()&amp;quot;&amp;gt;&lt;/code&gt;&lt;br&gt;长度判断&lt;br&gt;整数判断&lt;br&gt;正则判断&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;method&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;post&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;action&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;/study/register.jsp&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;onsubmit&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;return register()&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;账号：&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;年龄：&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;age&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;age&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;EMail：&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;email&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;email&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;submit&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;注册&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;register&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(name.value.length&amp;lt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;     alert(&lt;span class=&quot;string&quot;&gt;&quot;用户名至少需要3位长度&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; age = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&quot;age&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;isNaN&lt;/span&gt;(age.value))&amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;     alert(&lt;span class=&quot;string&quot;&gt;&quot;年龄必须是数字&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; email = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&quot;email&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;       &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;==email.value.length)&amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;     alert(&lt;span class=&quot;string&quot;&gt;&quot;email不能为空&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;    &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Regex = &lt;span class=&quot;regexp&quot;&gt;/^(?:\w+\.?)*\w+@(?:\w+\.)*\w+$/&lt;/span&gt;;       &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;    &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!Regex.test(email.value))&amp;#123;                &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;       alert(&lt;span class=&quot;string&quot;&gt;&quot;email格式不正确&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;  &amp;#125;            &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Web" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/Web/"/>
    
      <category term="JavaScript" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/Web/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://shuaiyy.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Zeal自制docset</title>
    <link href="http://shuaiyy.cn/2018/01/15/%E6%8A%80%E6%9C%AF/Zeal%E8%87%AA%E5%88%B6docset/"/>
    <id>http://shuaiyy.cn/2018/01/15/技术/Zeal自制docset/</id>
    <published>2018-01-14T16:00:00.000Z</published>
    <updated>2018-06-03T08:17:28.517Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Zeal自制docset"><a href="#Zeal自制docset" class="headerlink" title="Zeal自制docset"></a>Zeal自制docset</h2><h3 id="Zeal使用"><a href="#Zeal使用" class="headerlink" title="Zeal使用"></a>Zeal使用</h3><blockquote><p> Zeal是一款离线文档浏览器（类似于MAC下的dash），可以配合各种编辑器，IDE使用。官方提供的数百个不同应用的离线文档(docset格式)，当某个文档官方没有提供时，我们可以自己制作一个。本文以Scrapy 1.5的文档为例。</p></blockquote><p>在IDEA、Pycharm中使用，安装Dash插件，选中要查找的字符串，<code>ctrl shift b</code>在Zeal中查看API。</p><h3 id="docset文档源"><a href="#docset文档源" class="headerlink" title="docset文档源"></a>docset文档源</h3><ol><li>任意的HTML文档</li><li>AppleDoc</li><li>Python, Sphinx or PyDoctor</li><li>javadoc</li><li>Rdoc</li><li>Scaladoc</li><li>goDoc</li><li>JSDoc</li><li>Doxygen</li></ol><p>基本上所有的文档都可以转换为docset。</p><a id="more"></a><h3 id="生成Docset"><a href="#生成Docset" class="headerlink" title="生成Docset"></a>生成Docset</h3><p><a href="https://kapeli.com/docsets#python" target="_blank" rel="external">官方指南-生成docset</a></p><blockquote><p> 本例使用的是python doc生成docset，使用的工具为<a href="https://doc2dash.readthedocs.io/en/stable/usage.html" target="_blank" rel="external">doc2dash</a>, scrapy文档源可以下载官方源码，解压源码中的doc文件夹。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 在Python的虚拟环境里安装</span></div><div class="line">pip install Sphinx&gt;=1.3</div><div class="line">pip install sphinx_rtd_theme</div><div class="line">pip install doc2dash</div></pre></td></tr></table></figure><h4 id="下载doc源文档"><a href="#下载doc源文档" class="headerlink" title="下载doc源文档"></a>下载doc源文档</h4><p>在github上下载scrapy的源码，其中包含<a href="https://github.com/scrapy/scrapy/tree/1.5/docs" target="_blank" rel="external">doc文档的源码</a></p><h4 id="编译doc文档"><a href="#编译doc文档" class="headerlink" title="编译doc文档"></a>编译doc文档</h4><p>使用sphinx编译doc文档源码。sphinx是Python下广泛使用的文档编写工具，可以将srt格式的文档编译成HTMl，大多数python第三方库使用的都是该工具，并且发布在免费的文档托管网站，read the doc。</p><p> 编译<code>sphinx-build -b html docs docs_dir</code> , 如果想要自己创建、编写文档，可以参考sphix的<a href="https://zh-sphinx-doc.readthedocs.io/en/latest/tutorial.html" target="_blank" rel="external">用法</a></p><h4 id="生成docset"><a href="#生成docset" class="headerlink" title="生成docset"></a>生成docset</h4><p>将编译好的html转换成docset，doc2dash<a href="https://doc2dash.readthedocs.io/en/stable/usage.html" target="_blank" rel="external">用法</a> </p><p><code>doc2dash -u https://doc.scrapy.org/en/1.5/ -n scrapy_1.5 docs_dir</code> </p><p>将得到的 <code>scrapy_1.5.docset</code> 文件夹拷贝到Zeal的文档文件下。</p><h4 id="添加图标和meta信息"><a href="#添加图标和meta信息" class="headerlink" title="添加图标和meta信息"></a>添加图标和meta信息</h4><p>在docset文件夹里添加文件icon.png和meta.json </p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180124/hgk7la7E56.png?imageslim" alt="mark"> </p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># meta.json</div><div class="line"></div><div class="line">&#123;</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"Scrapy"</span>,</div><div class="line">    <span class="attr">"revision"</span>: <span class="string">"0"</span>,</div><div class="line">    <span class="attr">"title"</span>: <span class="string">"Scrapy"</span>,</div><div class="line">    <span class="attr">"version"</span>: <span class="string">"1.5.0"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>打开Zeal查看效果：</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180124/fbBg250EGh.png?imageslim" alt="mark"> </p><h3 id="发布docset"><a href="#发布docset" class="headerlink" title="发布docset"></a>发布docset</h3><p><a href="https://kapeli.com/docsets#improveDocset" target="_blank" rel="external">参考</a></p><ul><li><p>可以将其贡献给Dash，方便其他的dash用户下载使用。</p></li><li><p>制作feed分享</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># scrapy.xml</div><div class="line"><span class="tag">&lt;<span class="name">entry</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://github.com/shuaiyy/Scrapy_1.5.docset/files/1658982/Scrapy_1.5.docset.tar.gz<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></div></pre></td></tr></table></figure><p>feed 的url  <a href="https://raw.githubusercontent.com/shuaiyy/Scrapy_1.5.docset/master/scrapy.xml" target="_blank" rel="external">https://raw.githubusercontent.com/shuaiyy/Scrapy_1.5.docset/master/scrapy.xml</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Zeal自制docset&quot;&gt;&lt;a href=&quot;#Zeal自制docset&quot; class=&quot;headerlink&quot; title=&quot;Zeal自制docset&quot;&gt;&lt;/a&gt;Zeal自制docset&lt;/h2&gt;&lt;h3 id=&quot;Zeal使用&quot;&gt;&lt;a href=&quot;#Zeal使用&quot; class=&quot;headerlink&quot; title=&quot;Zeal使用&quot;&gt;&lt;/a&gt;Zeal使用&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt; Zeal是一款离线文档浏览器（类似于MAC下的dash），可以配合各种编辑器，IDE使用。官方提供的数百个不同应用的离线文档(docset格式)，当某个文档官方没有提供时，我们可以自己制作一个。本文以Scrapy 1.5的文档为例。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在IDEA、Pycharm中使用，安装Dash插件，选中要查找的字符串，&lt;code&gt;ctrl shift b&lt;/code&gt;在Zeal中查看API。&lt;/p&gt;
&lt;h3 id=&quot;docset文档源&quot;&gt;&lt;a href=&quot;#docset文档源&quot; class=&quot;headerlink&quot; title=&quot;docset文档源&quot;&gt;&lt;/a&gt;docset文档源&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;任意的HTML文档&lt;/li&gt;
&lt;li&gt;AppleDoc&lt;/li&gt;
&lt;li&gt;Python, Sphinx or PyDoctor&lt;/li&gt;
&lt;li&gt;javadoc&lt;/li&gt;
&lt;li&gt;Rdoc&lt;/li&gt;
&lt;li&gt;Scaladoc&lt;/li&gt;
&lt;li&gt;goDoc&lt;/li&gt;
&lt;li&gt;JSDoc&lt;/li&gt;
&lt;li&gt;Doxygen&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基本上所有的文档都可以转换为docset。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Zeal" scheme="http://shuaiyy.cn/tags/Zeal/"/>
    
  </entry>
  
  <entry>
    <title>Python logging 模块编码错误</title>
    <link href="http://shuaiyy.cn/2018/01/08/%E6%8A%80%E6%9C%AF/Logging%20unicode%20decode%20error/"/>
    <id>http://shuaiyy.cn/2018/01/08/技术/Logging unicode decode error/</id>
    <published>2018-01-07T16:00:00.000Z</published>
    <updated>2018-06-03T09:50:19.692Z</updated>
    
    <content type="html"><![CDATA[<h3 id="python-logging-UnicodeDecodeError解决方法"><a href="#python-logging-UnicodeDecodeError解决方法" class="headerlink" title="python logging UnicodeDecodeError解决方法"></a>python logging UnicodeDecodeError解决方法</h3><p>一般是python2.7写入中文时编码错误<br>在logging中加上</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys  </div><div class="line">reload(sys)  </div><div class="line">sys.setdefaultencoding(<span class="string">"utf-8"</span>)</div></pre></td></tr></table></figure><p>如果是 <code>stream.write(fs % msg.encode(&quot;UTF-8&quot;))</code> 这行代码异常，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:  </div><div class="line">    stream.write(fs % msg.encode(<span class="string">"UTF-8"</span>))  </div><div class="line"><span class="keyword">except</span> UnicodeError:  </div><div class="line">    stream.write(fs % msg.decode(<span class="string">"gbk"</span>).encode(<span class="string">"UTF-8"</span>))</div><div class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">    <span class="keyword">print</span> e.msg</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;python-logging-UnicodeDecodeError解决方法&quot;&gt;&lt;a href=&quot;#python-logging-UnicodeDecodeError解决方法&quot; class=&quot;headerlink&quot; title=&quot;python logging Uni
      
    
    </summary>
    
      <category term="技术" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Python" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Java编程高级编程</title>
    <link href="http://shuaiyy.cn/2018/01/07/%E6%8A%80%E6%9C%AF/Java%E9%AB%98%E7%BA%A7/"/>
    <id>http://shuaiyy.cn/2018/01/07/技术/Java高级/</id>
    <published>2018-01-06T16:00:00.000Z</published>
    <updated>2018-06-03T07:53:34.577Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java编程高级"><a href="#Java编程高级" class="headerlink" title="Java编程高级"></a>Java编程高级</h2><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p>JVM至少启动2个线程，main和gc</p><p>三种实现方式</p><h4 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h4><ul><li>必须覆写Thread类中的run方法，是线程运行的主体。</li><li>start方法启动线程，运行的是run内的代码</li></ul><h4 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h4><ul><li>解决单继承的限制</li><li>覆写run方法</li><li>Runnable对象没有start方法，Thread类可以接收Runnable接口对象，构造Thread实例，然后并调用start启动。</li></ul><h4 id="Callable接口"><a href="#Callable接口" class="headerlink" title="Callable接口"></a>Callable接口</h4><p>Runnable接口的run方法不能返回操作接口，<code>java.util.concurrent.Callable</code>提供。</p><p>Callable由FutureTask对象接收。FutureTask对象可以取得返回结果，由Thread类启动FutureTask。</p><h4 id="实现区别"><a href="#实现区别" class="headerlink" title="实现区别"></a>实现区别</h4><ol><li><p>接口可以解决单继承问题</p></li><li><p>Thread内部实现了Runnable接口，是其子类</p><p>Thread实现系统资源分配和执行目标功能，Runnable负责执行目标功能。</p><p>Thread很像代理设计模式，但是start方法不是接口提供的。</p></li><li><p>Runnable能更好的描述线程间的数据共享 </p></li></ol><a id="more"></a><h4 id="线程对象命名与获取"><a href="#线程对象命名与获取" class="headerlink" title="线程对象命名与获取"></a>线程对象命名与获取</h4><ul><li>Thread对象构造时传入</li><li>使用setName,getName方法</li><li>取得当前线程对象 <code>Thread.currentThread()</code> </li></ul><h4 id="休眠、优先级"><a href="#休眠、优先级" class="headerlink" title="休眠、优先级"></a>休眠、优先级</h4><ul><li>sleep() 单位是毫秒，中断sleep会抛出中断异常。</li><li>setPriority</li><li>getPriority</li></ul><h4 id="同步和死锁"><a href="#同步和死锁" class="headerlink" title="同步和死锁"></a>同步和死锁</h4><p>多个线程访问同一数据时，需要同步。</p><p>多个线程互相等待，陷入死锁。</p><ul><li>同步代码块</li></ul><p>使用同步关键字 <code>synchronizied</code>定义同步代码块，锁定一个对象。</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180107/9g9E6Kj14f.png?imageslim" alt="mark">  </p><ul><li><p>同步方法 </p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180107/EF1L40DIHf.png?imageslim" alt="mark">  </p></li></ul><h4 id="生产者消费者"><a href="#生产者消费者" class="headerlink" title="生产者消费者"></a>生产者消费者</h4><p>实现等待和唤醒机制，Object类提供了实现方法<code>notify, wait</code>。</p><p>product设置一个flag标志，如果生产者可以生产则生产一个，并唤醒消费者线程来消费。如果不能生产，则需等待，当满足条件时会被唤醒生产。</p><p>消费者如果可以消费，则消费一个并唤醒生产者生产，否则等待生产者来唤醒消费。</p><h4 id="sleep和wait的区别"><a href="#sleep和wait的区别" class="headerlink" title="sleep和wait的区别"></a>sleep和wait的区别</h4><p>sleep是Thread实现的方法，线程睡眠到时自动唤醒。</p><p>wait是Object类实现的，必须由notify实现。</p><h3 id="StringBuffer对象"><a href="#StringBuffer对象" class="headerlink" title="StringBuffer对象"></a>StringBuffer对象</h3><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180108/dmJJGHFI9c.png?imageslim" alt="mark"> </p><ul><li><p>StringBuffer可以修改内容，不能直接赋值实例化，可以使用append拼接字符串。</p><p><code>StringBuffer(String obj)</code></p><p><code>StringBuffer().append(String obj)</code></p><p><code>StringBuffer(&quot;hello world&quot;).toString()</code></p><p><code>String(StringBuffer obj)</code></p></li><li><p>String与StringBuffer的内容比较</p><p><code>contentEquals</code></p></li></ul><p>String与StringBuffer都是<code>CharSequence</code>接口的子类。 </p><ul><li>reverse   sbf字符串反转，常规实现入栈出栈。</li><li><code>insert</code>  指定位置插入字符串</li><li><code>delete(start, end)</code> 删除指定位置的字符串</li></ul><h4 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h4><p>定义和方法与StringBuffer很相似，在是否同步上有区别。</p><ul><li>StringBuffer类的方法都是同步方法，属于线程安全的操作</li><li>StringBuilder的方法是异步方法</li></ul><h3 id="Runtime类"><a href="#Runtime类" class="headerlink" title="Runtime类"></a>Runtime类</h3><p>每个JVM进程都有唯一一个Runtime对象，其构造方法被私有化，属于单例设计，有一个static方法可以取得实例对象。</p><ul><li><p>totalMemory   返回全部内存大小</p></li><li><p>maxMemory   最大可用内存空间</p></li><li><p>freeMemory    空余可用空间</p></li><li><p>gc 释放垃圾空间</p></li><li><p>exec 创建Process进程对象</p><p><code>Process p = runtime.exec(&#39;cmd.exe&#39;); p.destory()</code></p></li></ul><h3 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h3><ul><li><p>System.out.println()</p></li><li><p>System.arraycopy()</p></li><li><p>System.currentTimeMillis()  获取当前时间毫秒</p></li><li><p>gc()   等价于调用runtime对象的GC</p><p>覆写Object对象的<code>finalize</code>方法，对象回收前被调用。</p><p> <img src="http://o8i01ajlj.bkt.clouddn.com/blog/180108/76IiA35cK4.png?imageslim" alt="mark"> </p></li></ul><h3 id="对象克隆"><a href="#对象克隆" class="headerlink" title="对象克隆"></a>对象克隆</h3><p>Object对象提供Clone方法 <code>protected Object clone() throws CloneNotSupportedException</code></p><p>可克隆对象必须实现<code>Cloneable</code>接口，Cloneable是标识接口，没有抽象方法。覆写Object类的Clone方法，实现clone操作。</p><p><code>@override clone(){return super().clone();}</code></p><h3 id="数学操作类"><a href="#数学操作类" class="headerlink" title="数学操作类"></a>数学操作类</h3><h4 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h4><p>math提供的一切方法都是static方法。</p><ul><li>Math.E  Math.PI</li><li>round() 四舍五入取整，  注意该方法的负数<code>-15.5</code>不产生进位。</li></ul><h4 id="Random类"><a href="#Random类" class="headerlink" title="Random类"></a>Random类</h4><p>产生随机数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Random rand = <span class="keyword">new</span> Random()</div><div class="line">rand.nextInt(<span class="number">100</span>)  <span class="comment">// 产生100以内随机整数</span></div></pre></td></tr></table></figure><h4 id="BigInteger和BigDecimal"><a href="#BigInteger和BigDecimal" class="headerlink" title="BigInteger和BigDecimal"></a>BigInteger和BigDecimal</h4><p>大整数，超过double范围的值为Infinity，可以用String保存，使用时按位取出计算真实值。</p><p>大浮点数，可以保存小数。</p><ul><li><p>BigInteger(String num)</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180108/aFa80E6352.png?imageslim" alt="mark"></p></li><li><p>BigDecimal</p><p>可以利用其divide方法实现准确小数位的四舍五入。</p><p> <img src="http://o8i01ajlj.bkt.clouddn.com/blog/180108/A8JeKg2fih.png?imageslim" alt="mark"> </p><p>​</p></li></ul><h3 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h3><p>java.util.Date</p><ul><li>new Date()   当前日期信息</li><li>new Date(long 时间戳)</li><li>date.getTime() 获取Date对象的时间戳</li></ul><h4 id="日期格式化"><a href="#日期格式化" class="headerlink" title="日期格式化"></a>日期格式化</h4><p><code>java.text.SimpleDateFormat</code></p><ul><li><p>构造方法传入string 日期转换格式</p><p>格式转换：“yyyy年-MM月–dd日-ss秒-SSS毫秒”</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180108/K380D1hf53.png?imageslim" alt="mark"> </p></li><li><p>format(Date date)</p></li><li><p>parse(String date)</p></li></ul><h4 id="Calendar类"><a href="#Calendar类" class="headerlink" title="Calendar类"></a>Calendar类</h4><p><code>java.util.Calendar</code>  </p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180108/1D5eDmc311.png?imageslim" alt="mark"> </p><h3 id="比较器"><a href="#比较器" class="headerlink" title="比较器"></a>比较器</h3><h4 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h4><p>与数组有关的操作</p><ul><li>java.util.Arrays.sort()  可以实现对象数组排序，对象必须实现Comparable接口</li><li>binarySearch()  二分查找</li><li>equals()  两个数组元素顺序，数值一样</li><li>fill() 填充数组</li><li>toString()  将数组以字符串的形式输出</li></ul><h4 id="Comparable接口"><a href="#Comparable接口" class="headerlink" title="Comparable接口"></a>Comparable接口</h4><p>定义对象的比较规则，String也是Comparable的子类。</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180108/13CJh349F5.png?imageslim" alt="mark"></p><p>Arrays.sort()会调用compareTo方法。</p><h4 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h4><h4 id="Comparator接口"><a href="#Comparator接口" class="headerlink" title="Comparator接口"></a>Comparator接口</h4><p>挽救的接口</p><p>开发完成的对象，在初期没有实现Comparable接口，后期需要比较，在不修改原对象的前提下，使用<code>java.util.Comparator</code> 接口。实现一个用于排序的工具类，排序时传入数组和排序工具类 <code>Arrays.sort(books, new BookComparator())</code></p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180108/g138e3mg3H.png?imageslim" alt="mark"> </p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180108/kmE67DfCdH.png?imageslim" alt="mark"> </p><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p><code>java.util.regex</code></p><ul><li><p>compile(‘regex str’)  返回Pattern对象</p></li><li><p>Matcher类</p></li><li><p><code>\\</code> 转义字符</p></li><li><p><code>[^abc]</code>不是abc里的任何一个</p></li><li><p>数量表达</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180108/d49bKamJhC.png?imageslim" alt="mark"> </p></li></ul><h4 id="String的正则支持"><a href="#String的正则支持" class="headerlink" title="String的正则支持"></a>String的正则支持</h4><ul><li>matches(regex str)    判断是否满足某种格式</li><li>repalceAll   替换全部</li><li>replaceFirst  替换匹配的第一个</li><li>split  拆分</li><li>split(str regex, int limit)  有个数限制的拆分   </li></ul><h3 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h3><p>先有类才能产生对象。类实例化对象的方式，new， clone，反射</p><p>反是指通过对象找到其类。<code>getClass</code>方法</p><p><code>java.util.Class</code>是所有反射操作开始的源头</p><ul><li>obj.getClass()</li><li>cls.class  类的class属性，没有实例化对象就拿到了类</li><li>Class.forName(‘java.lang.String’)  可以不用显式的import，而是通过类名获得类</li></ul><h4 id="利用反射实例化对象"><a href="#利用反射实例化对象" class="headerlink" title="利用反射实例化对象"></a>利用反射实例化对象</h4><p>工厂设计模式，解耦合，可扩展性强。</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180108/C8Eh3LLKIA.png?imageslim" alt="mark"></p><h4 id="利用反射调用构造"><a href="#利用反射调用构造" class="headerlink" title="利用反射调用构造"></a>利用反射调用构造</h4><p><code>java.lang.reflect.Constructor</code></p><ul><li><p>Class.getConstructor()获取类的构造方法</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180108/Ailg1LBkHd.png?imageslim" alt="mark"> </p></li></ul><h4 id="调用普通方法"><a href="#调用普通方法" class="headerlink" title="调用普通方法"></a>调用普通方法</h4><p><code>java.lang.reflect.Method</code></p><ul><li><p>Class.getMethod() </p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180108/aae74K1m4e.png?imageslim" alt="mark"> </p></li></ul><h4 id="调用成员属性"><a href="#调用成员属性" class="headerlink" title="调用成员属性"></a>调用成员属性</h4><p><code>java.lang.reflect.Field</code></p><p>反射可以实现取消封装，访问私有field</p><ul><li>field.get(‘fieldName’)</li><li>field.set(‘fieldName’)</li><li>field.setAccessible(true)  取消封装，设置可以访问</li></ul><h3 id="国际化支持"><a href="#国际化支持" class="headerlink" title="国际化支持"></a>国际化支持</h3><p><code>java.text.MessageFormat</code></p><p>将语言支持放入资源文件里，key=value，占位符，字符串里的可变内容。</p><p><code>info = 欢迎{0}来到{1}</code></p><p>如果是中文，则必须是Unicode编码</p><p>读取信息</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180108/H99aFaji7E.png?imageslim" alt="mark"> </p><p>获取国家的区域和语言编码，默认调用全局资源文件。</p><ul><li>zh_CN   <code>Message_zh_CN.properties</code>  访问时不加语言和文件类型后缀</li><li>en_US</li></ul><h4 id="Locale类"><a href="#Locale类" class="headerlink" title="Locale类"></a>Locale类</h4><ul><li>Local(‘语言’, ‘国家’)</li><li>getDefault()  获取当前语言环境</li></ul><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180108/5ljI2K6IIc.png?imageslim" alt="mark"> </p><h4 id="Properties类"><a href="#Properties类" class="headerlink" title="Properties类"></a>Properties类</h4><p>是Hashtable的子类，利用key-value保存String信息。</p><ul><li><p>setProperty(k, v)</p></li><li><p>getProperty(k, default v)</p></li><li><p>store(输出流，注释说明)</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180110/hkfefkkG6e.png?imageslim" alt="mark"> </p></li><li><p>load(输入流)  从读中取属性内容</p><p>也可以用ResourceBundle类读取。</p></li></ul><h3 id="IO操作"><a href="#IO操作" class="headerlink" title="IO操作"></a>IO操作</h3><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180109/9dFHGBL0ac.png?imageslim" alt="mark"> </p><h4 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h4><p><code>java.io.File</code></p><ul><li>定义File对象，传入文件路径</li><li>创建新文件createNewFile()</li><li>删除文件 delete()</li><li>判断是否存在 exists()</li><li>isDirectory()   isFile()</li><li>lastModified()  最近修改日期</li><li>File.separator  属性值，文件系统的分隔符</li><li>取得文件大小 length()</li></ul><h4 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h4><ul><li><p>getParent() 返回字符串，父路径</p></li><li><p>getParentFile() 取得父路径作为File类型，可以调用exists方法</p></li><li><p>mkdir() 创建一级目录</p></li><li><p>mkdirs()  创建多级目录</p></li><li><p>list 获取路径下的全部文件和文件夹的名字</p></li><li><p>listFiles()  返回的是File对象数组。</p></li><li><p>递归遍历或删除</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180108/9dhkeH3465.png?imageslim" alt="mark"> </p><p>​</p></li></ul><h4 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h4><p><code>InputStream</code> <code>OutputStream</code></p><ul><li>定义File对象</li><li>实例化字节流或字符流对象</li><li>数据读写</li><li>关闭数据流</li></ul><p><strong>OutputStream</strong>抽象类实现了2个接口Closeable、Flushable。write方法输出。</p><p><strong>FileOutputStream</strong>  接收一个File对象，可以覆盖内容或追加内容。</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180108/J1fCIc5Jaf.png?imageslim" alt="mark"> </p><p><strong>InputStream</strong> 的方法，skip跳过，read读取内容。使用<strong>FileInputStream</strong>读取文件。</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180108/F2gLF5C8i3.png?imageslim" alt="mark"></p><p>使用while循环读取文件内容：</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180108/144i5HHEaF.png?imageslim" alt="mark"> </p><h4 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h4><p><strong>输出流Writer</strong> 对象，在Appendable接口里提供了append追加操作， write方法输出对象是字符数组char []，也可以是Str类型。</p><p><strong>输入流Reader</strong> read(char [] cbuf)，输入流不能是Str接收。</p><p><strong>FileWrite</strong> </p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180109/E4lICf2Lh1.png?imageslim" alt="mark"> </p><p><strong>FileReader</strong></p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180109/jIC1JklkjK.png?imageslim" alt="mark"> </p><h4 id="字节流与字符流的区别"><a href="#字节流与字符流的区别" class="headerlink" title="字节流与字符流的区别"></a>字节流与字符流的区别</h4><ul><li>字节流可以与终端直接数据交互，字符流需要经过缓冲区处理后才能输出。</li><li>flush()操作可以清空缓冲区</li><li>字符流利于避免中文乱码问题，字符输出流可以直接输出Str对象</li></ul><h4 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h4><ul><li><p><code>InputStreamReader</code>   <code>OutputStreamWriter</code> </p><p>将字节流转换成字符流。</p></li></ul><p><strong>实现文件copy</strong></p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180109/G6BC654giG.png?imageslim" alt="mark"></p><h4 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h4><p>java内部使用的是Unicode，常见的是英文ASCII码。</p><p>程序编码使用UTF-8</p><p>强制编码 <code>&quot;hello&quot;.getBytes(&quot;GBK&quot;)</code></p><p>获取JVM默认编码</p><p>乱码解决</p><h4 id="内存流"><a href="#内存流" class="headerlink" title="内存流"></a>内存流</h4><ul><li><p>字节内存流</p><p><code>ByteArrayOutputStream</code>   <code>ByteArrayInputStream</code></p></li><li><p>字符内存流</p></li><li><p>output.toByteArray()</p></li></ul><h4 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h4><p><code>PrintStream</code>  <code>PrintWriter</code> </p><p><strong>装饰设计类</strong> : 对功能不足的OutputStream进行功能扩充。</p><ul><li><p>System.out.printf(String format,  args)    </p><p>%d, %m.nf , %s</p></li><li><p>String.format(String fmt, args)</p></li></ul><h4 id="System类的IO支持"><a href="#System类的IO支持" class="headerlink" title="System类的IO支持"></a>System类的IO支持</h4><p> <img src="http://o8i01ajlj.bkt.clouddn.com/blog/180109/dC2L1Kb3BE.png?imageslim" alt="mark"> </p><h4 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h4><ul><li>BufferedReader   BufferedWriter</li><li>BufferedInputStream    BufferedOutputStream</li></ul><p>BufferedReader的String readLine()读取一行数据，返回String对象。</p><p><strong>键盘输入处理</strong>: 超级麻烦</p><ul><li>将System.in 转换成Reader对象</li><li>利用BufferedReader的readLine方法进行数据读取</li></ul><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180109/70Fc5efmGC.png?imageslim" alt="mark"> </p><p><strong>缓冲区读取文本文件</strong></p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180109/LbLdCec0fA.png?imageslim" alt="mark"> </p><h4 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h4><p><code>java.util.Scanner</code></p><p>BufferedReader有两个不足，只能返回字符串，分隔符固定为回车。</p><ul><li>Scanner(InputStream source) 构造</li><li>hasNext()</li><li>next()</li><li>hasNextDouble()  判断输入的是否是小数</li><li>NextDouble() 取得输入的小数，不用类型转换。</li></ul><p>标准输入数据键盘：</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180109/HE832KLbgL.png?imageslim" alt="mark"> </p><p>处理文本文件：</p><ul><li>scan.useDelimiter(“\n”) 设置使用回车作为分隔符， 默认的以回车、空格。</li></ul><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180109/3c2l5DdJcH.png?imageslim" alt="mark"> </p><p>总结</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180109/2aHbEh1ml0.png?imageslim" alt="mark"> </p><h3 id="对象序列化"><a href="#对象序列化" class="headerlink" title="对象序列化"></a>对象序列化</h3><h4 id="序列化支持"><a href="#序列化支持" class="headerlink" title="序列化支持"></a>序列化支持</h4><p>将内存中数据对象转换为二进制数据流，用于传输。</p><p>对象必须实现<code>java.io.Serializable</code>接口才能被序列化。</p><p><code>Serializable</code>和<code>Cloneable</code>都是标识接口，没有内部方法。</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180109/IkEc1fd2Jb.png?imageslim" alt="mark"> </p><h4 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h4><p><code>java.io.ObjectOutputStream</code></p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180109/15fbl9Jil7.png?imageslim" alt="mark"> </p><h4 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h4><p><code>java.io.ObjectInputStream</code> </p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180109/1581140lCf.png?imageslim" alt="mark"> </p><h4 id="transient关键字"><a href="#transient关键字" class="headerlink" title="transient关键字"></a>transient关键字</h4><p>声明不能被序列化的属性</p><h3 id="类集"><a href="#类集" class="headerlink" title="类集"></a>类集</h3><p>实现了很多数据结构</p><h3 id="Collection接口"><a href="#Collection接口" class="headerlink" title="Collection接口"></a>Collection接口</h3><p>两个子接口，<strong>List</strong>  <strong>Set</strong> </p><ul><li>add 向集合里添加数据</li><li>addAll  追加一个集合</li><li>clear</li><li>contains</li><li>isEmpty</li><li>remove  需要对象的equals方法支持</li><li>size</li><li>toArray  将集合元素转换为对象数组</li><li>iterator()  获取iterator的实例</li></ul><h4 id="List接口"><a href="#List接口" class="headerlink" title="List接口"></a>List接口</h4><ul><li>list.get(int index)</li><li>list.set(int index, value)</li><li>list.listIterator()</li></ul><p><strong>ArrayList</strong>   List接口的子类，元素按插入顺序保存，允许重复对象。</p><h4 id="Set接口"><a href="#Set接口" class="headerlink" title="Set接口"></a>Set接口</h4><p>Set接口下的两个子类： <strong>HashSet</strong>和<strong>TreeSet</strong>。</p><ul><li><p>HashSet</p><p>元素无序无重复</p></li><li><p>TreeSet</p><p>元素自动排序。</p><p>依靠Comparable接口的compareTo方法实现排序。</p><p>重复元素的判断依靠的是Object的hashCode()和equals()方法。</p></li></ul><h4 id="集合的输出方式"><a href="#集合的输出方式" class="headerlink" title="集合的输出方式"></a>集合的输出方式</h4><ul><li><p>Iterator  迭代输出</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180109/7Ge21lmem4.png?imageslim" alt="mark">  </p></li><li><p>ListIterator</p><p>让List支持双向输出，可以从后向前输出。但是必须先进行一次由前向后，才能进行由后向前输出。 </p><p>hasPrevious()</p><p>previous()</p></li><li><p>foreach输出</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180110/fgJA1C61Ac.png?imageslim" alt="mark"> </p></li><li><p>Enumeration 枚举</p><p>只能依靠Vector子类，不能是List和Set</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180110/iE5fCBj1F3.png?imageslim" alt="mark"> </p></li></ul><h3 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h3><p>key-value，可以作为key的自定义对象必须实现hashCode和equals方法。</p><p>一般使用String作为key。</p><ul><li>put(key, value)</li><li>get(key) 获得对应的value，不存在则返回null</li><li>entrySet()</li><li>keySet()</li></ul><p>两个子类HashMap、HashTable</p><h4 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h4><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180110/bDl7iJC5hF.png?imageslim" alt="mark"> </p><h4 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h4><p>HashTable的key和value的数据都不允许设置为null。但是使用的同步处理，性能较低，线程安全。</p><h4 id="Iterator输出"><a href="#Iterator输出" class="headerlink" title="Iterator输出"></a>Iterator输出</h4><p>Map使用Map.Entry对象保存key-value。</p><p>使用Map.entrySet()获取Entry的集合，然后调用set.iterator()方法，实现输出。</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180110/8dBcG17h3K.png?imageslim" alt="mark"></p><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p><code>java.util.Stack</code></p><ul><li>push</li><li>pop</li><li>栈空异常和满异常</li></ul><h3 id="Collections工具类"><a href="#Collections工具类" class="headerlink" title="Collections工具类"></a>Collections工具类</h3><p>提供了操作map、list、set对象的一系列方法</p><ul><li>addAll()  一次添加多个元素</li><li>reverse  反转</li></ul><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180110/aHmEi5dFH3.png?imageslim" alt="mark"></p><h3 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h3><p>Lambda表达式、方法引用、函数式接口、MapReduce。</p><p>default接口方法，所有子类对象都默认实现该方法，不用在每个子类对象里单独实现。</p><ul><li>forEach(消费型接口)</li></ul><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180110/gb55G4m4L1.png?imageslim" alt="mark"> </p><ul><li><p>Collection.Stream()</p><p>Stream接口提供了大量操作集合对象的方法</p><ul><li><p>count</p></li><li><p>distinct</p></li><li><p>collect方法、collector接口和Collectors对象</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180110/1d2a9hd6He.png?imageslim" alt="mark"></p></li><li><p>filter过滤，断言式函数式接口  </p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180110/96CI1Lbb27.png?imageslim" alt="mark"> </p></li><li><p>map，接收function式接口，接收参数并返回结果</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180110/3kaL4HmgB7.png?imageslim" alt="mark"> </p><p>​</p></li></ul></li><li><p>Stream的结果分页</p><p>skip(n) 跳过</p><p>limit(n) 取出个数</p></li><li><p>多条件匹配</p><p>allMatch， anyMatch</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180110/0i972limk2.png?imageslim" alt="mark"></p></li><li><p>reduce</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180110/aaLDgA8gGC.png?imageslim" alt="mark"></p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180110/ACE0CJbh5B.png?imageslim" alt="mark">  </p></li><li><p>mapToDouble().summaryStatistics()</p></li></ul><h3 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h3><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180110/mEdkdDmk90.png?imageslim" alt="mark"> </p><h4 id="数据库连接"><a href="#数据库连接" class="headerlink" title="数据库连接"></a>数据库连接</h4><ol><li><p>加载驱动程序</p><p>下载对应数据库的JDBC驱动</p></li><li><p>连接数据库</p></li><li><p>进行数据操作</p></li><li><p>关闭数据库</p></li></ol><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180110/DCII6i7d9a.png?imageslim" alt="mark"> </p><h4 id="Statement接口操作数据库"><a href="#Statement接口操作数据库" class="headerlink" title="Statement接口操作数据库"></a>Statement接口操作数据库</h4><p>一个Connection可以打开多个Statement。</p><ul><li><p>插入</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180110/1KgBcdcmhi.png?imageslim" alt="mark"></p></li><li><p>修改</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180110/c4bLIFIlDk.png?imageslim" alt="mark"> </p></li><li><p>删除</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180110/kdC14hJmfm.png?imageslim" alt="mark"></p></li><li><p>查询</p><p>尽量按列的顺序取内容，同一字段只取一次</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180110/4kGDmf7gJB.png?imageslim" alt="mark"> </p><p>​</p></li></ul><h4 id="PreparedStatement"><a href="#PreparedStatement" class="headerlink" title="PreparedStatement"></a>PreparedStatement</h4><p>Statement存在Sql安全隐患</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180110/6jEhHkJgFg.png?imageslim" alt="mark"> </p><p>sql语句<code>Like %x%</code>  中的%应该和参数一起传入占位符 </p><h4 id="批处理与事务处理"><a href="#批处理与事务处理" class="headerlink" title="批处理与事务处理"></a>批处理与事务处理</h4><ul><li>批处理： 一次执行多条语句</li><li>​</li></ul><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180110/Kf8fLgCfh0.png?imageslim" alt="mark"> </p><h3 id="DAO设计模式"><a href="#DAO设计模式" class="headerlink" title="DAO设计模式"></a>DAO设计模式</h3><p>DAO（Data Access Object,数据访问对象），主要的功能是用于进行数据操作的，在程序的标准开发框架中属于数据层的操作。</p><h4 id="分层思想"><a href="#分层思想" class="headerlink" title="分层思想"></a>分层思想</h4><p>显示层 - 控制层 -  | -  业务层 - 数据层 -  |  - 数据层</p><p>前台  - | - 后台</p><h4 id="数据库操作类"><a href="#数据库操作类" class="headerlink" title="数据库操作类"></a>数据库操作类</h4><h4 id="数据对象类"><a href="#数据对象类" class="headerlink" title="数据对象类"></a>数据对象类</h4><ul><li>必须实现支持序列化标准的接口</li><li>类的名字与表的名字一致</li><li>类中的属性必须使用包装类，包装类的默认值为null。</li><li>属性的名字与表字段名字一致</li><li>属性使用private包装，并提供set、get方法</li><li>必须保留一个无参构造方法</li></ul><h4 id="数据层接口"><a href="#数据层接口" class="headerlink" title="数据层接口"></a>数据层接口</h4><ul><li><p>所有的对象定义在dao包下面</p></li><li><p>对于表student，其在数据层的 接口定义为IStudentDAO</p></li><li><p>数据更新方法，以doXxx定义</p></li><li><p>数据查询，查询表中数据findXxxx表示，统计以getXxx定义</p><p>findByUserID， getAllCount</p></li></ul><h4 id="数据层实现类"><a href="#数据层实现类" class="headerlink" title="数据层实现类"></a>数据层实现类</h4><p>数据库的打开与关闭由业务层负责，因为一个业务层可能会调用多个数据层获取数据。</p><h4 id="数据层工厂类"><a href="#数据层工厂类" class="headerlink" title="数据层工厂类"></a>数据层工厂类</h4><p>使用工厂类获取数据层接口对象实例。</p><h4 id="业务层接口标准"><a href="#业务层接口标准" class="headerlink" title="业务层接口标准"></a>业务层接口标准</h4><h4 id="业务层子类"><a href="#业务层子类" class="headerlink" title="业务层子类"></a>业务层子类</h4><h4 id="业务层工厂类"><a href="#业务层工厂类" class="headerlink" title="业务层工厂类"></a>业务层工厂类</h4><p>控制层通过工厂类获取业务层对象实例。</p><ul><li>前台逻辑ServiceFrontFactory</li><li>后台逻辑ServiceBackFactory</li></ul><h3 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h3><h4 id="调用测试"><a href="#调用测试" class="headerlink" title="调用测试"></a>调用测试</h4><p>产生对象，并调用方法</p><h4 id="junit测试"><a href="#junit测试" class="headerlink" title="junit测试"></a>junit测试</h4>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Java编程高级&quot;&gt;&lt;a href=&quot;#Java编程高级&quot; class=&quot;headerlink&quot; title=&quot;Java编程高级&quot;&gt;&lt;/a&gt;Java编程高级&lt;/h2&gt;&lt;h3 id=&quot;多线程&quot;&gt;&lt;a href=&quot;#多线程&quot; class=&quot;headerlink&quot; title=&quot;多线程&quot;&gt;&lt;/a&gt;多线程&lt;/h3&gt;&lt;p&gt;JVM至少启动2个线程，main和gc&lt;/p&gt;
&lt;p&gt;三种实现方式&lt;/p&gt;
&lt;h4 id=&quot;继承Thread类&quot;&gt;&lt;a href=&quot;#继承Thread类&quot; class=&quot;headerlink&quot; title=&quot;继承Thread类&quot;&gt;&lt;/a&gt;继承Thread类&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;必须覆写Thread类中的run方法，是线程运行的主体。&lt;/li&gt;
&lt;li&gt;start方法启动线程，运行的是run内的代码&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;实现Runnable接口&quot;&gt;&lt;a href=&quot;#实现Runnable接口&quot; class=&quot;headerlink&quot; title=&quot;实现Runnable接口&quot;&gt;&lt;/a&gt;实现Runnable接口&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;解决单继承的限制&lt;/li&gt;
&lt;li&gt;覆写run方法&lt;/li&gt;
&lt;li&gt;Runnable对象没有start方法，Thread类可以接收Runnable接口对象，构造Thread实例，然后并调用start启动。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;Callable接口&quot;&gt;&lt;a href=&quot;#Callable接口&quot; class=&quot;headerlink&quot; title=&quot;Callable接口&quot;&gt;&lt;/a&gt;Callable接口&lt;/h4&gt;&lt;p&gt;Runnable接口的run方法不能返回操作接口，&lt;code&gt;java.util.concurrent.Callable&lt;/code&gt;提供。&lt;/p&gt;
&lt;p&gt;Callable由FutureTask对象接收。FutureTask对象可以取得返回结果，由Thread类启动FutureTask。&lt;/p&gt;
&lt;h4 id=&quot;实现区别&quot;&gt;&lt;a href=&quot;#实现区别&quot; class=&quot;headerlink&quot; title=&quot;实现区别&quot;&gt;&lt;/a&gt;实现区别&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;接口可以解决单继承问题&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Thread内部实现了Runnable接口，是其子类&lt;/p&gt;
&lt;p&gt;Thread实现系统资源分配和执行目标功能，Runnable负责执行目标功能。&lt;/p&gt;
&lt;p&gt;Thread很像代理设计模式，但是start方法不是接口提供的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Runnable能更好的描述线程间的数据共享 &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="技术" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Java" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/Java/"/>
    
    
      <category term="Java" scheme="http://shuaiyy.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Python时间格式转换</title>
    <link href="http://shuaiyy.cn/2018/01/07/%E6%8A%80%E6%9C%AF/python%E6%97%B6%E9%97%B4%E8%BD%AC%E6%8D%A2/"/>
    <id>http://shuaiyy.cn/2018/01/07/技术/python时间转换/</id>
    <published>2018-01-06T16:00:00.000Z</published>
    <updated>2018-06-03T09:50:19.895Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python时间转换"><a href="#python时间转换" class="headerlink" title="python时间转换"></a>python时间转换</h2><h3 id="字符串和时间格式化"><a href="#字符串和时间格式化" class="headerlink" title="字符串和时间格式化"></a>字符串和时间格式化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="comment"># 时间字符串</span></div><div class="line">time_str = <span class="string">'2018-01-15 15:27:54'</span></div><div class="line"><span class="comment"># 字符串的time format</span></div><div class="line">time_fmt = <span class="string">'%Y-%m-%d %H:%M:%S'</span></div><div class="line"><span class="comment"># str parse time, 转换成时间数组,</span></div><div class="line">time_array = time.strptime(time_str, time_fmt)</div><div class="line"><span class="keyword">print</span> time_array</div><div class="line"><span class="comment"># str from time, 时间数组转字符串</span></div><div class="line">time_str = time.strftime(time_fmt, time_array)</div><div class="line"><span class="keyword">print</span> time_str</div><div class="line"><span class="comment"># 默认时间为当前时间</span></div><div class="line">time_str = time.strftime(time_fmt)</div><div class="line"><span class="keyword">print</span> time_str</div></pre></td></tr></table></figure><a id="more"></a><h3 id="时间数组和时间戳"><a href="#时间数组和时间戳" class="headerlink" title="时间数组和时间戳"></a>时间数组和时间戳</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 当前时间的时间戳，秒，3位小数</span></div><div class="line">timestamp = time.time()</div><div class="line"><span class="keyword">print</span> timestamp</div><div class="line"><span class="comment"># 时间数组转换为时间戳</span></div><div class="line">timestamp = time.mktime(time_array)</div><div class="line"><span class="keyword">print</span> timestamp</div><div class="line"><span class="comment"># 时间戳转换为当地时间，然后在格式化成字符串</span></div><div class="line">localtime = time.localtime(timestamp)</div><div class="line"><span class="keyword">print</span> localtime  <span class="comment"># 时间数组</span></div><div class="line">time_str = time.strftime(time_fmt, localtime)</div><div class="line"><span class="keyword">print</span> time_str</div></pre></td></tr></table></figure><h3 id="当前时间格式化字符串"><a href="#当前时间格式化字符串" class="headerlink" title="当前时间格式化字符串"></a>当前时间格式化字符串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 转换成localtime</span></div><div class="line">time_local = time.localtime(time.time())</div><div class="line"><span class="comment"># 转换成新的时间格式(2018-01-15 15:27:54)</span></div><div class="line">dt = time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>, time_local)</div><div class="line"><span class="keyword">print</span> dt</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;python时间转换&quot;&gt;&lt;a href=&quot;#python时间转换&quot; class=&quot;headerlink&quot; title=&quot;python时间转换&quot;&gt;&lt;/a&gt;python时间转换&lt;/h2&gt;&lt;h3 id=&quot;字符串和时间格式化&quot;&gt;&lt;a href=&quot;#字符串和时间格式化&quot; class=&quot;headerlink&quot; title=&quot;字符串和时间格式化&quot;&gt;&lt;/a&gt;字符串和时间格式化&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; time&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 时间字符串&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;time_str = &lt;span class=&quot;string&quot;&gt;&#39;2018-01-15 15:27:54&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 字符串的time format&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;time_fmt = &lt;span class=&quot;string&quot;&gt;&#39;%Y-%m-%d %H:%M:%S&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# str parse time, 转换成时间数组,&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;time_array = time.strptime(time_str, time_fmt)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; time_array&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# str from time, 时间数组转字符串&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;time_str = time.strftime(time_fmt, time_array)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; time_str&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 默认时间为当前时间&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;time_str = time.strftime(time_fmt)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; time_str&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Python" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/Python/"/>
    
    
      <category term="Python" scheme="http://shuaiyy.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Java 入门学习笔记</title>
    <link href="http://shuaiyy.cn/2018/01/04/%E6%8A%80%E6%9C%AF/Java%20%E5%85%A5%E9%97%A8/"/>
    <id>http://shuaiyy.cn/2018/01/04/技术/Java 入门/</id>
    <published>2018-01-03T16:00:00.000Z</published>
    <updated>2018-06-03T07:41:31.016Z</updated>
    
    <content type="html"><![CDATA[<h3 id="java-入门"><a href="#java-入门" class="headerlink" title="java 入门"></a>java 入门</h3><h4 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h4><p>public class一个java文件只能有一个定义， 类名称必须与其所在的文件名一致。</p><p>编译后，一个class生成一个对应的<code>*.class</code>文件。</p><p>执行从主方法开始，主方法所在的类成为主类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Main.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"><span class="comment">// write your code here</span></div><div class="line">        <span class="keyword">int</span> a = <span class="number">0</span>;</div><div class="line">        a++;</div><div class="line">        System.out.println(<span class="string">"Hello World!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;&#125;</div></pre></td></tr></table></figure><a id="more"></a><h4 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h4><ul><li><p>CLASSPATH环境变量，JVM执行class时，从加载路径进行类的加载。</p></li><li><p>java的文档注释  <code>/** ... */</code></p></li><li><p>标识符：类名，属性名，变量名， <code>$</code>不要使用，可以字母下划线数字等组成。</p></li><li><p>关键字：java语法保留字，以及true，false，null</p><p>jdk1.7之后，标识符可以用中文，如<code>int 年龄 = 20;</code>,但是不要用。</p></li></ul><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>基本数据类型由jvm分配内存，引用数据类型需要开发者为其分配内存。</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171229/GLC19iehgE.png?imageslim" alt="mark"></p><p>“”是空字符串，长度为0，”\u0000”是一个字符，表示空字符，长度为1。</p><p>数值范围：</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171229/lHf1hdc510.png?imageslim" alt="mark"> </p><p>符号位，0为正，1为负。超长数据范围会导致内存溢出。类型转换,自动转换和强制转换。</p><p><code>1L</code>, <code>(long) 1</code></p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171229/H5m9bHClal.png?imageslim" alt="mark"></p><p><strong>String类型</strong>  </p><p>format<a href="http://blog.csdn.net/lonely_fireworks/article/details/7962171/" target="_blank" rel="external">格式化输出</a></p><h4 id="基本运算"><a href="#基本运算" class="headerlink" title="基本运算"></a>基本运算</h4><ul><li><p>自增自减</p><p>符号放到前面和后面结果不同 </p></li><li><p>三目运算</p><p><code>int num = numA &gt; numB ? numA:numB</code></p><p>有一个布尔运算</p></li><li><p>逻辑运算，与、或、非</p><p><code>A &amp;&amp; B</code>, 短路的与， <code>A &amp; B</code>,非短路的与，每个条件判断都执行</p><p>使用短路的逻辑运算，性能、效率高</p></li><li><p>位运算</p><p>移位操作，左移1为乘2，不改变原变量的值。</p><p>位的与<code>&amp;</code>、<code>||</code>或运算，没有<code>&amp;&amp;</code>和<code>||</code></p></li></ul><h4 id="程序结构"><a href="#程序结构" class="headerlink" title="程序结构"></a>程序结构</h4><ul><li>分支结构</li></ul><p><code>if</code>  和<code>switch</code></p><p>switch不支持布尔运算，只能判断内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">switch</span> (<span class="keyword">int</span> | <span class="keyword">char</span> | 枚举 | String )&#123;</div><div class="line">            <span class="keyword">case</span> 值<span class="number">1</span>:</div><div class="line">                执行;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> 值<span class="number">2</span>:</div><div class="line">    执行;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">    条件都不满足时，执行;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div></pre></td></tr></table></figure><ul><li><p>循环结构</p><p>while循环和do while循环。实际项目避免do while,不利于代码阅读。</p><p>for循环</p><p>循环控制 continue、break</p></li></ul><h3 id="Java面向对象"><a href="#Java面向对象" class="headerlink" title="Java面向对象"></a>Java面向对象</h3><h4 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h4><ul><li>类是对象的模板，对象是类的可操作实例。</li><li>引用对象创建时必须先申请内存空间。</li><li>声明对象时，栈内存空间会生成一个该对象的引用(指向其真实堆内存空间所在的地址，类似c指针)。</li><li>new实例化对象时，会在堆内存中分配一块空间用于保存数据，并将栈内存里的对象引用指向堆内存中的实际地址，没有实例化时引用指向<code>null</code>。</li><li>堆内存空间中没有被任何对象引用的已分配空间，将被java的GC进行垃圾回收</li></ul><h4 id="类方法重载"><a href="#类方法重载" class="headerlink" title="类方法重载"></a>类方法重载</h4><p>根据方法参数的类型或个数不同，调用不同的方法。不是根据方法的返回值类型。</p><h4 id="类封装"><a href="#类封装" class="headerlink" title="类封装"></a>类封装</h4><p>类对自己的属性负责，因此将属性声明<code>private</code>，需要外部访问时定义setter，getter方法setter或getter方法的命名要求严格,以set/get开头，后面接上属性名，首字母大写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</div><div class="line">  <span class="keyword">private</span> String title;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String t)</span></span>&#123;</div><div class="line">    title = t;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">(String t)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> title;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="构造方法和匿名对象"><a href="#构造方法和匿名对象" class="headerlink" title="构造方法和匿名对象"></a>构造方法和匿名对象</h4><p>构造方法在实例化新对象时自动调用一次，进行初始化工作。构造方法也是可以重载的。</p><p>没有栈指向的堆空间中的对象即为匿名对象，只能使用一次，然后就等待被GC回收。</p><h4 id="Java简单类"><a href="#Java简单类" class="headerlink" title="Java简单类"></a>Java简单类</h4><ul><li>必须保留一个无参数构造方法</li></ul><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180102/2bL6dIedCf.png?imageslim" alt="mark"> </p><h4 id="访问控制权限"><a href="#访问控制权限" class="headerlink" title="访问控制权限"></a>访问控制权限</h4><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180106/Hl3h22ehge.png?imageslim" alt="mark"></p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h4 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h4><ul><li>下标从0开始</li><li><code>data.length</code>获取数组的长度，长度不变</li><li>超过长度的访问会造成数组越界访问</li><li>数组引用传递，即同一块堆空间数据可以被不同的栈地址指向。</li><li>动态初始化和静态初始化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">int nums [] = new int [3]； # 声明并开辟一个长度为3的数组，值为类型的默认值</div><div class="line"><span class="keyword">int</span> nums [] = <span class="keyword">null</span>; nums = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">3</span>];</div><div class="line"></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="keyword">int</span> nums [] = <span class="keyword">new</span> <span class="keyword">int</span> [] &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</div></pre></td></tr></table></figure><h4 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> nums [][] = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">3</span>][<span class="number">3</span>]</div><div class="line"></div><div class="line"><span class="keyword">int</span> nums [] [] <span class="keyword">new</span> <span class="keyword">int</span> [][]&#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;,&#125;</div></pre></td></tr></table></figure><h4 id="数组用作方法参数"><a href="#数组用作方法参数" class="headerlink" title="数组用作方法参数"></a>数组用作方法参数</h4><p>引用传递，方法对数组的修改会影响到原始数据；</p><h4 id="数组对象的方法"><a href="#数组对象的方法" class="headerlink" title="数组对象的方法"></a>数组对象的方法</h4><ul><li>数组copy  <code>System.arraycopy(dataA, 4, dataB, 6, 3)</code>  从A的第4个开始，向B的第6位置起始复制3个元素，会覆盖B上的元素</li><li>数组排序 <code>java.util.Arrays.sort(data)</code></li></ul><h4 id="对象数组"><a href="#对象数组" class="headerlink" title="对象数组"></a>对象数组</h4><p>数组里的元素是引用对象</p><p> <img src="http://o8i01ajlj.bkt.clouddn.com/blog/180102/4dbC3GbgF3.png?imageslim" alt="mark"> </p><h3 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h3><p>字符串常量是String类的匿名对象，String一旦定义对象就不可改变（如果变了，则是生成了新的String对象，引用关系发生变化）。</p><h4 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h4><p><code>==</code>比较的是对象的内存地址，即是不是同一个对象，而不是比较的其内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">String s1 = <span class="string">"hello"</span>;</div><div class="line">String s2 = <span class="keyword">new</span> String(<span class="string">"hello"</span>);</div><div class="line">String s3 = s2;  <span class="comment">//引用传递</span></div><div class="line"><span class="comment">// s1==s2  false</span></div><div class="line"><span class="comment">// s1==s3  false</span></div><div class="line"><span class="comment">// s2==s3  true</span></div><div class="line">s1.equals(s2);  <span class="comment">// 内容比较</span></div><div class="line">s1.equalsIgnoreCase(s2);  <span class="comment">// 内容比较，不区分大小写</span></div><div class="line">String s4 = <span class="string">"hello"</span>;</div><div class="line">String s5 = <span class="string">"hello"</span>;</div><div class="line">s4==s5 <span class="comment">//true  匿名对象，JVM的共享设计模式，维护一个对象池。</span></div></pre></td></tr></table></figure><p>在python中 <code>==</code>比较的是值是否相等， <code>is</code>是判断对象是否为同一内存地址，是否表示同一对象。</p><h4 id="String实例化"><a href="#String实例化" class="headerlink" title="String实例化"></a>String实例化</h4><p><code>String a = new String(&#39;hello&#39;)</code>,这种方法会开辟2块堆内存，一块变成垃圾，String对象不会自动入池。</p><h4 id="字符串与字符、字节"><a href="#字符串与字符、字节" class="headerlink" title="字符串与字符、字节"></a>字符串与字符、字节</h4><ul><li><p>字符数组与字符串对象之间的转化</p></li><li><p>字节数组与字符串对象之间的转化</p><p>IO操作，转码时，常用byte</p></li></ul><h4 id="字符串查找"><a href="#字符串查找" class="headerlink" title="字符串查找"></a>字符串查找</h4><ul><li>子串查找 <code>str.contains(subStr)</code></li><li>以指定字符串开头， <code>startsWith</code></li><li>以指定字符串结束<code>endsWith</code></li></ul><h4 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h4><ul><li>repalceAll</li><li>replaceFirst</li></ul><h4 id="字符串截取"><a href="#字符串截取" class="headerlink" title="字符串截取"></a>字符串截取</h4><ul><li>subString</li></ul><h4 id="字符串拆分"><a href="#字符串拆分" class="headerlink" title="字符串拆分"></a>字符串拆分</h4><p>将字符串拆分成多个字符串的数组</p><p>注意re正则表达式</p><ul><li>split() ,但参数为””时，按每个字符拆分</li></ul><h4 id="字符串连接"><a href="#字符串连接" class="headerlink" title="字符串连接"></a>字符串连接</h4><ul><li><code>+</code></li><li>concat 与 +一样</li><li>join</li><li>toUpperCase</li><li>toLowerCase</li><li>trim  去掉开头和结尾的空格</li><li>str.length()  返回字符串长度</li><li>isEmpty    判断是否为空串（空串的长度为0， str.equals(“”)）</li></ul><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p>表示当前对象，可以在对象/类内调用属性或方法</p><p>this互相调用类构造方法，简化对象的创建过程代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//构造方法互相调用</span></div><div class="line"><span class="keyword">this</span>() <span class="comment">//必须在构造函数内，且为首行</span></div><div class="line">       <span class="comment">//互相调用必须由出口，避免递归调用</span></div><div class="line">  </div><div class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hello</span><span class="params">()</span></span>&#123;</div><div class="line">      System.out.print(<span class="string">'Create Hello'</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hello</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</div><div class="line">      <span class="keyword">this</span>();</div><div class="line">      <span class="keyword">this</span>.num = num;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hello</span><span class="params">(<span class="keyword">int</span> num, String name)</span></span>&#123;</div><div class="line">      <span class="keyword">this</span>();</div><div class="line">      <span class="keyword">this</span>.num = num;</div><div class="line">      <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure><h3 id="引用传递"><a href="#引用传递" class="headerlink" title="引用传递"></a>引用传递</h3><p>同一块堆内存可以被不同的栈内存指向，指向同一堆内存的不同栈内存可以修改堆内存内容。</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180103/2a9ADi9efa.png?imageslim" alt="mark"> </p><p>输出结果为Hello，原因是String对象的内容一旦声明则不可改变，如果改变，则会创建新的String对象。</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180103/8fIGm3GieA.png?imageslim" alt="mark"> </p><p>String内容不可改变，一个字符串值，在堆内存中开辟一块空间，其数据不可改变。</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180103/mJiBkIKB23.png?imageslim" alt="mark"> </p><h3 id="对象比较"><a href="#对象比较" class="headerlink" title="对象比较"></a>对象比较</h3><p>一个类的方法可以接收本类的对象实例作为参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">private</span> String <span class="number">20</span>;</div><div class="line">    <span class="comment">//对象比较</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span>  <span class="title">compare</span><span class="params">(Test test)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(test==<span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>==test)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.id==test.id &amp;&amp; <span class="keyword">this</span>.name==test.name)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;           </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Static关键字"><a href="#Static关键字" class="headerlink" title="Static关键字"></a>Static关键字</h3><p>用于声明类、方法、属性。</p><ul><li><p>声明属性为static后，属性为共享属性，任何一个对象修改该属性，其他对象的属性也会变化。static数据存储于程序的全局共享内存。</p><p>static属性属于类，非static属性必须由实例化对象访问。</p></li><li><p>static静态方法，可以直接由类调用</p></li><li><p>非static的方法可以访问static属性、方法</p></li><li><p>static方法无法访问非static属性、方法</p></li><li><p>主方法 <code>public static void main(String args[])</code></p><p>命令行参数以空格分开，有空格的参数用双引号包围</p></li></ul><h3 id="构造块和静态块"><a href="#构造块和静态块" class="headerlink" title="构造块和静态块"></a>构造块和静态块</h3><p>在构造方法里的代码块，优先于构造方法执行，创建n个对象就执行n次。静态块执行优先于构造块，且只会被执行1次。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</div><div class="line">    <span class="comment">//对象比较</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.print(<span class="string">'这是构造函数部分'</span>);</div><div class="line">      &#123;</div><div class="line">        System.out.print(<span class="string">'这是构造块'</span>);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">static</span> &#123;</div><div class="line">        System.out.print(<span class="string">'这是静态块'</span>);</div><div class="line">      &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在主类中定义的静态块将优先于主方法运行。</p><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><p>在一个类的内部定义新的类，也可以在代码块、方法里定义。</p><p>内部类可以访问外部类的私有属性，外部类也可以访问内部类的私有属性。</p><p>内部类在外部类的外部实例化：</p><p> <img src="http://o8i01ajlj.bkt.clouddn.com/blog/180103/cJ8EFIE24L.png?imageslim" alt="mark"> </p><p>如果内部类声明了private，则内部类无法在外部类以外实例化。</p><p>如果内部类声明了static，则内部类与外部类相对独立。</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180103/310FHAjlb4.png?imageslim" alt="mark"> </p><p>经常会有这样的类实例化方法<code>类.类.类.类(args)</code></p><p>方法中的内部类，在jdk1.8可以访问方法的参数、属性。在1.7及之前，参数或变量类型前要加<code>final</code>修饰。 为了兼容性，还是加上<code>final</code></p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180103/HDagHfKD07.png?imageslim" alt="mark"> </p><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p>由节点连接起来的链表</p><h4 id="Node定义"><a href="#Node定义" class="headerlink" title="Node定义"></a>Node定义</h4><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180103/ii04jad0K8.png?imageslim" alt="mark"> </p><h4 id="节点关系处理"><a href="#节点关系处理" class="headerlink" title="节点关系处理"></a>节点关系处理</h4><ul><li><p>Node对象应该只能由Link对象操作。因此node应该作为link的私有内部类。</p></li><li><p>链表的方法</p><p>add增加新节点，size取得链表中保存元素的个数（使用count属性），isEmpty判断是否为空链表（root节点为空或长度为0），contains数据查询（循环链表的全部节点并进行数据比对，自定义对象的对比方法实现compare）， get通过index返回node，set 替换index处节点的数据，remove删除指定数据，删除指定index，insert指定数据，toArray,链表转换为数组。</p></li><li><p>处理根节点</p></li><li><p>添加新节点</p></li><li><p>遍历链表</p></li></ul><h4 id="链表使用"><a href="#链表使用" class="headerlink" title="链表使用"></a>链表使用</h4><p>自定义类链表</p><h3 id="继承和多态"><a href="#继承和多态" class="headerlink" title="继承和多态"></a>继承和多态</h3><p>解决代码复用问题</p><p>继承的限制</p><ul><li>不允许多重继承，但是可以多层继承，一般不要超过3层。</li><li>私有操作属于隐式继承，公开操作显示继承</li><li>子类构造时，默认先调用父类的无参构造，有参数的父类构造，必须在首行使用super显示调用</li></ul><h4 id="方法覆写"><a href="#方法覆写" class="headerlink" title="方法覆写"></a>方法覆写</h4><ul><li><p>子类覆写父类的方法，子类方法权限不能高于父类，public &gt; default &gt; private</p><p>如果父类使用private修饰方法，则其对子类不可见，子类同名同参方法无法将其覆盖。</p></li><li><p>super.func调用父类的方法</p></li><li><p>重载和覆写的区别</p><p>发生的地方，方法名、参数，权限，返回值。</p></li></ul><h4 id="属性覆盖"><a href="#属性覆盖" class="headerlink" title="属性覆盖"></a>属性覆盖</h4><p>父类的private属性被封装，对子类不可见。覆盖属性是没有意义的，相当于定义新的属性。</p><h4 id="多态性"><a href="#多态性" class="headerlink" title="多态性"></a>多态性</h4><ul><li>方法的多态性：依赖于方法的覆写和重载</li><li>对象的多态性：发生在继承关系之中，子类与父类的转换。</li><li>instanceof   判断 a是否为对象A的实例</li></ul><h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><ul><li>final类不能有子类</li><li>final方法不能被子类覆写</li><li>final修饰的变量将变为常量，即定义时设置好值，且不能被修改。</li><li>public static final 变量，全局常量。</li></ul><p>常量命名全用大写字母。</p><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>含有抽象方法，类和抽象方法使用abstract关键字声明</p><ul><li><p>由子类继承</p></li><li><p>子类如果不是抽象类，则必须覆写父类全部抽象方法</p></li><li><p>实例化必须依靠子类完成</p></li><li><p>外部的抽象类不允许使用static声明，内部的抽象类可以使用static声明。</p><p>使用static声明的内部抽象类使用时相当于外部抽象类，声明时<code>A.B a_b = new X()</code></p><p><code>class X extends A.B{ xxx }</code></p></li><li><p>下面的程序输出为0 </p><p>构造函数对属性赋值之前，属性值为默认值。</p><p>父类的构造先于子类进行，调用print方法时，num还未被初始化，其值默认为0。</p><p> <img src="http://o8i01ajlj.bkt.clouddn.com/blog/180105/F6636EKhGf.png?imageslim" alt="mark"> </p></li><li><p>抽象类主要用于模板设计</p></li></ul><h3 id="Java接口"><a href="#Java接口" class="headerlink" title="Java接口"></a>Java接口</h3><p>接口是一种特殊的抽象类，只有抽象方法和全局常量(final)，没有构造方法。</p><ul><li><code>interface X { xxx}</code></li><li>一个子类可以使用implents关键字实现多个接口</li><li>接口的子类如果不是抽象类，必须覆盖全部方法</li><li>可以利用子类的向上转型实现接口的实例化</li><li>子类要先继承父类在实现接口 <code>extends A implents B, C</code></li><li>接口可以用extends继承多个接口</li><li>在接口里定义内部普通类、抽象类、接口都是可以的。使用<code>static</code>修饰的内部接口，相当于外部接口。即<code>A.B</code></li></ul><h4 id="工厂设计模式-Factory"><a href="#工厂设计模式-Factory" class="headerlink" title="工厂设计模式 Factory"></a>工厂设计模式 Factory</h4><p>好的程序设计标准：</p><ul><li>用户不需要关注代码细节</li><li>用户不需要关注代码的变更</li></ul><p>new导致耦合度高，工厂类屏蔽了子类的细节。</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180105/16L6mlk8me.png?imageslim" alt="mark"> </p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180105/e92DE9178e.png?imageslim" alt="mark"> </p><h4 id="代理设计模式-Proxy"><a href="#代理设计模式-Proxy" class="headerlink" title="代理设计模式 Proxy"></a>代理设计模式 Proxy</h4><p>一个主题操作接口类（可能有多种方法），核心业务主题主完成核心操作，代理主题负责其他辅助操作。</p><ul><li><p>客户端代码只用关注接口</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180105/geBLCcg553.png?imageslim" alt="mark"> </p></li></ul><h4 id="接口定义增强"><a href="#接口定义增强" class="headerlink" title="接口定义增强"></a>接口定义增强</h4><p>jdk1.8允许在接口里定义抽象方法外的普通方法，但是必须使用default或static修饰。。</p><ul><li><p>default</p><p>1.8之前，假如在项目中一个接口有N个子类，项目升级时接口需要增加新的方法，则N个子类必须都重写该抽象方法，很费力。</p></li><li><p>static</p><p>该方法只能由接口直接调用</p></li></ul><h4 id="抽象类和接口的区别"><a href="#抽象类和接口的区别" class="headerlink" title="抽象类和接口的区别"></a>抽象类和接口的区别</h4><ul><li>当抽象类和接口都可以使用时，优先使用接口</li><li>使用工厂类实例化接口子类，不要直接new</li></ul><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180105/gI07ABaDEk.png?imageslim" alt="mark"> </p><h3 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h3><p>Object类是所有类的父类。</p><ul><li>利用Object可以接收任何对象，本身有一个无参构造方法。统一参数。</li><li>Object提供了很多内置方法</li><li>子类一般覆写3个方法<ul><li><code>toString</code>    print函数会调用对象的该方法</li><li><code>equals</code></li><li><code>hashCode</code> </li></ul></li></ul><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><p>必须基于接口或抽象类的应用，如果子类只需要使用一次，可以使用匿名内部类，以减少类文件的创建。</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180105/cci867ki1L.png?imageslim" alt="mark"></p><h3 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h3><p>对基本数据类型包装</p><ul><li>对象型包装类： Boolean，Character</li><li>数值型包装类 ： Integer，Long，Float等 </li></ul><h4 id="装箱与拆箱"><a href="#装箱与拆箱" class="headerlink" title="装箱与拆箱"></a>装箱与拆箱</h4><p>基本数据类型与包装类互相转换。jdk1.5之后java自动实现拆箱装箱和数值计算</p><h4 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h4><p>字符串与包装类互相转换</p><p>将String类转换成对应的包装类，比如 Sting ‘1’ 和Integer 1。</p><p><code>+</code>任何对象与字符串相加的结果都是字符串</p><p><code>String.valueOf(数据)</code></p><h3 id="Package-包"><a href="#Package-包" class="headerlink" title="Package 包"></a>Package 包</h3><p>同一目录下不能存在相同名字的文件</p><p><code>package cn.java.study</code></p><p><code>javac -d . xxx.java</code>  打包编译，会在当前路径下自动生成目录</p><p><code>java  cn.java.study.Hello</code>  运行</p><h4 id="导入包"><a href="#导入包" class="headerlink" title="导入包"></a>导入包</h4><p><code>import xxx.xxx.ClassA</code>   可以被导入的包必须是public。 </p><p>一个<code>*.java</code>里只能有一个public类，且必须与文件名保持一致。</p><p><code>import 包.*</code>  编译时只会导入代码需要的包，不用担心性能。</p><p>如果导入的多个包里有同名类，则实例化类时，为避免冲突使用<code>包.类</code>完整包名。</p><h4 id="系统常见包"><a href="#系统常见包" class="headerlink" title="系统常见包"></a>系统常见包</h4><ul><li>java.lang</li><li>java.lang.reflect    反射</li><li>java.util    工具包</li><li>java.util.regex  正则化</li><li>java.text   国际化处理</li><li>java.io       输入输出、文件流</li><li>java.net    网络</li><li>java.sql    数据库</li></ul><h4 id="第三方包"><a href="#第三方包" class="headerlink" title="第三方包"></a>第三方包</h4><h4 id="jar打包程序"><a href="#jar打包程序" class="headerlink" title="jar打包程序"></a>jar打包程序</h4><h3 id="构造方法私有化"><a href="#构造方法私有化" class="headerlink" title="构造方法私有化"></a>构造方法私有化</h3><p>private修饰的构造方法，只能在类的内部调用，无法用new创建对象。</p><p>为了控制类实例化对象的个数，必须锁定构造方法。</p><h4 id="单例设计"><a href="#单例设计" class="headerlink" title="单例设计"></a>单例设计</h4><p>可以用static final在类内部定义一个唯一的对象。</p><ul><li><p>饿汉式：定义时就实例化</p></li><li><p>懒汉式：使用时在实例化一次</p><p><code>this.instance = new Singleton()</code></p></li></ul><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180106/2H4Iaac6j5.png?imageslim" alt="mark"> </p><h4 id="多例设计"><a href="#多例设计" class="headerlink" title="多例设计"></a>多例设计</h4><p>可以实例化固定个数实例对象的类</p><p> <code>类内部定义多个static final的实例</code><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180106/Kl6Fe2eIAJ.png?imageslim" alt="mark"> </p><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><h4 id="捕获处理"><a href="#捕获处理" class="headerlink" title="捕获处理"></a>捕获处理</h4><ul><li><p>所有异常都是Throwable的子类</p><p>Throwable的直接子类Error和Exception。Error是JVM错误，程序还没执行。Exception是程序运行中的，用户可以处理的。</p></li><li><p><code>e.printStackTrace()</code>  打印异常详细信息</p></li><li><p>程序运行出现自动生成Exception对象，然后交由try语句依次匹配catch。</p><p>如果没被catch捕获到，则finally会交给jvm处理，即异常退出。如果匹配到了则继续执行finally后续操作。</p></li><li><p>catch异常必须先捕获小的exception，然后在捕获大的。</p></li></ul><h4 id="throws和throw"><a href="#throws和throw" class="headerlink" title="throws和throw"></a>throws和throw</h4><p>用throws声明的方法，表示调用该方法时必须用try进行异常处理。强制异常处理</p><p>在程序执行代码中用throw抛出异常。</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180106/F1eFf4Fdd3.png?imageslim" alt="mark"></p><h4 id="RuntimeException类"><a href="#RuntimeException类" class="headerlink" title="RuntimeException类"></a>RuntimeException类</h4><p>throws该异常类时，用户可以选择性处理，如果不处理则交由JVM处理。</p><p><code>NullPointerException</code></p><h4 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h4><p>判断是否得到预期的结果，程序默认运行时不启用断言代码。</p><p><code>assert</code></p><h4 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h4><p>继承自Exception或RuntimeException。</p><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p><code>int add(int ... data)</code>   …相当于把出入的多个参数作为一个数组传入</p><h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x: data)&#123;</div><div class="line">  <span class="comment">//从data中取出每个元素</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><p>可以接收不同类型的变量，避免利用object向下转型的不安全操作，类中属性的类型是动态设置的。</p><ul><li>Type类型不能是基本类型。不设置时，Type则变为Object</li><li>简化声明泛型，实例化中的Type类型可以省略。</li></ul><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180106/cbfF20c5D0.png?imageslim" alt="mark">  </p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180106/AlH84599Fj.png?imageslim" alt="mark">  </p><h4 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h4><ul><li><p><code>void func(Point temp)</code>   不指定Point的泛型类型，则为Object类对象，此时传入的对象在函数内可以被改变。</p></li><li><p><code>?</code>可以保证泛型对象不被改变，<code>void func(Point&lt;?&gt; temp)</code></p></li><li><p><code>?extends Number</code></p><p>  泛型可以设置为Number及其子类，用在类声明或方法的参数类型声明。</p></li><li><p><code>?super String</code></p><p> 泛型可以设置为String及其父类，仅用在方法传入参数的类型声明上。</p></li></ul><h4 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IMessage</span>&lt;<span class="title">T</span>&gt; </span>&#123; </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(T t)</span></span>;</div><div class="line">&#125; </div><div class="line"><span class="comment">//接口子类也用 T， 实例化时指定类型</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">IMessage</span>&lt;<span class="title">T</span>&gt;</span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(T t)</span></span>&#123;</div><div class="line">    <span class="comment">// xxx</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</div><div class="line">  <span class="function">psvm <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    IMessage&lt;String&gt; msg = <span class="keyword">new</span> Message&lt;string&gt;(); <span class="comment">//指定String类型</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 接口子类使用具体类型</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span> <span class="keyword">implements</span> <span class="title">IMessage</span>&lt;<span class="title">String</span>&gt;</span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(String t)</span></span>&#123;</div><div class="line">    <span class="comment">// xxx</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</div><div class="line">  <span class="function">psvm <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    IMessage&lt;String&gt; msg = <span class="keyword">new</span> Message();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h4><p>泛型的方法可以在非泛型类里定义</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180106/HIGKcA0gDF.png?imageslim" alt="mark"> </p><h3 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h3><p><code>enum</code>, <code>Enum</code>是抽象类， enum可以实现多例设计和接口</p><ul><li>多例设计</li></ul><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180106/GfiGBjK4a9.png?imageslim" alt="mark"> </p><ul><li><p>接口</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180106/A0mCCH4eal.png?imageslim" alt="mark"> </p></li><li><p>在枚举里每个实例单独实现方法覆写，使用匿名内部类</p></li></ul><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180106/Cb6dDgdE5L.png?imageslim" alt="mark"></p><ul><li>在枚举里定义抽象方法，此时枚举对象必须覆写抽象方法</li></ul><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180106/lbI02kli09.png?imageslim" alt="mark"> </p><ul><li><p>枚举应用在switch中</p><p> <img src="http://o8i01ajlj.bkt.clouddn.com/blog/180106/g03FC37GB8.png?imageslim" alt="mark"></p></li></ul><h3 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h3><p>在接口子类中用lambda表达式实现匿名内部类，覆写接口的抽象方法。</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180106/kE9dh8209i.png?imageslim" alt="mark"> </p><h3 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h3><p>在函数式接口里使用方法引用</p><h4 id="引用静态方法"><a href="#引用静态方法" class="headerlink" title="引用静态方法"></a>引用静态方法</h4><h4 id="引用对象方法"><a href="#引用对象方法" class="headerlink" title="引用对象方法"></a>引用对象方法</h4><h4 id="引用特定类型方法"><a href="#引用特定类型方法" class="headerlink" title="引用特定类型方法"></a>引用特定类型方法</h4><h4 id="引用构造方法"><a href="#引用构造方法" class="headerlink" title="引用构造方法"></a>引用构造方法</h4><h3 id="内建函数式接口"><a href="#内建函数式接口" class="headerlink" title="内建函数式接口"></a>内建函数式接口</h3><p><code>java.util.function</code>提供有4类函数式接口</p><ul><li>Function</li><li>Consumer</li><li>Supplier</li><li>Predict</li></ul><h3 id="Annotation"><a href="#Annotation" class="headerlink" title="Annotation"></a>Annotation</h3><p>利用注解的形式来实现程序的不同功能。类似于利用配置文件。</p><ul><li><code>@override</code> 精确覆写，告诉编译器，这个方法要被覆写</li><li><code>@Deprecated</code>   声明过期的方法，不被推荐，有新的方法替代</li><li><code>@SupressWarning</code>  压制警告，告诉编译器取消警告</li></ul><h3 id="类图与软件设计"><a href="#类图与软件设计" class="headerlink" title="类图与软件设计"></a>类图与软件设计</h3><p>UML</p><ul><li>类图，描述类及类间关系。</li><li>时序图，</li></ul><h3 id="JAVA-API文档查询"><a href="#JAVA-API文档查询" class="headerlink" title="JAVA API文档查询"></a>JAVA API文档查询</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;java-入门&quot;&gt;&lt;a href=&quot;#java-入门&quot; class=&quot;headerlink&quot; title=&quot;java 入门&quot;&gt;&lt;/a&gt;java 入门&lt;/h3&gt;&lt;h4 id=&quot;hello-world&quot;&gt;&lt;a href=&quot;#hello-world&quot; class=&quot;headerlink&quot; title=&quot;hello world&quot;&gt;&lt;/a&gt;hello world&lt;/h4&gt;&lt;p&gt;public class一个java文件只能有一个定义， 类名称必须与其所在的文件名一致。&lt;/p&gt;
&lt;p&gt;编译后，一个class生成一个对应的&lt;code&gt;*.class&lt;/code&gt;文件。&lt;/p&gt;
&lt;p&gt;执行从主方法开始，主方法所在的类成为主类。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Main.java&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Main&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// write your code here&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        a++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;A&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Java" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/Java/"/>
    
    
      <category term="Java" scheme="http://shuaiyy.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>HTML代码转义和URL编解码</title>
    <link href="http://shuaiyy.cn/2018/01/02/%E6%8A%80%E6%9C%AF/HTML%E8%BD%AC%E4%B9%89%E5%92%8CURL%E7%BC%96%E8%A7%A3%E7%A0%81/"/>
    <id>http://shuaiyy.cn/2018/01/02/技术/HTML转义和URL编解码/</id>
    <published>2018-01-01T16:00:00.000Z</published>
    <updated>2018-06-03T06:08:14.497Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTML代码转义和URL编解码"><a href="#HTML代码转义和URL编解码" class="headerlink" title="HTML代码转义和URL编解码"></a>HTML代码转义和URL编解码</h2><h3 id="HTML代码转义"><a href="#HTML代码转义" class="headerlink" title="HTML代码转义"></a>HTML代码转义</h3><p><a href="http://tool.oschina.net/commons?type=2" target="_blank" rel="external">html转义字符表</a><br>当爬虫抓到的html字符串是这种 <code>&#39;&amp;lt;abc&amp;gt;&#39;</code>, 其对应的文本为 <code>&lt;abc&gt;</code>,需要进行反转义处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 标准库即可实现</span></div><div class="line"><span class="keyword">import</span> HTMLParser</div><div class="line">html_parser = HTMLParser.HTMLParser()</div><div class="line">txt = html_parser.unescape(html)</div><div class="line"><span class="comment"># 或者用BS</span></div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup </div><div class="line">soup = BeautifulSoup(html, \</div><div class="line">       convertEntities=BeautifulSoup.HTML_ENTITIES)</div><div class="line"><span class="comment"># 转义的功能在cgi模块</span></div><div class="line"><span class="keyword">import</span> cgi</div><div class="line">html = cgi.escape(txt)</div></pre></td></tr></table></figure><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/180115/76jEdKKfAf.png?imageslim" alt="mark"></p><a id="more"></a><h3 id="URL编解码"><a href="#URL编解码" class="headerlink" title="URL编解码"></a>URL编解码</h3><p>当url中get参数的取值存在特殊字符，如&amp; ? = /等会产生歧义，需要对URL内容进行编码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib</div><div class="line">rawurl = <span class="string">"%E6%B2%B3%E6%BA%90"</span></div><div class="line">url = urllib.unquote(rawurl)</div><div class="line">url = urllib.quote(<span class="string">"呵呵"</span>)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;HTML代码转义和URL编解码&quot;&gt;&lt;a href=&quot;#HTML代码转义和URL编解码&quot; class=&quot;headerlink&quot; title=&quot;HTML代码转义和URL编解码&quot;&gt;&lt;/a&gt;HTML代码转义和URL编解码&lt;/h2&gt;&lt;h3 id=&quot;HTML代码转义&quot;&gt;&lt;a href=&quot;#HTML代码转义&quot; class=&quot;headerlink&quot; title=&quot;HTML代码转义&quot;&gt;&lt;/a&gt;HTML代码转义&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://tool.oschina.net/commons?type=2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;html转义字符表&lt;/a&gt;&lt;br&gt;当爬虫抓到的html字符串是这种 &lt;code&gt;&amp;#39;&amp;amp;lt;abc&amp;amp;gt;&amp;#39;&lt;/code&gt;, 其对应的文本为 &lt;code&gt;&amp;lt;abc&amp;gt;&lt;/code&gt;,需要进行反转义处理。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 标准库即可实现&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; HTMLParser&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;html_parser = HTMLParser.HTMLParser()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;txt = html_parser.unescape(html)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 或者用BS&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; bs4 &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; BeautifulSoup &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;soup = BeautifulSoup(html, \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       convertEntities=BeautifulSoup.HTML_ENTITIES)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 转义的功能在cgi模块&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; cgi&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;html = cgi.escape(txt)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;http://o8i01ajlj.bkt.clouddn.com/blog/180115/76jEdKKfAf.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Web" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/Web/"/>
    
    
      <category term="Web" scheme="http://shuaiyy.cn/tags/Web/"/>
    
      <category term="HTML" scheme="http://shuaiyy.cn/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>IDEA使用技巧</title>
    <link href="http://shuaiyy.cn/2018/01/01/%E6%8A%80%E6%9C%AF/IDEA%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <id>http://shuaiyy.cn/2018/01/01/技术/IDEA配置与使用技巧/</id>
    <published>2017-12-31T16:00:00.000Z</published>
    <updated>2018-06-03T06:04:21.692Z</updated>
    
    <content type="html"><![CDATA[<h3 id="IDEA配置"><a href="#IDEA配置" class="headerlink" title="IDEA配置"></a>IDEA配置</h3><p>代码补全中关掉首字母大小写敏感。</p><h3 id="IDEA使用技巧"><a href="#IDEA使用技巧" class="headerlink" title="IDEA使用技巧"></a>IDEA使用技巧</h3><ul><li>主方法补全，public static  void main首字母，<code>psvm</code></li><li>for循环补全，输入<code>fori</code> 根据提示后选择</li><li><code>System.out.println();</code>在IntellJ中是输入<code>sout</code></li></ul><a id="more"></a><h3 id="IDEA编辑框背景图片"><a href="#IDEA编辑框背景图片" class="headerlink" title="IDEA编辑框背景图片"></a>IDEA编辑框背景图片</h3><p><code>Settings -&gt; Appearance &amp; Behaviour -&gt; Appearance</code>里有设置，如果没有可以安装插件。</p><p>安装插件<code>BackgroundImage Plus</code>，可以随机切换一个文件夹里的图片作为背景。</p><p><code>Settings -&gt; Appearance &amp; Behaviour -&gt; Background Image Plus</code></p><p>使用详情见 <a href="https://github.com/lachlankrautz/backgroundImagePlus" target="_blank" rel="external">插件的github主页</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;IDEA配置&quot;&gt;&lt;a href=&quot;#IDEA配置&quot; class=&quot;headerlink&quot; title=&quot;IDEA配置&quot;&gt;&lt;/a&gt;IDEA配置&lt;/h3&gt;&lt;p&gt;代码补全中关掉首字母大小写敏感。&lt;/p&gt;
&lt;h3 id=&quot;IDEA使用技巧&quot;&gt;&lt;a href=&quot;#IDEA使用技巧&quot; class=&quot;headerlink&quot; title=&quot;IDEA使用技巧&quot;&gt;&lt;/a&gt;IDEA使用技巧&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;主方法补全，public static  void main首字母，&lt;code&gt;psvm&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;for循环补全，输入&lt;code&gt;fori&lt;/code&gt; 根据提示后选择&lt;/li&gt;
&lt;li&gt;&lt;code&gt;System.out.println();&lt;/code&gt;在IntellJ中是输入&lt;code&gt;sout&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="IDEA" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/IDEA/"/>
    
    
      <category term="Java" scheme="http://shuaiyy.cn/tags/Java/"/>
    
      <category term="IDEA" scheme="http://shuaiyy.cn/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://shuaiyy.cn/2017/11/17/%E6%8A%80%E6%9C%AF/Python%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>http://shuaiyy.cn/2017/11/17/技术/Python多线程/</id>
    <published>2017-11-17T01:27:34.436Z</published>
    <updated>2018-06-03T05:31:56.460Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python多线程"><a href="#Python多线程" class="headerlink" title="Python多线程"></a>Python多线程</h2><h3 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h3><blockquote><p>python解释器的GIL限制了线程的多核并行</p></blockquote><h4 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h4><ul><li>程序的一次执行</li><li>由代码段、数据段和进程控制块组成</li><li>基本状态：就绪、阻塞、执行</li><li>是拥有资源的独立单位</li></ul><h4 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h4><ul><li>进程中的任务执行的实体</li><li>一个进程里可以有多个线程，线程占有极少资源，多个线程共享进程的资源。这就会涉及同步和通信的问题。</li><li>通常认为线程不拥有系统资源</li><li>线程的开销比进程小</li></ul><h3 id="线程状态和生命周期"><a href="#线程状态和生命周期" class="headerlink" title="线程状态和生命周期"></a>线程状态和生命周期</h3><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171115/L0IDB46066.png?imageslim" alt="mark"></p><h3 id="python内置模块threading"><a href="#python内置模块threading" class="headerlink" title="python内置模块threading"></a>python内置模块threading</h3><h4 id="Thread对象"><a href="#Thread对象" class="headerlink" title="Thread对象"></a>Thread对象</h4><p>用来创建线程的主要对象</p><p><code>Thread( target=None, name=None,args=(), kwargs=None)</code></p><ul><li>start() :启动线程</li><li>run()：启动线程调用的方法。</li><li>join([timeout]):等待到被调用线程终止或超时为止。</li><li>is_alive():返回线程的活动状态（run()方法期间）。</li><li>name:线程名</li><li>ident：线程ID</li><li>daemon:后台标志（在启动之前设置）</li></ul><p>获取当前线程的方法<code>current_thread()</code>, 获取所有活动线程的方法<code>enumerate()</code>:包括当前线程</p><h4 id="线程创建方法"><a href="#线程创建方法" class="headerlink" title="线程创建方法"></a>线程创建方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name)</span>:</span></div><div class="line">  <span class="keyword">print</span> <span class="string">'hello'</span> + name</div><div class="line">  </div><div class="line">t = Thread(target=hello, args=(<span class="string">'lio'</span>, ))</div><div class="line">t.start()</div><div class="line">t.join()</div></pre></td></tr></table></figure><ul><li><p>主动停止线程</p><p>线程并未提供stop或kill方法，如果用了死循环，则线程会一直运行。</p><p>可以使用线程的信号机制，或者设置一个全局变量作为停止的flag。</p></li><li><p>控制多线程的并发</p><p>threading模块没有实现线程池，可以用第三方分threadpool模块。</p><p>自己实现线程池pool：</p><ul><li>pool是一个有size，可以遍历，pop，add的对象，如list，dict，queue等</li><li>如果pool没满，可以向pool里添加线程</li><li>从pool里移除运行结束的线程，pop后del</li></ul></li></ul>  <a id="more"></a><h4 id="Timer计时器对象"><a href="#Timer计时器对象" class="headerlink" title="Timer计时器对象"></a>Timer计时器对象</h4><p>定时执行任务，<code>threading.Timer(3, hello).start()</code>，3秒后运行函数。</p><h4 id="线程同步和通信"><a href="#线程同步和通信" class="headerlink" title="线程同步和通信"></a>线程同步和通信</h4><ul><li><p>线程等待</p><p><code>t.join([timeout])</code>用来实现线程等待。被调用join()方法的线程会一直阻塞调用者的线程，直到自己结束（正常结束，或引发未处理异常），或超出timeout的时间。</p></li><li><p>daemon线程，后台线程</p><p><code>t.setDaemon(True)</code>,被设定为后台运行的线程，会在主程序退出时主动自杀。</p></li><li><p>线程通信</p><p>事件Event</p><p>事件Event比Condition条件锁简单一点。它通过维护内部的标识符来实现线程间的同步问题。</p><p>Event.wait([timeout])堵塞线程，直到Event对象内部标识位被设为True或超时（如果提供了参数timeout）。</p><p>Event.set()将标识位设为Ture</p><p>Event.clear()将标识设为False。</p><p>Event.isSet()判断标识位是否为Ture</p></li><li><p>线程同步</p><ul><li><p>锁</p><p>定义一个锁，执行互斥操作时，先请求锁，执行完互斥操作后释放锁。获得锁的线程会阻塞其他请求锁的线程。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</div><div class="line"><span class="keyword">import</span> time, random</div><div class="line"></div><div class="line">base_number = <span class="number">0</span></div><div class="line">number_lock = threading.Lock()</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Add</span><span class="params">(Thread)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, step)</span>:</span></div><div class="line">        super(Add, self).__init__()</div><div class="line">        self.step = step</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">global</span> base_number</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</div><div class="line">            number_lock.acquire()</div><div class="line">            base_number += self.step</div><div class="line">            number_lock.release()</div><div class="line">            time.sleep(random.random())</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    t1 = Add(<span class="number">2</span>)</div><div class="line">    t2= Add(<span class="number">3</span>)</div><div class="line">    t1.start()</div><div class="line">    t2.start()</div></pre></td></tr></table></figure><p>​</p></li><li><p>可重入锁</p><p><code>threading.RLock</code>,允许对一个资源多次加锁，加锁和释放的次数要一样，否则会出错。</p></li><li><p>条件变量</p><p><code>threading.Condition</code>, 可以实现线程之间相互通知。</p><p>实例化时可以使用默认锁或指定用户创建的锁，使用前先获取锁，调用wait时自动释放锁，调用notify不会释放锁。</p><p>等待条件发生的地方，调用wait方法阻塞线程，触发条件的地方使用notify方法唤醒线程。</p><p>notify(n=1)默认唤醒一个等待的线程，notify_all()唤醒所有等待的线程。</p><p>可以实现严格依照次序操作的线程之间的通信，如生产者消费者模式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</div><div class="line"><span class="keyword">import</span> time, random</div><div class="line"></div><div class="line">product = []  <span class="comment"># list是线程不安全的，使用时要加锁。queue是线程安全的。</span></div><div class="line">maxsize = <span class="number">4</span></div><div class="line">product_condition = threading.Condition() <span class="comment"># 默认使用一个RLock锁，lock=threading.RLock(),也可以自己定义一个锁传入</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span><span class="params">(Thread)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super(Producer, self).__init__()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">global</span> product, maxsize</div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            product_condition.acquire() <span class="comment"># 加锁，开始生产</span></div><div class="line">            <span class="keyword">if</span> len(product) &lt; maxsize:</div><div class="line">                data = random.randint(<span class="number">1</span>, <span class="number">9</span>)</div><div class="line">                product.append(data)</div><div class="line">                <span class="keyword">print</span> data, <span class="string">' add!'</span></div><div class="line">                product_condition.notify(<span class="number">1</span>) <span class="comment"># 唤醒一个消费者，消费产品</span></div><div class="line">                product_condition.release() <span class="comment"># 释放锁</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                product_condition.wait() <span class="comment"># 最大生产4个产品，等待消费者通知继续生产。wait等待会主动释放锁</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span><span class="params">(Thread)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></div><div class="line">        super(Consumer, self).__init__()</div><div class="line">        self.name = name <span class="comment"># 'consumer1'</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">global</span> product, maxsize</div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            product_condition.acquire()</div><div class="line">            <span class="keyword">if</span> len(product) &lt; <span class="number">1</span>:</div><div class="line">                product_condition.wait() <span class="comment"># 等待生产者进程唤醒,wait方法会释放锁</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">print</span> self.name, <span class="string">'消费了产品：'</span>, product.pop()</div><div class="line">                product_condition.notify() <span class="comment">#通知生产者进程继续生产</span></div><div class="line">                product_condition.release() <span class="comment"># notify不会释放锁，主动释放</span></div><div class="line">            time.sleep(<span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</div><div class="line">        t = Consumer(<span class="string">'consumer&#123;&#125;'</span>.format(i))</div><div class="line">        t.start()</div><div class="line">    <span class="comment"># 启用5个生产者和一个消费者</span></div><div class="line">    p1 = Producer()</div><div class="line">    p1.start()</div></pre></td></tr></table></figure></li><li><p>信号量</p><p><code>threading.Semaphore</code>控制稀缺资源，内部有计数器，当计数器值为0时，阻塞。</p><p>锁定时计数器-1，释放时计数器+1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">sema = threading.Semaphore(<span class="number">2</span>) <span class="comment"># 资源可用量为2</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer1</span><span class="params">(Thread)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></div><div class="line">        super(Consumer1, self).__init__()</div><div class="line">        self.name = name <span class="comment"># 'consumer1'</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        sema.acquire()</div><div class="line">        <span class="keyword">print</span> <span class="string">'&#123;&#125;获得了资源'</span>.format(self.name)</div><div class="line">        time.sleep(<span class="number">3</span>)</div><div class="line">        sema.release()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</div><div class="line">        t = Consumer1(<span class="string">'consumer&#123;&#125;'</span>.format(i))</div><div class="line">        t.start()</div></pre></td></tr></table></figure><p>​</p></li></ul></li></ul><h3 id="第三方模块threadpool"><a href="#第三方模块threadpool" class="headerlink" title="第三方模块threadpool"></a>第三方模块threadpool</h3><ul><li>定义pool，设置最大并发</li><li>makeRequests生成线程</li><li>将线程加入pool</li><li>调用pool.wait等待执行结束</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> threadpool</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name, froms=<span class="string">'Lili'</span>)</span>:</span></div><div class="line">  <span class="keyword">print</span> froms + <span class="string">' say hello to '</span>+ name</div><div class="line"></div><div class="line">pool = threadpool.ThreadPool(<span class="number">4</span>)</div><div class="line">requests = threadpool.makeRequests(hello, [(<span class="string">'a'</span>, <span class="string">'b'</span>), (<span class="string">'c'</span>, <span class="string">'d'</span>)])</div><div class="line">[pool.putRequest(req) <span class="keyword">for</span> req <span class="keyword">in</span> requests]</div><div class="line">pool.wait()</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Python多线程&quot;&gt;&lt;a href=&quot;#Python多线程&quot; class=&quot;headerlink&quot; title=&quot;Python多线程&quot;&gt;&lt;/a&gt;Python多线程&lt;/h2&gt;&lt;h3 id=&quot;进程与线程&quot;&gt;&lt;a href=&quot;#进程与线程&quot; class=&quot;headerlink&quot; title=&quot;进程与线程&quot;&gt;&lt;/a&gt;进程与线程&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;python解释器的GIL限制了线程的多核并行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;进程&quot;&gt;&lt;a href=&quot;#进程&quot; class=&quot;headerlink&quot; title=&quot;进程&quot;&gt;&lt;/a&gt;进程&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;程序的一次执行&lt;/li&gt;
&lt;li&gt;由代码段、数据段和进程控制块组成&lt;/li&gt;
&lt;li&gt;基本状态：就绪、阻塞、执行&lt;/li&gt;
&lt;li&gt;是拥有资源的独立单位&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;线程&quot;&gt;&lt;a href=&quot;#线程&quot; class=&quot;headerlink&quot; title=&quot;线程&quot;&gt;&lt;/a&gt;线程&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;进程中的任务执行的实体&lt;/li&gt;
&lt;li&gt;一个进程里可以有多个线程，线程占有极少资源，多个线程共享进程的资源。这就会涉及同步和通信的问题。&lt;/li&gt;
&lt;li&gt;通常认为线程不拥有系统资源&lt;/li&gt;
&lt;li&gt;线程的开销比进程小&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;线程状态和生命周期&quot;&gt;&lt;a href=&quot;#线程状态和生命周期&quot; class=&quot;headerlink&quot; title=&quot;线程状态和生命周期&quot;&gt;&lt;/a&gt;线程状态和生命周期&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://o8i01ajlj.bkt.clouddn.com/blog/171115/L0IDB46066.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;python内置模块threading&quot;&gt;&lt;a href=&quot;#python内置模块threading&quot; class=&quot;headerlink&quot; title=&quot;python内置模块threading&quot;&gt;&lt;/a&gt;python内置模块threading&lt;/h3&gt;&lt;h4 id=&quot;Thread对象&quot;&gt;&lt;a href=&quot;#Thread对象&quot; class=&quot;headerlink&quot; title=&quot;Thread对象&quot;&gt;&lt;/a&gt;Thread对象&lt;/h4&gt;&lt;p&gt;用来创建线程的主要对象&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Thread( target=None, name=None,args=(), kwargs=None)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;start() :启动线程&lt;/li&gt;
&lt;li&gt;run()：启动线程调用的方法。&lt;/li&gt;
&lt;li&gt;join([timeout]):等待到被调用线程终止或超时为止。&lt;/li&gt;
&lt;li&gt;is_alive():返回线程的活动状态（run()方法期间）。&lt;/li&gt;
&lt;li&gt;name:线程名&lt;/li&gt;
&lt;li&gt;ident：线程ID&lt;/li&gt;
&lt;li&gt;daemon:后台标志（在启动之前设置）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;获取当前线程的方法&lt;code&gt;current_thread()&lt;/code&gt;, 获取所有活动线程的方法&lt;code&gt;enumerate()&lt;/code&gt;:包括当前线程&lt;/p&gt;
&lt;h4 id=&quot;线程创建方法&quot;&gt;&lt;a href=&quot;#线程创建方法&quot; class=&quot;headerlink&quot; title=&quot;线程创建方法&quot;&gt;&lt;/a&gt;线程创建方法&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; threading &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Thread&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(name)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;hello&#39;&lt;/span&gt; + name&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;t = Thread(target=hello, args=(&lt;span class=&quot;string&quot;&gt;&#39;lio&#39;&lt;/span&gt;, ))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;t.start()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;t.join()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;主动停止线程&lt;/p&gt;
&lt;p&gt;线程并未提供stop或kill方法，如果用了死循环，则线程会一直运行。&lt;/p&gt;
&lt;p&gt;可以使用线程的信号机制，或者设置一个全局变量作为停止的flag。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;控制多线程的并发&lt;/p&gt;
&lt;p&gt;threading模块没有实现线程池，可以用第三方分threadpool模块。&lt;/p&gt;
&lt;p&gt;自己实现线程池pool：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pool是一个有size，可以遍历，pop，add的对象，如list，dict，queue等&lt;/li&gt;
&lt;li&gt;如果pool没满，可以向pool里添加线程&lt;/li&gt;
&lt;li&gt;从pool里移除运行结束的线程，pop后del&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://shuaiyy.cn/2017/11/07/%E6%8A%80%E6%9C%AF/PyQt5%20%E4%BD%BF%E7%94%A8pyinstaller%E6%89%93%E5%8C%85PyQt5%E7%A8%8B%E5%BA%8F/"/>
    <id>http://shuaiyy.cn/2017/11/07/技术/PyQt5 使用pyinstaller打包PyQt5程序/</id>
    <published>2017-11-07T09:40:41.286Z</published>
    <updated>2017-10-19T08:12:28.525Z</updated>
    
    <content type="html"><![CDATA[<p>使用pyinstaller打包PyQt5程序</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用pyinstaller打包PyQt5程序&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Gevent 源码分析</title>
    <link href="http://shuaiyy.cn/2017/11/05/%E6%8A%80%E6%9C%AF/Gevent%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://shuaiyy.cn/2017/11/05/技术/Gevent 源码分析/</id>
    <published>2017-11-04T16:00:00.000Z</published>
    <updated>2018-06-03T04:48:39.293Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Gevent-源码分析"><a href="#Gevent-源码分析" class="headerlink" title="Gevent 源码分析"></a>Gevent 源码分析</h2><blockquote><p>gevent包括2个重要的部分，libev和greenlet。</p><p>libev实现事件循环， watcher(叶子，事件监控处理)，ev_run(主干，事件循环引擎)，ev_loop(watcher管理)。</p><p>greenlet提供对协程的完整支持，用于执行异步任务。</p></blockquote><ul><li><p>源码分析工具：pycharm </p><p><code>ctrl + B</code> 跳转到对象声明的源码位置， <code>ctrl + alt + 箭头</code> 前进或后退</p><p>选择右侧导航栏的Structure窗口，可以快速的查看类的属性和方法。</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171106/d3Dcl4dJB4.png?imageslim" alt="mark"></p><a id="more"></a></li><li><p>下载gevent源码</p><p>从github上下载源码</p></li><li><p>源码目录结构</p><p>doc：项目文档</p><p>examples：简单的使用示例</p><p>benchmarks：压力测试</p><p>src：源代码所在目录</p></li></ul><p><code>__init__.py</code></p><ul><li><p><code>__all__</code>属性由列表构成，它规定了模块的所有可见方法，会使属性列表之外的成员全部私有化。</p><p>  只有在执行语句 <code>from module import *</code> 时，<code>__all__</code>属性才会起作用。此时所有枚举的成员被import，而其他成员被私有化。</p><p>   它不仅在第一时间展现了模块的内容大纲，而且也更清晰的提供了外部访问接口。</p></li><li><p><code>__dependencies_for_freezing()</code> ，为打包工具如py2exe等指明hidden-import</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">__version__ = <span class="string">'1.3.0.dev0'</span></div><div class="line"></div><div class="line"></div><div class="line">__all__ = [<span class="string">'get_hub'</span>, <span class="string">'Greenlet'</span>, <span class="string">'GreenletExit'</span>, <span class="string">'spawn'</span>, <span class="string">'spawn_later'</span>,</div><div class="line">           <span class="string">'spawn_raw'</span>, <span class="string">'iwait'</span>, <span class="string">'wait'</span>, <span class="string">'killall'</span>, <span class="string">'Timeout'</span>, <span class="string">'with_timeout'</span>,</div><div class="line">           <span class="string">'getcurrent'</span>, <span class="string">'sleep'</span>, <span class="string">'idle'</span>, <span class="string">'kill'</span>, <span class="string">'signal'</span>, <span class="string">'fork'</span>, <span class="string">'reinit'</span>]</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">if</span> sys.platform == <span class="string">'win32'</span>:</div><div class="line">    <span class="comment"># trigger WSAStartup call</span></div><div class="line">    <span class="keyword">import</span> socket  <span class="comment"># pylint:disable=unused-import,useless-suppression</span></div><div class="line">    <span class="keyword">del</span> socket</div><div class="line"></div><div class="line"><span class="keyword">from</span> gevent.hub <span class="keyword">import</span> get_hub, iwait, wait</div><div class="line"><span class="keyword">from</span> gevent.greenlet <span class="keyword">import</span> Greenlet, joinall, killall</div><div class="line">joinall = joinall <span class="comment"># export for pylint</span></div><div class="line">spawn = Greenlet.spawn</div><div class="line">spawn_later = Greenlet.spawn_later</div><div class="line"></div><div class="line"><span class="keyword">from</span> gevent.timeout <span class="keyword">import</span> Timeout, with_timeout</div><div class="line"><span class="keyword">from</span> gevent.hub <span class="keyword">import</span> getcurrent, GreenletExit, spawn_raw, sleep, idle, kill, reinit</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="keyword">from</span> gevent.os <span class="keyword">import</span> fork</div><div class="line"><span class="keyword">except</span> ImportError:</div><div class="line">    __all__.remove(<span class="string">'fork'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">from</span> gevent.hub <span class="keyword">import</span> signal <span class="keyword">as</span> _signal_class</div><div class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> signal <span class="keyword">as</span> _signal_module</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__dependencies_for_freezing</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># pylint:disable=unused-variable</span></div><div class="line">    <span class="keyword">from</span> gevent <span class="keyword">import</span> core</div><div class="line">    <span class="keyword">from</span> gevent <span class="keyword">import</span> resolver_thread</div><div class="line">    <span class="keyword">from</span> gevent <span class="keyword">import</span> resolver_ares</div><div class="line">    <span class="keyword">from</span> gevent <span class="keyword">import</span> socket <span class="keyword">as</span> _socket</div><div class="line">    <span class="keyword">from</span> gevent <span class="keyword">import</span> threadpool</div><div class="line">    <span class="keyword">from</span> gevent <span class="keyword">import</span> thread</div><div class="line">    <span class="keyword">from</span> gevent <span class="keyword">import</span> threading</div><div class="line">    <span class="keyword">from</span> gevent <span class="keyword">import</span> select</div><div class="line">    <span class="keyword">from</span> gevent <span class="keyword">import</span> subprocess</div><div class="line">    <span class="keyword">import</span> pprint</div><div class="line">    <span class="keyword">import</span> traceback</div><div class="line">    <span class="keyword">import</span> signal <span class="keyword">as</span> _signal</div><div class="line"></div><div class="line"><span class="keyword">del</span> __dependencies_for_freezing</div></pre></td></tr></table></figure><h3 id="libev原理"><a href="#libev原理" class="headerlink" title="libev原理"></a>libev原理</h3><p><a href="http://www.cnblogs.com/Huayuan/archive/2013/05/03/3058578.html" target="_blank" rel="external">libev源码解读</a></p><p>Reactor模式</p><p><strong>工作流程</strong>：</p><ol><li>获取ev_loop实例，它代表了一个事件循环，也是代码的主要组织者。</li><li>创建和初始化watcher，并绑定到loop实例。libev中定义了一系列的watcher（如io，timer），每类watcher负责一类特定的事件。当loop中检测到感兴趣的事件发生，便会通知相关的watcher。</li><li>启动事件循环，ev_run函数。事件循环启动后，当前线程/进程将会被阻塞，直到循环被终止。</li><li>当watcher监听的事件发生时，wathcher被放入就绪状态队列，等待调用（执行watcher的回调函数）。</li></ol><p><strong>watcher对象</strong>：</p><p>watcher是Reactor中的Event Handler。一方面，它向事件循环提供了统一的调用接口，监听事件;另一方面，它是外部代码的注入口，维护着具体的watcher信息，如：绑定的回调函数，watcher的优先级，是否激活等。</p><ul><li>active: 表示当前watcher是否被激活。</li><li>pending: 表示当前watcher有事件就绪，等待处理。</li><li>priority: 是当前watcher的优先级；</li><li>data: 附加数据指针，用来在watcher中携带额外所需的数据；</li><li>cb：是事件触发后的回调函数定义。</li></ul><p><strong>ev_loop对象</strong>:</p><p>ev_loop则是一个Reactor的角色，是事件循环的上下文环境，就像一根竹签，把前面的watcher实例像糖葫芦一样串起来。ev_loop实现对watcher的管理，维护watcher就绪队列，触发watcher执行。</p><p><strong>ev_run</strong>：</p><p>执行事件循环的的引擎，即Reactor模式中的select方法。通过向ev_run函数传递一个ev_loop实例，便可以开启一个事件循环。</p><p>ev_run实际上是一个巨大的do-while循环，期间会检查loop中注册的各种watcher的事件。如果有事件就绪，则触发相应的watcher。这个循环会一直持续到ev_break被调用或者无active的watcher为止。当然，也可以通过传递EVRUN_NOWAIT或EVRUN_ONCE等flag来控制循环的阻塞行为。</p><h3 id="gevent-core"><a href="#gevent-core" class="headerlink" title="gevent core"></a>gevent core</h3><blockquote><p>由于gevent封装的libev是c语言实现的事件循环框架，因此了解libev的工作原理是非常重要的。</p></blockquote><ol><li><p><code>core.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> gevent.libev <span class="keyword">import</span> corecext <span class="keyword">as</span> _core</div><div class="line"><span class="comment"># CFFI/PyPy</span></div><div class="line"><span class="keyword">from</span> gevent.libev <span class="keyword">import</span> corecffi <span class="keyword">as</span> _core</div></pre></td></tr></table></figure><p>从gevent.libev中导入<code>_core</code>,分python版和pypy版本。</p></li><li><p><code>gevent.libev corecext.ppyx</code> </p><p>gevent封装了libev。libev是c实现的高效事件循环框架，其核心为ev_run,主要要做了五件事情：</p><ol><li>更新更改的FD事件</li><li>进行必要的sleep</li><li>backend_poll收集pending的IO事件</li><li>收集pending的timer事件</li><li>调用所有pending的事件</li></ol><p><code>corecext.ppyx</code>是cython写的，看不懂</p><p>corecext.ppyx用Cython实现loop类，编译时会转换为gevent.core.c-&gt;gevent.core.so，对libev的结构体和接口进行封装，比如时间循环loop，回调callback，观察者watcher</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, object flags=None, object default=None, size_t ptr=<span class="number">0</span>)</span>:</span></div><div class="line">        cdef unsigned int c_flags</div><div class="line">        cdef object old_handler = <span class="keyword">None</span></div><div class="line">        libev.ev_prepare_init(&amp;self._prepare, &lt;void*&gt;gevent_run_callbacks)</div><div class="line"><span class="comment">#ifdef _WIN32</span></div><div class="line">        libev.ev_timer_init(&amp;self._periodic_signal_checker, &lt;void*&gt;gevent_periodic_signal_check, <span class="number">0.3</span>, <span class="number">0.3</span>)</div><div class="line"><span class="comment">#endif</span></div><div class="line">        libev.ev_timer_init(&amp;self._timer0, &lt;void*&gt;gevent_noop, <span class="number">0.0</span>, <span class="number">0.0</span>)</div><div class="line"><span class="comment"># ........................</span></div><div class="line">            libev.ev_prepare_start(self._ptr, &amp;self._prepare)</div><div class="line">            libev.ev_unref(self._ptr)</div><div class="line">        self._callbacks = []</div><div class="line"></div><div class="line"><span class="comment"># ........</span></div><div class="line">cdef public class loop [object PyGeventLoopObject, type PyGeventLoop_Type]:</div><div class="line">  <span class="comment"># loop对象的实现</span></div><div class="line">  </div><div class="line">cdef public class watcher [object PyGeventWatcherObject, type PyGeventWatcher_Type]:</div><div class="line">  </div><div class="line">cdef public class io(watcher) [object PyGeventIOObject, type PyGeventIO_Type]:</div><div class="line">  </div><div class="line">cdef public class timer(watcher) [object PyGeventTimerObject, type PyGeventTimer_Type]:</div><div class="line">  </div><div class="line">cdef _run_callbacks(self):</div><div class="line">        cdef callback cb</div><div class="line">        cdef object callbacks</div><div class="line">        cdef int count = <span class="number">1000</span></div><div class="line">        libev.ev_timer_stop(self._ptr, &amp;self._timer0)</div><div class="line">        <span class="keyword">while</span> self._callbacks <span class="keyword">and</span> count &gt; <span class="number">0</span>:</div><div class="line">            callbacks = self._callbacks</div><div class="line">            self._callbacks = []</div><div class="line">            <span class="keyword">for</span> cb <span class="keyword">in</span> callbacks:</div><div class="line">                libev.ev_unref(self._ptr)</div><div class="line">                gevent_call(self, cb)</div><div class="line">                count -= <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> self._callbacks:</div><div class="line">            libev.ev_timer_start(self._ptr, &amp;self._timer0)</div><div class="line">            </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, nowait=False, once=False)</span>:</span></div><div class="line">        CHECK_LOOP2(self)</div><div class="line">        cdef unsigned int flags = <span class="number">0</span></div><div class="line">        <span class="keyword">if</span> nowait:</div><div class="line">            flags |= libev.EVRUN_NOWAIT</div><div class="line">        <span class="keyword">if</span> once:</div><div class="line">            flags |= libev.EVRUN_ONCE</div><div class="line">        <span class="keyword">with</span> nogil:</div><div class="line">            libev.ev_run(self._ptr, flags)</div><div class="line">            </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_callback</span><span class="params">(self, func, *args)</span>:</span></div><div class="line">        CHECK_LOOP2(self)</div><div class="line">        cdef callback cb = callback(func, args)</div><div class="line">        self._callbacks.append(cb)</div><div class="line">        libev.ev_ref(self._ptr)</div><div class="line">        <span class="keyword">return</span> cb</div></pre></td></tr></table></figure></li><li><p>查看core的对象loop及其方法</p><p>pycharm的python shell（ipython）有自动补全，当单步执行时，可以利用其查看对象对外提供的方法</p><p>或者使用debug查看对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></div><div class="line">  <span class="keyword">print</span> <span class="string">'hello'</span></div><div class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> core</div><div class="line">loop = core.loop()</div><div class="line"><span class="comment"># loop对象对外提供的方法和属性</span></div><div class="line">loop.run_callback(hello)</div><div class="line">loop.run()</div><div class="line">loop.depth</div><div class="line">loop.fileno()</div><div class="line">loop.update()</div><div class="line">loop.now()</div><div class="line"></div><div class="line">t = loop.timer(<span class="number">3</span>, <span class="number">2</span>) <span class="comment"># 每3秒执行2次</span></div><div class="line">t = loop.timer(<span class="number">3</span>) <span class="comment"># 3秒后执行并退出</span></div><div class="line">t.start(hello)</div><div class="line">loop.run() <span class="comment"># 必须loop运行起来，timer事件监听才会执行。</span></div><div class="line"></div><div class="line"><span class="comment"># ------- timer对象的声明和start方法</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">timer</span><span class="params">(watcher)</span>:</span></div><div class="line">    _watcher_type = <span class="string">'ev_timer'</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, loop, after=<span class="number">0.0</span>, repeat=<span class="number">0.0</span>, ref=True, priority=None)</span>:</span></div><div class="line">        <span class="keyword">if</span> repeat &lt; <span class="number">0.0</span>:</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"repeat must be positive or zero: %r"</span> % repeat)</div><div class="line">        watcher.__init__(self, loop, ref=ref, priority=priority, args=(after, repeat))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self, callback, *args, **kw)</span>:</span></div><div class="line">      <span class="comment"># ...</span></div></pre></td></tr></table></figure><p>直接ctrl + B，查看loop对象的声明。loop初始化了几个watcher，重要的方法有<code>run_callback</code>, <code>run</code>, <code>timer</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">loop</span><span class="params">(object)</span>:</span></div><div class="line">    error_handler = <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, flags=None, default=None)</span>:</span></div><div class="line">        self._in_callback = <span class="keyword">False</span></div><div class="line">        self._callbacks = []</div><div class="line"></div><div class="line">        <span class="comment"># self._check is a watcher that runs in each iteration of the mainloop, just after the blocking call</span></div><div class="line">        self._check = ffi.new(<span class="string">"struct ev_check *"</span>)</div><div class="line"></div><div class="line">        <span class="comment"># self._prepare is a watcher that runs in each iteration of the mainloop, just before the blocking call</span></div><div class="line">        self._prepare = ffi.new(<span class="string">"struct ev_prepare *"</span>)</div><div class="line"></div><div class="line">        <span class="comment"># A timer we start and stop on demand. If we have callbacks,</span></div><div class="line">        self._timer0 = ffi.new(<span class="string">"struct ev_timer *"</span>)</div><div class="line">        libev.ev_timer_init(self._timer0, libev.gevent_noop, <span class="number">0.0</span>, <span class="number">0.0</span>)</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_run_callbacks</span><span class="params">(self, _evloop, _, _revents)</span>:</span></div><div class="line">       count = <span class="number">1000</span></div><div class="line">       libev.ev_timer_stop(self._ptr, self._timer0)</div><div class="line">       <span class="keyword">while</span> self._callbacks <span class="keyword">and</span> count &gt; <span class="number">0</span>:</div><div class="line">           callbacks = self._callbacks</div><div class="line">           self._callbacks = []</div><div class="line">           <span class="keyword">for</span> cb <span class="keyword">in</span> callbacks:</div><div class="line">               self.unref()</div><div class="line">               callback = cb.callback</div><div class="line">               args = cb.args</div><div class="line">               <span class="keyword">if</span> callback <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> args <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">                   <span class="comment"># it's been stopped</span></div><div class="line">                   <span class="keyword">continue</span></div><div class="line"></div><div class="line">               cb.callback = <span class="keyword">None</span></div><div class="line"></div><div class="line">               <span class="keyword">try</span>:</div><div class="line">                   callback(*args)</div><div class="line">               <span class="keyword">except</span>: </div><div class="line">                 <span class="comment"># 。。。</span></div><div class="line"></div><div class="line">       <span class="keyword">if</span> self._callbacks:</div><div class="line">           libev.ev_timer_start(self._ptr, self._timer0)</div><div class="line">   <span class="function"><span class="keyword">def</span> <span class="title">destroy</span><span class="params">(self)</span>:</span></div><div class="line">       <span class="comment"># 销毁loop对象</span></div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, nowait=False, once=False)</span>:</span></div><div class="line">       flags = <span class="number">0</span></div><div class="line">       <span class="keyword">if</span> nowait:</div><div class="line">           flags |= libev.EVRUN_NOWAIT</div><div class="line">       <span class="keyword">if</span> once:</div><div class="line">           flags |= libev.EVRUN_ONCE</div><div class="line"></div><div class="line">       libev.ev_run(self._ptr, flags)</div><div class="line">      </div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">timer</span><span class="params">(self, after, repeat=<span class="number">0.0</span>, ref=True, priority=None)</span>:</span></div><div class="line">       <span class="keyword">return</span> timer(self, after, repeat, ref, priority)</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(self, priority=None)</span>:</span></div><div class="line">       <span class="keyword">return</span> callback(self, priority)</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">run_callback</span><span class="params">(self, func, *args)</span>:</span></div><div class="line">       cb = callback(func, args)</div><div class="line">       self._callbacks.append(cb)</div><div class="line">       self.ref()</div><div class="line">       <span class="keyword">return</span> cb</div><div class="line">      </div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">fileno</span><span class="params">(self)</span>:</span></div><div class="line">       <span class="keyword">if</span> self._ptr:</div><div class="line">           fd = self._ptr.backend_fd</div><div class="line">           <span class="keyword">if</span> fd &gt;= <span class="number">0</span>:</div><div class="line">               <span class="keyword">return</span> fd</div></pre></td></tr></table></figure></li></ol><h3 id="gevent-hub"><a href="#gevent-hub" class="headerlink" title="gevent hub"></a>gevent hub</h3><ul><li><p>hub是greentlet子类，一个greenlet对象，是main greenlet。</p></li><li><p>hub是gevent的核心，依赖libev调度所有greenlet</p><p>当有协程需要调度时，主协程调用switch方法切换到子协程。子协程阻塞或者主动调用switch时，切回主协程，由主协程调度其他协程运行。</p></li></ul><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171105/lh86hej12d.png?imageslim" alt="mark"></p><ul><li><p>主要的对象和方法</p><p>get_hub</p><p>sleep</p><p>kill</p><p>wait</p><p>iwait</p><p>signalClass</p><p>HubClass</p><p>WaiterClass  </p></li></ul><h4 id="sleep触发调度"><a href="#sleep触发调度" class="headerlink" title="sleep触发调度"></a>sleep触发调度</h4><p>当执行<code>gevent.sleep(0)</code>语句时，当前协程立即被切换出去，回到gevent的主协程，紧接着主协程执行调度其他协程执行。我们从sleep函数入手分析。</p><ol><li><p><code>gevent.sleep</code></p><p>sleep(0)意味着，协程立即yield，其他runnable greenlets将有机会被执行。等到下次loop到该协程时，它才会被恢复执行。</p><p>具体流程：通过get_hub获取主协程和loop对象，然后调用waiter.switch或者hub.wait</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -------  hub.py  -----</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sleep</span><span class="params">(seconds=<span class="number">0</span>, ref=True)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line"><span class="string">    Put the current greenlet to sleep for at least *seconds*.</span></div><div class="line"><span class="string">    """</span></div><div class="line">    hub = get_hub()</div><div class="line">    loop = hub.loop</div><div class="line">    <span class="keyword">if</span> seconds &lt;= <span class="number">0</span>:</div><div class="line">        waiter = Waiter()</div><div class="line">        loop.run_callback(waiter.switch)</div><div class="line">        waiter.get()</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        hub.wait(loop.timer(seconds, ref=ref))</div></pre></td></tr></table></figure><ul><li><p>get_hub</p><p>从当前线程上下文中获取hub对象，如果没有就创建一个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -------  hub.py  -----</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_hub</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line"><span class="string">    Return the hub for the current thread.</span></div><div class="line"><span class="string">    """</span></div><div class="line">    hub = _threadlocal.hub</div><div class="line">    <span class="keyword">if</span> hub <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        hubtype = get_hub_class()</div><div class="line">        hub = _threadlocal.hub = hubtype(*args, **kwargs)</div><div class="line">    <span class="keyword">return</span> hub</div></pre></td></tr></table></figure></li><li><p>hub.loop</p><p>默认是一个GEVENT_LOOP对象</p></li><li><p>Waiter</p><p>Waiter是低层次的greenlets通信工具，用来安全的实现switch()或throw()调用。类中的doc如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Waiter</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line"><span class="string">    A low level communication utility for greenlets.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">    Waiter is a wrapper around greenlet's ``switch()`` and ``throw()`` calls that makes them somewhat safer:</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">    * switching will occur only if the waiting greenlet is executing :meth:`get` method currently;</span></div><div class="line"><span class="string">    * any error raised in the greenlet is handled inside :meth:`switch` and :meth:`throw`</span></div><div class="line"><span class="string">    * if :meth:`switch`/:meth:`throw` is called before the receiver calls :meth:`get`, then :class:`Waiter`</span></div><div class="line"><span class="string">      will store the value/exception. The following :meth:`get` will return the value/raise the exception.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">    The :meth:`switch` and :meth:`throw` methods must only be called from the :class:`Hub` greenlet.</span></div><div class="line"><span class="string">    The :meth:`get` method must be called from a greenlet other than :class:`Hub`.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">        &gt;&gt;&gt; result = Waiter()</span></div><div class="line"><span class="string">        &gt;&gt;&gt; timer = get_hub().loop.timer(0.1)</span></div><div class="line"><span class="string">        &gt;&gt;&gt; timer.start(result.switch, 'hello from Waiter')</span></div><div class="line"><span class="string">        &gt;&gt;&gt; result.get() # blocks for 0.1 seconds</span></div><div class="line"><span class="string">        'hello from Waiter'</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">    If switch is called before the greenlet gets a chance to call :meth:`get` then</span></div><div class="line"><span class="string">    :class:`Waiter` stores the value.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">        &gt;&gt;&gt; result = Waiter()</span></div><div class="line"><span class="string">        &gt;&gt;&gt; timer = get_hub().loop.timer(0.1)</span></div><div class="line"><span class="string">        &gt;&gt;&gt; timer.start(result.switch, 'hi from Waiter')</span></div><div class="line"><span class="string">        &gt;&gt;&gt; sleep(0.2)</span></div><div class="line"><span class="string">        &gt;&gt;&gt; result.get() # returns immediatelly without blocking</span></div><div class="line"><span class="string">        'hi from Waiter'</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">    .. warning::</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">        This a limited and dangerous way to communicate between</span></div><div class="line"><span class="string">        greenlets. It can easily leave a greenlet unscheduled forever</span></div><div class="line"><span class="string">        if used incorrectly. Consider using safer classes such as</span></div><div class="line"><span class="string">        :class:`gevent.event.Event`, :class:`gevent.event.AsyncResult`,</span></div><div class="line"><span class="string">        or :class:`gevent.queue.Queue`.</span></div><div class="line"><span class="string">    """</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">switch</span><span class="params">(self, value=None)</span>:</span></div><div class="line">        <span class="string">"""Switch to the greenlet if one's available. Otherwise store the value."""</span></div><div class="line">        greenlet = self.greenlet</div><div class="line">        <span class="keyword">if</span> greenlet <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            self.value = value</div><div class="line">            self._exception = <span class="keyword">None</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">assert</span> getcurrent() <span class="keyword">is</span> self.hub, <span class="string">"Can only use Waiter.switch method from the Hub greenlet"</span></div><div class="line">            switch = greenlet.switch</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                switch(value)</div><div class="line">            <span class="keyword">except</span>: <span class="comment"># pylint:disable=bare-except</span></div><div class="line">                self.hub.handle_error(switch, *sys.exc_info())</div><div class="line">                </div><div class="line">     <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""If a value/an exception is stored, return/raise it. Otherwise until switch() or throw() is called."""</span></div></pre></td></tr></table></figure><p>Waiter的switch方法，如果Waiter对象当前绑定了greenlet对象(hub实例)，就调用<code>greenlet.switch</code>方法。</p></li><li><p>hub.wait(loop.timer(seconds, ref=ref))</p><p>等待watcher对象（计时器timer）就绪之前，阻塞该协程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#   -------- hub.py -------    </span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">wait</span><span class="params">(self, watcher)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        Wait until the *watcher* (which should not be started) is ready.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">        The current greenlet will be unscheduled during this time.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">        .. seealso:: :class:`gevent.core.io`, :class:`gevent.core.timer`,</span></div><div class="line"><span class="string">            :class:`gevent.core.signal`, :class:`gevent.core.idle`, :class:`gevent.core.prepare`,</span></div><div class="line"><span class="string">            :class:`gevent.core.check`, :class:`gevent.core.fork`, :class:`gevent.core.async`,</span></div><div class="line"><span class="string">            :class:`gevent.core.child`, :class:`gevent.core.stat`</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">        """</span></div><div class="line">      waiter = Waiter()</div><div class="line">        unique = object()</div><div class="line">        watcher.start(waiter.switch, unique)</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            result = waiter.get()</div><div class="line">            <span class="keyword">if</span> result <span class="keyword">is</span> <span class="keyword">not</span> unique:</div><div class="line">                <span class="keyword">raise</span> InvalidSwitchError(<span class="string">'Invalid switch into %s: %r (expected %r)'</span> % (getcurrent(), result, unique))</div><div class="line">        <span class="keyword">finally</span>:</div><div class="line">            watcher.stop()</div></pre></td></tr></table></figure><p>​</p></li></ul></li></ol><h3 id="gevent-socket"><a href="#gevent-socket" class="headerlink" title="gevent socket"></a>gevent socket</h3><blockquote><p>当python底层的socket使用非阻塞模式时，执行socket操作会立即返回exception。gevent的socket在原始socket的基础上，通过处理exception，并监听socket 可读可写事件来实现异步。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> gevent</div><div class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> socket</div><div class="line"></div><div class="line">conn = socket.create_connection((<span class="string">'localhost'</span>, <span class="string">'8888'</span>))</div><div class="line"><span class="keyword">print</span> conn</div></pre></td></tr></table></figure><ul><li>socket.py</li><li>协作式底层网络接口</li><li>提供了套接字操作和相关函数。API与python标准库一致。但同步函数只会阻塞当前协程，其他协程会继续运行。</li></ul><p><strong>主要方法分析：</strong></p><ul><li><p><code>create_connection</code> 创建socket对象,调用<code>socket.connect</code>方法</p><p>主要<code>sock = socket(af, socktype, proto)</code> ,这里的socket是gevent封装的一个对象，在<code>_socket2.py</code>中定义的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ----- gevent socket.py -------</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_connection</span><span class="params">(address, timeout=_GLOBAL_DEFAULT_TIMEOUT, source_address=None)</span>:</span></div><div class="line">    <span class="string">"""Connect to *address* and return the socket object.</span></div><div class="line"><span class="string">    and return the socket object.  </span></div><div class="line"><span class="string">    """</span></div><div class="line"></div><div class="line">    host, port = address</div><div class="line">    err = <span class="keyword">None</span></div><div class="line">    <span class="keyword">for</span> res <span class="keyword">in</span> getaddrinfo(host, port, <span class="number">0</span> <span class="keyword">if</span> has_ipv6 <span class="keyword">else</span> AF_INET, SOCK_STREAM):</div><div class="line">        af, socktype, proto, _, sa = res</div><div class="line">        sock = <span class="keyword">None</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            sock = socket(af, socktype, proto)</div><div class="line">            <span class="keyword">if</span> timeout <span class="keyword">is</span> <span class="keyword">not</span> _GLOBAL_DEFAULT_TIMEOUT:</div><div class="line">                sock.settimeout(timeout)</div><div class="line">            <span class="keyword">if</span> source_address:</div><div class="line">                sock.bind(source_address)</div><div class="line">            sock.connect(sa)</div><div class="line">            <span class="keyword">return</span> sock</div><div class="line">        <span class="keyword">except</span> error <span class="keyword">as</span> ex:</div><div class="line"><span class="comment"># ....</span></div></pre></td></tr></table></figure><p><code>_socket2.py</code> 中<code>socket</code>对象</p><p>实现gevent封装的socket对象，接口和python原始的socket一致。</p><ul><li><p><code>self._sock = _realsocket(family, type, proto)</code>创建一个real socket（python的socket对象）</p></li><li><p><code>self._sock.setblocking(0)</code>设置real socket为非阻塞的工作模式</p></li><li><p><code>self.hub = get_hub()</code>拿到gevent中的主协程greenlet对象，hub</p></li><li><p>设置两个监听事件，可读和可写事件监听</p><p> <code>self._read_event = io(fileno, 1)</code></p><p> <code>self._write_event = io(fileno, 2)</code></p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ----- gevent _socket2.py -----</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">socket</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line"><span class="string">    gevent `socket.socket &lt;https://docs.python.org/2/library/socket.html#socket-objects&gt;`_ for Python 2.</span></div><div class="line"><span class="string">    This object should have the same API as the standard library socket linked to above.</span></div><div class="line"><span class="string">    """</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, family=AF_INET, type=SOCK_STREAM, proto=<span class="number">0</span>, _sock=None)</span>:</span></div><div class="line">        <span class="keyword">if</span> _sock <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            self._sock = _realsocket(family, type, proto)</div><div class="line">            self.timeout = _socket.getdefaulttimeout()</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">if</span> hasattr(_sock, <span class="string">'_sock'</span>):</div><div class="line">                self._sock = _sock._sock</div><div class="line">                self.timeout = getattr(_sock, <span class="string">'timeout'</span>, <span class="keyword">False</span>)</div><div class="line">                <span class="keyword">if</span> self.timeout <span class="keyword">is</span> <span class="keyword">False</span>:</div><div class="line">                    self.timeout = _socket.getdefaulttimeout()</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                self._sock = _sock</div><div class="line">                self.timeout = _socket.getdefaulttimeout()</div><div class="line">        self._sock.setblocking(<span class="number">0</span>)</div><div class="line">        fileno = self._sock.fileno()</div><div class="line">        self.hub = get_hub()</div><div class="line">        io = self.hub.loop.io</div><div class="line">        self._read_event = io(fileno, <span class="number">1</span>)</div><div class="line">        self._write_event = io(fileno, <span class="number">2</span>)</div></pre></td></tr></table></figure></li></ul><p><strong>gevent socket对象的方法实现:</strong></p><p>打开pycharm的Structure导航窗口。</p><ul><li><p><code>connect</code></p><p>使用了非常巧妙的while循环，执行<code>result = sock.connect_ex(address)</code>进行socket连接，如果没有异常，则连接成功，跳出while。如果返回异常如连接未建立，缓冲区满等，则调用<code>self._wait(self._write_event)</code>等待socket变成可写状态(表示连接成功)，在继续while，等待期间协程交出运行权。</p><p>重点<code>socket._wait</code>,它调用了<code>self.hub.wait(watcher)</code>,实现阻塞当前的greenlet，等待对应的watcher就绪</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ----- gevent _socket2.py -----</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">socket</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">connect</span><span class="params">(self, address)</span>:</span></div><div class="line">    <span class="keyword">if</span> self.timeout == <span class="number">0.0</span>:</div><div class="line">      <span class="keyword">return</span> self._sock.connect(address)</div><div class="line">    sock = self._sock</div><div class="line">    <span class="keyword">if</span> isinstance(address, tuple):</div><div class="line">      r = getaddrinfo(address[<span class="number">0</span>], address[<span class="number">1</span>], sock.family)</div><div class="line">      address = r[<span class="number">0</span>][<span class="number">-1</span>]</div><div class="line">      <span class="keyword">if</span> self.timeout <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">        timer = Timeout.start_new(self.timeout, timeout(<span class="string">'timed out'</span>))</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">          timer = <span class="keyword">None</span></div><div class="line">          <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">              err = sock.getsockopt(SOL_SOCKET, SO_ERROR)</div><div class="line">              <span class="keyword">if</span> err:</div><div class="line">                <span class="keyword">raise</span> error(err, strerror(err))</div><div class="line">                result = sock.connect_ex(address)</div><div class="line">                <span class="keyword">if</span> <span class="keyword">not</span> result <span class="keyword">or</span> result == EISCONN:</div><div class="line">                  <span class="keyword">break</span></div><div class="line">                  <span class="keyword">elif</span> (result <span class="keyword">in</span> (EWOULDBLOCK, EINPROGRESS, EALREADY)) <span class="keyword">or</span> (result == EINVAL <span class="keyword">and</span> is_windows):</div><div class="line">                    self._wait(self._write_event)</div><div class="line">                    <span class="keyword">else</span>:</div><div class="line">                      <span class="keyword">raise</span> error(result, strerror(result))</div><div class="line">                      <span class="keyword">finally</span>:</div><div class="line">                        <span class="keyword">if</span> timer <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">                          timer.cancel()</div><div class="line">          </div><div class="line">          </div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">_wait</span><span class="params">(self, watcher, timeout_exc=timeout<span class="params">(<span class="string">'timed out'</span>)</span>)</span>:</span></div><div class="line">    <span class="string">"""Block the current greenlet until *watcher* has pending events."""</span></div><div class="line">    <span class="keyword">if</span> watcher.callback <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">      <span class="keyword">raise</span> _socketcommon.ConcurrentObjectUseError(<span class="string">'This socket is already used by another greenlet: %r'</span> % (watcher.callback, ))</div><div class="line">      <span class="keyword">if</span> self.timeout <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">        timeout = Timeout.start_new(self.timeout, timeout_exc, ref=<span class="keyword">False</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">          timeout = <span class="keyword">None</span></div><div class="line">          <span class="keyword">try</span>:</div><div class="line">            self.hub.wait(watcher)</div><div class="line">            <span class="keyword">finally</span>:</div><div class="line">              <span class="keyword">if</span> timeout <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">                timeout.cancel()</div></pre></td></tr></table></figure></li><li><p><code>send</code></p><p>首先拿到原生的<code>socket(self._sock)</code>,然后调用<code>socket.send</code>发送数据，因为socket是非阻塞的，所以会立即抛出异常 EWOULDBLOCK，然后调用  <code>self._wait(self._write_event)</code>, 等待可写事件发生后再次send数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ----- gevent _socket2.py -----</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">socket</span><span class="params">(object)</span>:</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(self, data, flags=<span class="number">0</span>, timeout=timeout_default)</span>:</span></div><div class="line">    sock = self._sock</div><div class="line">    <span class="keyword">if</span> timeout <span class="keyword">is</span> timeout_default:</div><div class="line">      timeout = self.timeout</div><div class="line">      <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">return</span> sock.send(data, flags)</div><div class="line">      <span class="keyword">except</span> error <span class="keyword">as</span> ex:</div><div class="line">        <span class="keyword">if</span> ex.args[<span class="number">0</span>] != EWOULDBLOCK <span class="keyword">or</span> timeout == <span class="number">0.0</span>:</div><div class="line">          <span class="keyword">raise</span></div><div class="line">          sys.exc_clear()</div><div class="line">          self._wait(self._write_event)</div><div class="line">          <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">return</span> sock.send(data, flags)</div><div class="line">          <span class="keyword">except</span> error <span class="keyword">as</span> ex2:</div><div class="line">            <span class="keyword">if</span> ex2.args[<span class="number">0</span>] == EWOULDBLOCK:</div><div class="line">              <span class="keyword">return</span> <span class="number">0</span></div><div class="line">            <span class="keyword">raise</span></div></pre></td></tr></table></figure></li><li><p><code>recv</code></p><p>send重试一次如果失败就会 return 0，而recv使用while循环，不停的尝试读数据，知道成功返回数据。</p><p>当有<code>EWOULDBLOCK</code>异常时，等待<code>self._wait(self._read_event)</code>可读事件发生，然后再次尝试读取数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ----- gevent _socket2.py -----</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">socket</span><span class="params">(object)</span>:</span>    </div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">recv</span><span class="params">(self, *args)</span>:</span></div><div class="line">        sock = self._sock  <span class="comment"># keeping the reference so that fd is not closed during waiting</span></div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                <span class="keyword">return</span> sock.recv(*args)</div><div class="line">            <span class="keyword">except</span> error <span class="keyword">as</span> ex:</div><div class="line">                <span class="keyword">if</span> ex.args[<span class="number">0</span>] != EWOULDBLOCK <span class="keyword">or</span> self.timeout == <span class="number">0.0</span>:</div><div class="line">                    <span class="keyword">raise</span></div><div class="line">                <span class="comment"># QQQ without clearing exc_info test__refcount.test_clean_exit fails</span></div><div class="line">                sys.exc_clear()</div><div class="line">            self._wait(self._read_event)</div></pre></td></tr></table></figure></li><li><p><code>accept</code></p><p>同样是while循环，当接收连接成功时跳出循环，然后创建一个gevent socket对象（<code>sockobj = socket(_sock=client_socket)</code>）并返回。如果发生异常则阻塞等待可读事件发生（<code>self._wait(self._read_event)</code>）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ----- gevent _socket2.py -----</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">socket</span><span class="params">(object)</span>:</span>    </div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">accept</span><span class="params">(self)</span>:</span></div><div class="line">    sock = self._sock</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">      <span class="keyword">try</span>:</div><div class="line">        client_socket, address = sock.accept()</div><div class="line">        <span class="keyword">break</span></div><div class="line">        <span class="keyword">except</span> error <span class="keyword">as</span> ex:</div><div class="line">          <span class="keyword">if</span> ex.args[<span class="number">0</span>] != EWOULDBLOCK <span class="keyword">or</span> self.timeout == <span class="number">0.0</span>:</div><div class="line">            <span class="keyword">raise</span></div><div class="line">            sys.exc_clear()</div><div class="line">            self._wait(self._read_event)</div><div class="line">            sockobj = socket(_sock=client_socket)</div><div class="line">            <span class="keyword">if</span> PYPY:</div><div class="line">              client_socket._drop()</div><div class="line">              <span class="keyword">return</span> sockobj, address</div></pre></td></tr></table></figure></li></ul><h3 id="gevent-server"><a href="#gevent-server" class="headerlink" title="gevent server"></a>gevent server</h3><ul><li>BaseServer为服务器端实现了一些基础功能的抽象基类</li><li>StreamServer实现了通用TCPServer，在监听端口上接受新连接并为每个连接创建一个协程，协程函数是用户提供的。</li><li>分析Select，Poll部分的实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</div><div class="line"><span class="keyword">from</span> gevent.server <span class="keyword">import</span> StreamServer</div><div class="line">monkey.patch_all()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">handler</span><span class="params">(sock, addr)</span>:</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        data = sock.recv(<span class="number">1024</span>)</div><div class="line">        <span class="keyword">if</span> data:</div><div class="line">            <span class="keyword">print</span> data</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">print</span> addr, <span class="string">'closed!'</span></div><div class="line">            <span class="keyword">return</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    server = StreamServer((<span class="string">'localhost'</span>, <span class="number">12222</span>), handler)</div><div class="line">    server.serve_forever()</div></pre></td></tr></table></figure><h4 id="StreamServer"><a href="#StreamServer" class="headerlink" title="StreamServer"></a>StreamServer</h4><p>从StreamServer对象入手，其doc文档表明，这是一个通用的TCP Server，从监听的sock里接收连接，然后根据用户提供的handle回调函数spawn（生成，创建并运行greenlet）出协程。handle回调函数接收两个对象，socket连接和客户端地址。</p><p>backlog为服务器最大接收的连接数，默认为256. 只有服务器初始化，新创建socket时才需要在init里传入此参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ---- gevent server.py ------</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StreamServer</span><span class="params">(BaseServer)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line"><span class="string">    A generic TCP server.</span></div><div class="line"><span class="string">    Accepts connections on a listening socket and spawns user-provided</span></div><div class="line"><span class="string">    *handle* function for each connection with 2 arguments: the client</span></div><div class="line"><span class="string">    socket and the client address.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">    """</span></div><div class="line">    <span class="comment"># the default backlog to use if none was provided in __init__</span></div><div class="line">    backlog = <span class="number">256</span></div><div class="line"></div><div class="line">    reuse_addr = DEFAULT_REUSE_ADDR</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, listener, handle=None, backlog=None, spawn=<span class="string">'default'</span>, **ssl_args)</span>:</span></div><div class="line">        BaseServer.__init__(self, listener, handle=handle, spawn=spawn)</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">if</span> ssl_args:</div><div class="line">                <span class="comment"># 初始化ssl参数</span></div><div class="line">            <span class="keyword">if</span> backlog <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">                <span class="keyword">if</span> hasattr(self, <span class="string">'socket'</span>):</div><div class="line">                    <span class="keyword">raise</span> TypeError(<span class="string">'backlog must be None when a socket instance is passed'</span>)</div><div class="line">                self.backlog = backlog</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            self.close()</div><div class="line">            <span class="keyword">raise</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_listener</span><span class="params">(self, listener)</span>:</span></div><div class="line">        BaseServer.set_listener(self, listener)</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            self.socket = self.socket._sock</div><div class="line">        <span class="keyword">except</span> AttributeError:</div><div class="line">            <span class="keyword">pass</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init_socket</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(self, <span class="string">'socket'</span>):</div><div class="line">            self.socket = self.get_listener(self.address, self.backlog, self.family)</div><div class="line">            self.address = self.socket.getsockname()</div><div class="line">        <span class="keyword">if</span> self.ssl_args: <span class="comment"># 封装支持ssl socket的handle函数</span></div><div class="line">            self._handle = self.wrap_socket_and_handle</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self._handle = self.handle</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">if</span> PY3:</div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">do_read</span><span class="params">(self)</span>:</span></div><div class="line">            <span class="comment"># 。。。</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line"><span class="comment"># 针对python2的 do_read函数</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">do_read</span><span class="params">(self)</span>:</span></div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                client_socket, address = self.socket.accept()</div><div class="line">            <span class="keyword">except</span> _socket.error <span class="keyword">as</span> err:</div><div class="line">                <span class="keyword">if</span> err.args[<span class="number">0</span>] == EWOULDBLOCK:</div><div class="line">                    <span class="keyword">return</span></div><div class="line">                <span class="keyword">raise</span></div><div class="line">            sockobj = socket(_sock=client_socket)</div><div class="line">            <span class="keyword">if</span> PYPY:</div><div class="line">                client_socket._drop()</div><div class="line">            <span class="keyword">return</span> sockobj, address</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_close</span><span class="params">(self, sock, *args)</span>:</span></div><div class="line">        sock.close()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrap_socket_and_handle</span><span class="params">(self, client_socket, address)</span>:</span></div><div class="line">        <span class="comment"># used in case of ssl sockets</span></div><div class="line">        ssl_socket = self.wrap_socket(client_socket, **self.ssl_args)</div><div class="line">        <span class="keyword">return</span> self.handle(ssl_socket, address)</div></pre></td></tr></table></figure><p><code>BaseServer.__init__</code> 主要是初始化listener，spawn，handle， loop。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#   -----  BaseServer.__init__    ----</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, listener, handle=None, spawn=<span class="string">'default'</span>)</span>:</span></div><div class="line">        self._stop_event = Event()</div><div class="line">        self._stop_event.set()</div><div class="line">        self._watcher = <span class="keyword">None</span></div><div class="line">        self._timer = <span class="keyword">None</span></div><div class="line">        self._handle = <span class="keyword">None</span></div><div class="line">        self.pool = <span class="keyword">None</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            self.set_listener(listener)</div><div class="line">            self.set_spawn(spawn)</div><div class="line">            self.set_handle(handle)</div><div class="line">            self.delay = self.min_delay</div><div class="line">            self.loop = get_hub().loop</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            self.close()</div><div class="line">            <span class="keyword">raise</span></div></pre></td></tr></table></figure><p><code>server_forever()</code> 是基类BaseServer里提供的方法，如果server没有启动，则启动(start方法)并ready for 接收数据，直至停止。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#   ----- baseserver.py  BaseServer    ----</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">serve_forever</span><span class="params">(self, stop_timeout=None)</span>:</span></div><div class="line">        <span class="string">"""Start the server if it hasn't been already started and wait until it's stopped."""</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.started:</div><div class="line">            self.start()</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            self._stop_event.wait()</div><div class="line">        <span class="keyword">finally</span>:</div><div class="line">            Greenlet.spawn(self.stop, timeout=stop_timeout).join()</div><div class="line">            </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></div><div class="line">        self.init_socket()</div><div class="line">        self._stop_event.clear()</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            self.start_accepting()</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            self.close()</div><div class="line">            <span class="keyword">raise</span></div><div class="line">            </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_accepting</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self._watcher <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            self._watcher = self.loop.io(self.socket.fileno(), <span class="number">1</span>)</div><div class="line">            self._watcher.start(self._do_read)</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_do_read</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> xrange(self.max_accept):</div><div class="line">            <span class="keyword">if</span> self.full():</div><div class="line">                self.stop_accepting()</div><div class="line">                <span class="keyword">return</span></div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                args = self.do_read()</div><div class="line">                self.delay = self.min_delay</div><div class="line">                <span class="keyword">if</span> <span class="keyword">not</span> args:</div><div class="line">                    <span class="keyword">return</span></div><div class="line">            <span class="keyword">except</span>:</div><div class="line">                <span class="comment"># 。。。。</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">try</span>:</div><div class="line">                    self.do_handle(*args)</div><div class="line">                <span class="keyword">except</span>:</div><div class="line">                    self.loop.handle_error((args[<span class="number">1</span>:], self), *sys.exc_info())</div><div class="line">                    <span class="keyword">if</span> self.delay &gt;= <span class="number">0</span>:</div><div class="line">                        self.stop_accepting()</div><div class="line">                        self._timer = self.loop.timer(self.delay)</div><div class="line">                        self._timer.start(self._start_accepting_if_started)</div><div class="line">                        self.delay = min(self.max_delay, self.delay * <span class="number">2</span>)</div><div class="line">                    <span class="keyword">break</span>        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_read</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">raise</span> NotImplementedError()</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_handle</span><span class="params">(self, *args)</span>:</span></div><div class="line">        spawn = self._spawn</div><div class="line">        handle = self._handle</div><div class="line">        close = self.do_close</div><div class="line"></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">if</span> spawn <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">                _handle_and_close_when_done(handle, close, args)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                spawn(_handle_and_close_when_done, handle, close, args)</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            close(*args)</div><div class="line">            <span class="keyword">raise</span></div></pre></td></tr></table></figure><ul><li><p><code>start()</code>方法 </p><p>首先<code>self.init_socket()</code>初始化socket，用clear将<code>self._stop_event</code>停止事件设为false状态，然后调用<code>self.start_accepting()</code> 接收连接请求。</p><ul><li><p><code>init_socket()</code></p><p>init_socket由继承BaseServer的StreamServer实现,主要是获取socket和address，然后绑定handle方法，如果是ssl，则要先对handle方法进行ssl支持的封装。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># --- server.py StreamServer ---- </span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_socket</span><span class="params">(self)</span>:</span></div><div class="line">      <span class="keyword">if</span> <span class="keyword">not</span> hasattr(self, <span class="string">'socket'</span>):</div><div class="line">          self.socket = self.get_listener(self.address, self.backlog, self.family)</div><div class="line">          self.address = self.socket.getsockname()</div><div class="line">      <span class="keyword">if</span> self.ssl_args:</div><div class="line">          self._handle = self.wrap_socket_and_handle</div><div class="line">      <span class="keyword">else</span>:</div><div class="line">          self._handle = self.handle</div></pre></td></tr></table></figure><ul><li><p><code>self.start_accepting()</code></p><ol><li><p>设置一个watcher进行事件监听，watcher绑定了<code>_do_read()</code>方法</p></li><li><p><code>_do_read()</code>： 如果达到最大连接数，停止接收新连接，</p></li><li><p>否则执行<code>do_read()</code>方法</p><p><code>do_read()</code>由子类实现，在<code>StreamServer</code>中的实现如下，就是通过<code>self.socket.accept()</code>获取socket连接对象，并返回gevent socket对象和客户端地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># server.py  StreamServer</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_read</span><span class="params">(self)</span>:</span></div><div class="line">  <span class="keyword">try</span>:</div><div class="line">    client_socket, address = self.socket.accept()</div><div class="line">    <span class="keyword">except</span> _socket.error <span class="keyword">as</span> err:</div><div class="line">      <span class="keyword">if</span> err.args[<span class="number">0</span>] == EWOULDBLOCK:</div><div class="line">        <span class="keyword">return</span></div><div class="line">      <span class="keyword">raise</span></div><div class="line">      sockobj = socket(_sock=client_socket)</div><div class="line">      <span class="keyword">if</span> PYPY:</div><div class="line">        client_socket._drop()</div><div class="line">        <span class="keyword">return</span> sockobj, address</div></pre></td></tr></table></figure><p>​</p></li><li><p>然后执行<code>self.do_handle(*args)</code>方法</p></li><li><p><code>self.do_handle(*args)</code>方法调用的是<code>_handle_and_close_when_done</code>,这是个函数，不是类方法</p></li><li><p><code>_handle_and_close_when_done</code> 函数主要是执行handle，并调用close关闭handle。</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#   ----- baseserver.py  BaseServer    ----</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_handle_and_close_when_done</span><span class="params">(handle, close, args_tuple)</span>:</span> <span class="comment"># 6</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">      <span class="keyword">return</span> handle(*args_tuple)</div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">      close(*args_tuple)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseServer</span><span class="params">(object)</span>:</span>      </div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">start_accepting</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self._watcher <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            self._watcher = self.loop.io(self.socket.fileno(), <span class="number">1</span>)</div><div class="line">            self._watcher.start(self._do_read)  <span class="comment"># 1</span></div><div class="line">      </div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">_do_read</span><span class="params">(self)</span>:</span> <span class="comment"># 1</span></div><div class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> xrange(self.max_accept):</div><div class="line">            <span class="keyword">if</span> self.full():</div><div class="line">                self.stop_accepting()  <span class="comment"># 2</span></div><div class="line">                <span class="keyword">return</span></div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                args = self.do_read() <span class="comment"># 3</span></div><div class="line">                self.delay = self.min_delay</div><div class="line">                <span class="keyword">if</span> <span class="keyword">not</span> args:</div><div class="line">                    <span class="keyword">return</span></div><div class="line">            <span class="keyword">except</span>:</div><div class="line">                self.loop.handle_error(self, *sys.exc_info())</div><div class="line">                ex = sys.exc_info()[<span class="number">1</span>]</div><div class="line">                <span class="keyword">if</span> self.is_fatal_error(ex):</div><div class="line">                    self.close()</div><div class="line">                    sys.stderr.write(<span class="string">'ERROR: %s failed with %s\n'</span> % (self, str(ex) <span class="keyword">or</span> repr(ex)))</div><div class="line">                    <span class="keyword">return</span></div><div class="line">                <span class="keyword">if</span> self.delay &gt;= <span class="number">0</span>:</div><div class="line">                    self.stop_accepting()</div><div class="line">                    self._timer = self.loop.timer(self.delay)</div><div class="line">                    self._timer.start(self._start_accepting_if_started)</div><div class="line">                    self.delay = min(self.max_delay, self.delay * <span class="number">2</span>)</div><div class="line">                <span class="keyword">break</span></div><div class="line">            <span class="keyword">else</span>: <span class="comment"># 4</span></div><div class="line">                <span class="keyword">try</span>:</div><div class="line">                    self.do_handle(*args) <span class="comment"># 4</span></div><div class="line">                <span class="keyword">except</span>:</div><div class="line">                    self.loop.handle_error((args[<span class="number">1</span>:], self), *sys.exc_info())</div><div class="line">                    <span class="keyword">if</span> self.delay &gt;= <span class="number">0</span>:</div><div class="line">                        self.stop_accepting()</div><div class="line">                        self._timer = self.loop.timer(self.delay)</div><div class="line">                        self._timer.start(self._start_accepting_if_started)</div><div class="line">                        self.delay = min(self.max_delay, self.delay * <span class="number">2</span>)</div><div class="line">                    <span class="keyword">break</span></div><div class="line">                    </div><div class="line">   <span class="function"><span class="keyword">def</span> <span class="title">do_handle</span><span class="params">(self, *args)</span>:</span> <span class="comment"># 4</span></div><div class="line">        spawn = self._spawn</div><div class="line">        handle = self._handle</div><div class="line">        close = self.do_close</div><div class="line"></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">if</span> spawn <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">                _handle_and_close_when_done(handle, close, args) <span class="comment"># 5</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                spawn(_handle_and_close_when_done, handle, close, args) <span class="comment"># 5</span></div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            close(*args)</div><div class="line">            <span class="keyword">raise</span></div></pre></td></tr></table></figure><p>​</p></li></ul><p>​</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Gevent-源码分析&quot;&gt;&lt;a href=&quot;#Gevent-源码分析&quot; class=&quot;headerlink&quot; title=&quot;Gevent 源码分析&quot;&gt;&lt;/a&gt;Gevent 源码分析&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;gevent包括2个重要的部分，libev和greenlet。&lt;/p&gt;
&lt;p&gt;libev实现事件循环， watcher(叶子，事件监控处理)，ev_run(主干，事件循环引擎)，ev_loop(watcher管理)。&lt;/p&gt;
&lt;p&gt;greenlet提供对协程的完整支持，用于执行异步任务。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;源码分析工具：pycharm &lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctrl + B&lt;/code&gt; 跳转到对象声明的源码位置， &lt;code&gt;ctrl + alt + 箭头&lt;/code&gt; 前进或后退&lt;/p&gt;
&lt;p&gt;选择右侧导航栏的Structure窗口，可以快速的查看类的属性和方法。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o8i01ajlj.bkt.clouddn.com/blog/171106/d3Dcl4dJB4.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="并发编程" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
      <category term="Gevent" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/Gevent/"/>
    
    
      <category term="gevent" scheme="http://shuaiyy.cn/tags/gevent/"/>
    
  </entry>
  
  <entry>
    <title>Python wordcloud生成词云</title>
    <link href="http://shuaiyy.cn/2017/11/05/%E6%8A%80%E6%9C%AF/Python%20wordcloud%E7%94%9F%E6%88%90%E8%AF%8D%E4%BA%91/"/>
    <id>http://shuaiyy.cn/2017/11/05/技术/Python wordcloud生成词云/</id>
    <published>2017-11-04T16:00:00.000Z</published>
    <updated>2018-06-03T10:32:38.988Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-wordcloud生成词云"><a href="#Python-wordcloud生成词云" class="headerlink" title="Python wordcloud生成词云"></a>Python wordcloud生成词云</h1><p>wordcloud<a href="https://amueller.github.io/word_cloud/" target="_blank" rel="external">官网</a>，<a href="https://github.com/amueller/word_cloud" target="_blank" rel="external">github</a></p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/171206/Em5dbm25F1.png?imageslim" alt="mark"></p><p>主要步骤：</p><ol><li>安装wordcloud</li><li>创建WordCloud对象，定义生成词云的布局参数，如背景颜色，字体库、单词最大最小像素，词云图片长宽，最大单词数，随机配色种类，使用掩膜等</li><li>通过文本或统计好的词频生成词云，即将词按词频绘制到词云布局图片上。</li><li>显示、保存词云图片文件</li></ol><a id="more"></a><h2 id="WordCloud对象"><a href="#WordCloud对象" class="headerlink" title="WordCloud对象"></a>WordCloud对象</h2><ul><li><p>创建时，传入配置参数，具体见doc string</p><p><code>WordCloud(self, font_path=None, width=400, height=200, margin=2, ranks_only=None, prefer_horizontal=0.9, mask=None, scale=1, color_func=None, max_words=200, min_font_size=4, stopwords=None, random_state=None, background_color=&#39;black&#39;, max_font_size=None, font_step=1, mode=&#39;RGB&#39;, relative_scaling=0.5, regexp=None, collocations=True, colormap=None, normalize_plurals=True)</code></p></li><li><p>生成词云的函数</p><p>将词按对应的词频在词云布局图上生成图片，核心方法是<code>generate_from_frequencies</code>,不论是<code>generate（）</code>还是<code>generate_from_text（）</code>都最终用到generate_from_frequencies<br>完成词云上各词的着色,默认是随机着色 </p></li><li><p>示例代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 测试数据是豆瓣读书热门标签的词频</span></div><div class="line">all_words = &#123;<span class="string">u'\u5916\u56fd\u540d\u8457'</span>: <span class="number">84857</span>, <span class="string">u'\u793e\u4f1a\u5b66'</span>: <span class="number">590925</span>, <span class="string">u'\u52b1\u5fd7'</span>: <span class="number">362798</span>, <span class="string">u'\u7f8e\u672f'</span>: <span class="number">33100</span>, <span class="string">u'\u5fc3\u7406\u5b66'</span>: <span class="number">1200006</span>, <span class="string">u'\u8bd7\u8bcd'</span>: <span class="number">70763</span>, <span class="string">u'\u5916\u56fd\u6587\u5b66'</span>: <span class="number">1716128</span>, <span class="string">u'\u60c5\u611f'</span>: <span class="number">72526</span>, <span class="string">u'\u897f\u65b9\u54f2\u5b66'</span>: <span class="number">61787</span>, <span class="string">u'\u8bbe\u8ba1'</span>: <span class="number">373956</span>, <span class="string">u'web'</span>: <span class="number">21242</span>, <span class="string">u'\u6587\u5b66'</span>: <span class="number">1344359</span>, <span class="string">u'\u4eba\u6587'</span>: <span class="number">111407</span>, <span class="string">u'\u7535\u5f71'</span>: <span class="number">222370</span>, <span class="string">u'\u7406\u8d22'</span>: <span class="number">97220</span>, <span class="string">u'UCD'</span>: <span class="number">3517</span>, <span class="string">u'\u5f20\u5c0f\u5a34'</span>: <span class="number">97471</span>, <span class="string">u'\u7c73\u5170\xb7\u6606\u5fb7\u62c9'</span>: <span class="number">50510</span>, <span class="string">u'\u6e2f\u53f0'</span>: <span class="number">6904</span>, <span class="string">u'\u653f\u6cbb\u5b66'</span>: <span class="number">195558</span>, <span class="string">u'\u653f\u6cbb'</span>: <span class="number">320641</span>, <span class="string">u'\u843d\u843d'</span>: <span class="number">58448</span>, <span class="string">u'\u5546\u4e1a'</span>: <span class="number">264136</span>, <span class="string">u'\u8f7b\u5c0f\u8bf4'</span>: <span class="number">137336</span>, <span class="string">u'\u513f\u7ae5\u6587\u5b66'</span>: <span class="number">209248</span>, <span class="string">u'\u79d1\u5b66'</span>: <span class="number">115359</span>, <span class="string">u'\u9752\u6625\u6587\u5b66'</span>: <span class="number">110718</span>, <span class="string">u'\u65e5\u672c\u6f2b\u753b'</span>: <span class="number">268990</span>, <span class="string">u'\u5065\u5eb7'</span>: <span class="number">73083</span>, <span class="string">u'\u5b97\u6559'</span>: <span class="number">230071</span>, <span class="string">u'\u4ea6\u8212'</span>: <span class="number">232463</span>, <span class="string">u'\u9ad8\u6728\u76f4\u5b50'</span>: <span class="number">71579</span>, <span class="string">u'\u91d1\u878d'</span>: <span class="number">247852</span>, <span class="string">u'\u4eba\u7269\u4f20\u8bb0'</span>: <span class="number">106837</span>, <span class="string">u'\u79d1\u6280'</span>: <span class="number">21923</span>, <span class="string">u'\u827a\u672f\u53f2'</span>: <span class="number">98192</span>, <span class="string">u'\u81ea\u52a9\u6e38'</span>: <span class="number">2635</span>, <span class="string">u'\u7f51\u7edc\u5c0f\u8bf4'</span>: <span class="number">194533</span>, <span class="string">u'\u6559\u80b2'</span>: <span class="number">181616</span>, <span class="string">u'\u4ea4\u4e92'</span>: <span class="number">4507</span>, <span class="string">u'\u963f\u52a0\u838e\xb7\u514b\u91cc\u65af\u8482'</span>: <span class="number">140070</span>, <span class="string">u'\u6751\u4e0a\u6625\u6811'</span>: <span class="number">410205</span>, <span class="string">u'\u94b1\u949f\u4e66'</span>: <span class="number">97394</span>, <span class="string">u'\u9c81\u8fc5'</span>: <span class="number">81995</span>, <span class="string">u'\u9b54\u5e7b'</span>: <span class="number">108292</span>, <span class="string">u'\u521b\u4e1a'</span>: <span class="number">101110</span>, <span class="string">u'\u8bd7\u6b4c'</span>: <span class="number">292956</span>, <span class="string">u'\u5fc3\u7406'</span>: <span class="number">337962</span>, <span class="string">u'\u4e2d\u56fd\u5386\u53f2'</span>: <span class="number">150383</span>, <span class="string">u'\u7b56\u5212'</span>: <span class="number">7865</span>, <span class="string">u'\u8328\u5a01\u683c'</span>: <span class="number">58270</span>, <span class="string">u'\u60ac\u7591'</span>: <span class="number">427890</span>, <span class="string">u'\u519b\u4e8b'</span>: <span class="number">64337</span>, <span class="string">u'\u5c0f\u8bf4'</span>: <span class="number">4836526</span>, <span class="string">u'\u7ba1\u7406'</span>: <span class="number">373936</span>, <span class="string">u'\u4eba\u9645\u5173\u7cfb'</span>: <span class="number">32141</span>, <span class="string">u'\u97e9\u5bd2'</span>: <span class="number">261086</span>, <span class="string">u'\u7ae5\u8bdd'</span>: <span class="number">274365</span>, <span class="string">u'\u79d1\u5e7b\u5c0f\u8bf4'</span>: <span class="number">118837</span>, <span class="string">u'\u5f53\u4ee3\u6587\u5b66'</span>: <span class="number">124970</span>, <span class="string">u'\u5973\u6027'</span>: <span class="number">260571</span>, <span class="string">u'\u4e8c\u6218'</span>: <span class="number">61933</span>, <span class="string">u'\u6444\u5f71'</span>: <span class="number">274433</span>, <span class="string">u'\u56de\u5fc6\u5f55'</span>: <span class="number">155101</span>, <span class="string">u'\u6742\u6587'</span>: <span class="number">204031</span>, <span class="string">u'\u624b\u5de5'</span>: <span class="number">39266</span>, <span class="string">u'\u8a00\u60c5'</span>: <span class="number">467793</span>, <span class="string">u'\u80a1\u7968'</span>: <span class="number">57220</span>, <span class="string">u'\u4f20\u8bb0'</span>: <span class="number">706782</span>, <span class="string">u'\u56fd\u5b66'</span>: <span class="number">131244</span>, <span class="string">u'\u4e2d\u56fd\u6587\u5b66'</span>: <span class="number">914012</span>, <span class="string">u'\u804c\u573a'</span>: <span class="number">191402</span>, <span class="string">u'\u5386\u53f2'</span>: <span class="number">1831830</span>, <span class="string">u'\u601d\u60f3'</span>: <span class="number">140789</span>, <span class="string">u'\u7a0b\u5e8f'</span>: <span class="number">1228</span>, <span class="string">u'\u7528\u6237\u4f53\u9a8c'</span>: <span class="number">51529</span>, <span class="string">u'\u4e1c\u91ce\u572d\u543e'</span>: <span class="number">495900</span>, <span class="string">u'\u5e7f\u544a'</span>: <span class="number">61104</span>, <span class="string">u'\u6f2b\u753b'</span>: <span class="number">1203437</span>, <span class="string">u'\u968f\u7b14'</span>: <span class="number">1037335</span>, <span class="string">u'\u63a8\u7406'</span>: <span class="number">852405</span>, <span class="string">u'\u4e09\u6bdb'</span>: <span class="number">197016</span>, <span class="string">u'\u8fd1\u4ee3\u53f2'</span>: <span class="number">58041</span>, <span class="string">u'\u620f\u5267'</span>: <span class="number">96981</span>, <span class="string">u'\u4f5b\u6559'</span>: <span class="number">65193</span>, <span class="string">u'\u7ecf\u6d4e\u5b66'</span>: <span class="number">382231</span>, <span class="string">u'UE'</span>: <span class="number">4894</span>, <span class="string">u'\u901a\u4fe1'</span>: <span class="number">4556</span>, <span class="string">u'\u6b66\u4fa0'</span>: <span class="number">297293</span>, <span class="string">u'\u795e\u7ecf\u7f51\u7edc'</span>: <span class="number">2175</span>, <span class="string">u'\u6e38\u8bb0'</span>: <span class="number">142629</span>, <span class="string">u'\u5b89\u59ae\u5b9d\u8d1d'</span>: <span class="number">172265</span>, <span class="string">u'\u793e\u4f1a'</span>: <span class="number">339416</span>, <span class="string">u'\u8425\u9500'</span>: <span class="number">139198</span>, <span class="string">u'\u54f2\u5b66'</span>: <span class="number">998389</span>, <span class="string">u'\u6570\u5b66'</span>: <span class="number">200099</span>, <span class="string">u'\u7a7f\u8d8a'</span>: <span class="number">147747</span>, <span class="string">u'\u53e4\u9f99'</span>: <span class="number">72338</span>, <span class="string">u'\u6295\u8d44'</span>: <span class="number">198723</span>, <span class="string">u'\u5efa\u7b51'</span>: <span class="number">253809</span>, <span class="string">u'\u6ca7\u6708'</span>: <span class="number">65008</span>, <span class="string">u'\u4e24\u6027'</span>: <span class="number">37553</span>, <span class="string">u'\u79d1\u5e7b'</span>: <span class="number">474318</span>, <span class="string">u'\u97f3\u4e50'</span>: <span class="number">110843</span>, <span class="string">u'\u6210\u957f'</span>: <span class="number">439250</span>, <span class="string">u'\u81ea\u7531\u4e3b\u4e49'</span>: <span class="number">41215</span>, <span class="string">u'\u9752\u6625'</span>: <span class="number">615963</span>, <span class="string">u'\u4f01\u4e1a\u53f2'</span>: <span class="number">18254</span>, <span class="string">u'\u7f16\u7a0b'</span>: <span class="number">143976</span>, <span class="string">u'\u79d1\u666e'</span>: <span class="number">503806</span>, <span class="string">u'\u4ea4\u4e92\u8bbe\u8ba1'</span>: <span class="number">64467</span>, <span class="string">u'\u5947\u5e7b'</span>: <span class="number">297252</span>, <span class="string">u'\u63a8\u7406\u5c0f\u8bf4'</span>: <span class="number">222021</span>, <span class="string">u'\u675c\u62c9\u65af'</span>: <span class="number">42901</span>, <span class="string">u'\u5f20\u7231\u73b2'</span>: <span class="number">181350</span>, <span class="string">u'\u4f59\u534e'</span>: <span class="number">184440</span>, <span class="string">u'\u91d1\u5eb8'</span>: <span class="number">143676</span>, <span class="string">u'\u5e7e\u7c73'</span>: <span class="number">97562</span>, <span class="string">u'\u90ed\u656c\u660e'</span>: <span class="number">152101</span>, <span class="string">u'\u7231\u60c5'</span>: <span class="number">787234</span>, <span class="string">u'\u751f\u6d3b'</span>: <span class="number">465841</span>, <span class="string">u'\u7ed8\u672c'</span>: <span class="number">838757</span>, <span class="string">u'\u738b\u5c0f\u6ce2'</span>: <span class="number">206659</span>, <span class="string">u'\u517b\u751f'</span>: <span class="number">33840</span>, <span class="string">u'\u8003\u53e4'</span>: <span class="number">45231</span>, <span class="string">u'\u7ed8\u753b'</span>: <span class="number">100734</span>, <span class="string">u'\u540d\u8457'</span>: <span class="number">195566</span>, <span class="string">u'\u7075\u4fee'</span>: <span class="number">117161</span>, <span class="string">u'\u6587\u5316'</span>: <span class="number">646049</span>, <span class="string">u'\u827a\u672f'</span>: <span class="number">436899</span>, <span class="string">u'\u65e5\u672c\u6587\u5b66'</span>: <span class="number">722390</span>, <span class="string">u'J.K.\u7f57\u7433'</span>: <span class="number">82487</span>, <span class="string">u'\u6821\u56ed'</span>: <span class="number">56805</span>, <span class="string">u'\u51e0\u7c73'</span>: <span class="number">114200</span>, <span class="string">u'\u7b97\u6cd5'</span>: <span class="number">47242</span>, <span class="string">u'\u53e4\u5178\u6587\u5b66'</span>: <span class="number">207377</span>, <span class="string">u'\u7ecf\u5178'</span>: <span class="number">800417</span>, <span class="string">u'\u7ecf\u6d4e'</span>: <span class="number">303485</span>, <span class="string">u'\u5bb6\u5c45'</span>: <span class="number">20761</span>, <span class="string">u'\u5f20\u60a6\u7136'</span>: <span class="number">57515</span>, <span class="string">u'\u6563\u6587'</span>: <span class="number">631865</span>, <span class="string">u'\u4e92\u8054\u7f51'</span>: <span class="number">216614</span>, <span class="string">u'\u65c5\u884c'</span>: <span class="number">540931</span>, <span class="string">u'\u7f8e\u98df'</span>: <span class="number">179070</span>, <span class="string">u'\u803d\u7f8e'</span>: <span class="number">239324</span>&#125;</div><div class="line"></div><div class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud, ImageColorGenerator</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">from</span> scipy.misc <span class="keyword">import</span> imread</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"></div><div class="line"><span class="comment"># background_mask = np.array(Image.open(r'ssss.png'))</span></div><div class="line">background_mask = imread(<span class="string">r'ssss.png'</span>) <span class="comment"># 掩膜图片，词云生成按照其形状在非白色区域显示单词</span></div><div class="line">wc = WordCloud(</div><div class="line">    font_path=<span class="string">r'C:\Windows\Fonts\simfang.ttf'</span>, <span class="comment"># 设置字体格式，支持中文</span></div><div class="line">    width=<span class="number">2400</span>, height=<span class="number">2400</span>, margin=<span class="number">2</span>, </div><div class="line">    background_color=<span class="string">'white'</span>, <span class="comment"># 白色背景</span></div><div class="line">    mask=background_mask, <span class="comment"># 背景形状的掩膜</span></div><div class="line">    max_font_size = <span class="number">50</span>,            <span class="comment"># 设置字体最大值</span></div><div class="line">    random_state = <span class="number">30</span>,            <span class="comment"># 设置有多少种随机生成状态，即有多少种配色方案</span></div><div class="line">    max_words=<span class="number">2000</span>,<span class="comment"># 词云显示的最大词数</span></div><div class="line">)</div><div class="line">wc = wc.generate_from_frequencies(all_words)</div><div class="line"><span class="comment"># all_words为字典, &#123;'word': freq_num&#125;</span></div><div class="line"><span class="comment"># 中文乱码需要指定中文字体路径</span></div><div class="line"></div><div class="line"><span class="comment"># 根据指定的图片生成词云颜色</span></div><div class="line">image_colors = ImageColorGenerator(background_mask)</div><div class="line"></div><div class="line"><span class="comment"># 显示图片</span></div><div class="line">plt.axis(<span class="string">'off'</span>)</div><div class="line">plt.imshow(wc.recolor(color_func=image_colors))</div><div class="line">plt.show()</div><div class="line"></div><div class="line"><span class="comment"># 保存图片</span></div><div class="line">wc.to_file(<span class="string">'tags.png'</span>)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Python-wordcloud生成词云&quot;&gt;&lt;a href=&quot;#Python-wordcloud生成词云&quot; class=&quot;headerlink&quot; title=&quot;Python wordcloud生成词云&quot;&gt;&lt;/a&gt;Python wordcloud生成词云&lt;/h1&gt;&lt;p&gt;wordcloud&lt;a href=&quot;https://amueller.github.io/word_cloud/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官网&lt;/a&gt;，&lt;a href=&quot;https://github.com/amueller/word_cloud&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o8i01ajlj.bkt.clouddn.com/blog/171206/Em5dbm25F1.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;p&gt;主要步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装wordcloud&lt;/li&gt;
&lt;li&gt;创建WordCloud对象，定义生成词云的布局参数，如背景颜色，字体库、单词最大最小像素，词云图片长宽，最大单词数，随机配色种类，使用掩膜等&lt;/li&gt;
&lt;li&gt;通过文本或统计好的词频生成词云，即将词按词频绘制到词云布局图片上。&lt;/li&gt;
&lt;li&gt;显示、保存词云图片文件&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="技术" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Python" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/Python/"/>
    
    
      <category term="Python" scheme="http://shuaiyy.cn/tags/Python/"/>
    
      <category term="WordCloud" scheme="http://shuaiyy.cn/tags/WordCloud/"/>
    
      <category term="词云" scheme="http://shuaiyy.cn/tags/%E8%AF%8D%E4%BA%91/"/>
    
  </entry>
  
</feed>
