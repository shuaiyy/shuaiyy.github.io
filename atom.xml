<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>帅羊羊的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://shuaiyy.cn/"/>
  <updated>2017-10-07T13:56:55.438Z</updated>
  <id>http://shuaiyy.cn/</id>
  
  <author>
    <name>Shuai yy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flask-Login 登录插件</title>
    <link href="http://shuaiyy.cn/2017/09/23/%E6%8A%80%E6%9C%AF/Flask-Login/"/>
    <id>http://shuaiyy.cn/2017/09/23/技术/Flask-Login/</id>
    <published>2017-09-22T16:00:00.000Z</published>
    <updated>2017-10-07T13:56:55.438Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flask-Login"><a href="#Flask-Login" class="headerlink" title="Flask-Login"></a>Flask-Login</h1><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170927/1eKC05Ba52.png?imageslim" alt="mark"></p><h2 id="在Flask-app中注册插件"><a href="#在Flask-app中注册插件" class="headerlink" title="在Flask app中注册插件"></a>在Flask app中注册插件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># auth/__init__.py</span></div><div class="line"><span class="keyword">from</span> flask_login <span class="keyword">import</span> LoginManager</div><div class="line"></div><div class="line">login_manager = LoginManager()</div><div class="line">login_manager.session_protection = <span class="string">'strong'</span></div><div class="line">login_manager.login_view = <span class="string">'auth.login'</span></div><div class="line">login_manager.init_app(app)</div></pre></td></tr></table></figure><a id="more"></a><h2 id="扩展User-Model"><a href="#扩展User-Model" class="headerlink" title="扩展User Model"></a>扩展User Model</h2><ul><li>需要继承flask-login中的UserMixin，python支持多重继承</li><li>AnonymousUserMixin类是匿名用户</li><li>@login_manager.user_loader装饰的方法用于实现用户查找</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> . <span class="keyword">import</span> db, login_manager</div><div class="line"><span class="keyword">from</span> flask_login <span class="keyword">import</span> UserMixin, AnonymousUserMixin</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(UserMixin, db.Model)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'users'</span></div><div class="line">    id = db.Column(db.Integer, primary_key=<span class="keyword">True</span>)</div><div class="line">    name = db.Column(db.String)</div><div class="line">    email = db.Column(db.String)</div><div class="line">    password = db.Column(db.String)</div><div class="line">    role_id = db.Column(db.Integer, db.ForeignKey(<span class="string">'roles.id'</span>))</div><div class="line">    posts = db.relationship(<span class="string">'Post'</span>, backref=<span class="string">'author'</span>)</div><div class="line">    comments = db.relationship(<span class="string">'Comment'</span>, backref=<span class="string">'author'</span>)</div><div class="line">    locale = db.Column(db.String, default=<span class="string">'zh'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnonymousUser</span><span class="params">(AnonymousUserMixin)</span>:</span></div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">locale</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'zh'</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_administrator</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">      </div><div class="line">      </div><div class="line">login_manager.anonymous_user = AnonymousUser</div><div class="line"></div><div class="line"><span class="meta">@login_manager.user_loader</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_user</span><span class="params">(user_id)</span>:</span></div><div class="line">    <span class="keyword">return</span> User.query.get(int(user_id))</div></pre></td></tr></table></figure><h2 id="Form表单"><a href="#Form表单" class="headerlink" title="Form表单"></a>Form表单</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> flask.ext.wtf <span class="keyword">import</span> Form</div><div class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> StringField, PasswordField, SubmitField</div><div class="line"><span class="keyword">from</span> wtforms.validators <span class="keyword">import</span> DataRequired, EqualTo, Email, Regexp, Length</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegistrationForm</span><span class="params">(Form)</span>:</span></div><div class="line">    email = StringField(<span class="string">u'邮箱地址'</span>, validators=[DataRequired(),</div><div class="line">                                             Length(<span class="number">1</span>, <span class="number">64</span>),</div><div class="line">                                             Email()])</div><div class="line"></div><div class="line">    username = StringField(<span class="string">u'用户名'</span>, validators=[DataRequired(),</div><div class="line">                                                   Length(<span class="number">1</span>, <span class="number">64</span>),</div><div class="line">                                                   Regexp(<span class="string">'^[A-Za-z][A-Za-z0-9_.]*$'</span>, <span class="number">0</span>,</div><div class="line">                                                          <span class="string">u'用户名必须由字母数、字数、下划线或 . 组成'</span>)])</div><div class="line"></div><div class="line">    password = PasswordField(<span class="string">u'密码'</span>, validators=[DataRequired(),</div><div class="line">                                                     EqualTo(<span class="string">'password2'</span>, message=<span class="string">u'密码必须一至'</span>)])</div><div class="line"></div><div class="line">    password2 = PasswordField(<span class="string">u'确认密码'</span>, validators=[DataRequired()])</div><div class="line"></div><div class="line">    submit = SubmitField(<span class="string">u'马上注册'</span>)</div></pre></td></tr></table></figure><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><ul><li>需要登录才能访问的视图使用装饰器<code>login_required</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template, request, flash, redirect, url_for</div><div class="line"><span class="keyword">from</span> . <span class="keyword">import</span> auth</div><div class="line"><span class="keyword">from</span> .forms <span class="keyword">import</span> LoginForm, RegistrationForm</div><div class="line"><span class="keyword">from</span> ..models <span class="keyword">import</span> User</div><div class="line"><span class="keyword">from</span> .. <span class="keyword">import</span> db</div><div class="line"><span class="keyword">from</span> flask_login <span class="keyword">import</span> login_user, logout_user, current_user, login_required</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@auth.route('/login', methods=['GET', 'POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></div><div class="line">    form = LoginForm()</div><div class="line">    <span class="keyword">if</span> form.validate_on_submit():</div><div class="line">        user = User.query.filter_by(name=form.username.data, password=form.password.data).first()</div><div class="line">        <span class="keyword">if</span> user :</div><div class="line">            login_user(user)</div><div class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">'main.index'</span>))</div><div class="line"></div><div class="line">    <span class="keyword">return</span> render_template(<span class="string">'login.html'</span>,</div><div class="line">                           title=<span class="string">u'登录'</span>,</div><div class="line">                           form=form)</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@auth.route('/logout')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span><span class="params">()</span>:</span></div><div class="line">    logout_user()</div><div class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">'auth.login'</span>))</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@auth.route('/register', methods=['GET', 'POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">()</span>:</span></div><div class="line">    form = RegistrationForm()</div><div class="line"></div><div class="line">    <span class="keyword">if</span> form.validate_on_submit():</div><div class="line">        user = User(email=form.email.data,</div><div class="line">                    name=form.username.data,</div><div class="line">                    password=form.password.data)</div><div class="line"></div><div class="line">        db.session.add(user)</div><div class="line">        db.session.commit()</div><div class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">'auth.login'</span>))</div><div class="line"></div><div class="line">    <span class="keyword">return</span> render_template(<span class="string">'register.html'</span>,</div><div class="line">                           title=<span class="string">u'注册'</span>,</div><div class="line">                           form=form)</div></pre></td></tr></table></figure><h2 id="前端模板"><a href="#前端模板" class="headerlink" title="前端模板"></a>前端模板</h2><ul><li><p>判断用户是否登录</p><p><code>current_user.is_authenticated</code></p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;% raw %&#125;</div><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav navbar-right"</span>&gt;</span></div><div class="line">                &#123;% if current_user.is_authenticated() %&#125;</div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>&#123;&#123; current_user.name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for('auth.logout') &#125;&#125;"</span>&gt;</span>&#123;&#123; _("退出") &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                &#123;% else %&#125;</div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for('auth.login') &#125;&#125;"</span>&gt;</span>&#123;&#123; _("登录") &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for('auth.register') &#125;&#125;"</span>&gt;</span>&#123;&#123; _("注册") &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                &#123;% endif %&#125;</div><div class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">&#123;% endraw %&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Flask-Login&quot;&gt;&lt;a href=&quot;#Flask-Login&quot; class=&quot;headerlink&quot; title=&quot;Flask-Login&quot;&gt;&lt;/a&gt;Flask-Login&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://o8i01ajlj.bkt.clouddn.com/blog/170927/1eKC05Ba52.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;在Flask-app中注册插件&quot;&gt;&lt;a href=&quot;#在Flask-app中注册插件&quot; class=&quot;headerlink&quot; title=&quot;在Flask app中注册插件&quot;&gt;&lt;/a&gt;在Flask app中注册插件&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# auth/__init__.py&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; flask_login &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; LoginManager&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;login_manager = LoginManager()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;login_manager.session_protection = &lt;span class=&quot;string&quot;&gt;&#39;strong&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;login_manager.login_view = &lt;span class=&quot;string&quot;&gt;&#39;auth.login&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;login_manager.init_app(app)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="flask" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/flask/"/>
    
    
      <category term="Flask" scheme="http://shuaiyy.cn/tags/Flask/"/>
    
      <category term="Web" scheme="http://shuaiyy.cn/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Flask 表单</title>
    <link href="http://shuaiyy.cn/2017/09/22/%E6%8A%80%E6%9C%AF/Flask%E8%A1%A8%E5%8D%95/"/>
    <id>http://shuaiyy.cn/2017/09/22/技术/Flask表单/</id>
    <published>2017-09-21T16:00:00.000Z</published>
    <updated>2017-10-07T13:56:22.808Z</updated>
    
    <content type="html"><![CDATA[<h2 id="表单元素"><a href="#表单元素" class="headerlink" title="表单元素"></a>表单元素</h2><ul><li><p>什么是表单</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170920/7e6E8FeLgj.png?imageslim" alt="mark"></p><a id="more"></a></li><li><p>表单标签</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170920/23e1emA9aj.png?imageslim" alt="mark"></p></li><li><p>表单域</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170920/GFg2ekF4Dg.png?imageslim" alt="mark"></p></li><li><p>表单域的种类</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170920/08I3d2752g.png?imageslim" alt="mark"></p></li><li><p>表单按钮</p><ul><li>提交按钮</li><li>复位按钮</li><li>一般按钮</li></ul></li></ul><h2 id="表单提交方式"><a href="#表单提交方式" class="headerlink" title="表单提交方式"></a>表单提交方式</h2><p>有2种方式，get和post，在form的method属性中声明</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170920/GBd8bCDAJG.png?imageslim" alt="mark"></p><h3 id="GET和POST区别"><a href="#GET和POST区别" class="headerlink" title="GET和POST区别"></a>GET和POST区别</h3><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170920/AFF0JfKD2h.png?imageslim" alt="mark"></p><h3 id="GET适用场合"><a href="#GET适用场合" class="headerlink" title="GET适用场合"></a>GET适用场合</h3><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170920/JfB18EA4D7.png?imageslim" alt="mark"></p><h3 id="POST适用场合"><a href="#POST适用场合" class="headerlink" title="POST适用场合"></a>POST适用场合</h3><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170920/KL0efG18eD.png?imageslim" alt="mark"></p><h2 id="一个示例"><a href="#一个示例" class="headerlink" title="一个示例"></a>一个示例</h2><blockquote><p> 一个包含多种元素的表单，可以提交数据到后台，JavaScript可以获取元素的值。</p></blockquote><ul><li><p>html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"checkValue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"form1"</span>&gt;</span></div><div class="line">     <span class="comment">&lt;!-- 单行文本框，密码框不显示明文 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"Text"</span> <span class="attr">name</span>=<span class="string">"text1"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> /&gt;</span></div><div class="line"><span class="comment">&lt;!-- 多行文本框，默认可以调节大小 --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">placeholder</span>=<span class="string">"Textarea"</span> <span class="attr">name</span>=<span class="string">"textarea"</span> <span class="attr">style</span>=<span class="string">"resize:none"</span>&gt;</span> <span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 文件上传 --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> /&gt;</span></div><div class="line"><span class="comment">&lt;!-- 单选框 --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"Option"</span> <span class="attr">value</span>=<span class="string">"Option1"</span> /&gt;</span>选项 1</div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"Option"</span> <span class="attr">value</span>=<span class="string">"Option2"</span> /&gt;</span>选项 2</div><div class="line"><span class="comment">&lt;!-- 复选框 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"check"</span> <span class="attr">value</span>=<span class="string">"Option1"</span> /&gt;</span>选项 1</div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"check"</span> <span class="attr">value</span>=<span class="string">"Option2"</span> /&gt;</span>选项 2</div><div class="line"><span class="comment">&lt;!-- 提交、重置、普通按钮， 普通按钮需要绑定onclick方法 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">value</span>=<span class="string">"Reset"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"getValue()"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>JavaScript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getValue</span>(<span class="params"></span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="comment">/* 通过tag的name定位元素，value属性取值*/</span></div><div class="line">     <span class="comment">/* 当选择单选框时，只有页面中被选中的框才会被选中 */</span></div><div class="line">     <span class="keyword">var</span> value = <span class="built_in">document</span>.form1.Option.value;</div><div class="line">     <span class="comment">/* 复选框通过name取到的是obkect数组，是被选中的项 */</span></div><div class="line">  <span class="keyword">var</span> arr=<span class="built_in">document</span>.form1.check;</div><div class="line">   </div><div class="line">alert(arr[<span class="number">0</span>].value);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h1 id="wtforms-表单扩展"><a href="#wtforms-表单扩展" class="headerlink" title="wtforms 表单扩展"></a>wtforms 表单扩展</h1><blockquote><p>当你必须处理浏览器提交的表单数据时，视图代码很快会变得难以阅读。有一些库可以 简化这个工作，其中之一便是 <a href="http://wtforms.simplecodes.com/" target="_blank" rel="external">WTForms</a> ，下面我们将介绍这个库。如果你必须处理 许多表单，那么应当尝试使用这个库。</p></blockquote><p>wtforms可以实现表单验证的组件，使用pip安装。<a href="https://flask-wtf.readthedocs.io/en/stable/#" target="_blank" rel="external">Flask-WTF</a>是二者的简单整合。</p><ul><li><p>定义一个form对象</p><p>下面是一个常见的注册用的表单对象，包含用户名，密码，确认密码，接受协议等field。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> Form, BooleanField, TextField, PasswordField, validators</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegistrationForm</span><span class="params">(Form)</span>:</span></div><div class="line">    username = TextField(<span class="string">'Username'</span>, [validators.Length(min=<span class="number">4</span>, max=<span class="number">25</span>)])</div><div class="line">    email = TextField(<span class="string">'Email Address'</span>, [validators.Length(min=<span class="number">6</span>, max=<span class="number">35</span>)])</div><div class="line">    password = PasswordField(<span class="string">'New Password'</span>, [</div><div class="line">        validators.Required(),</div><div class="line">        validators.EqualTo(<span class="string">'confirm'</span>, message=<span class="string">'Passwords must match'</span>)</div><div class="line">    ])</div><div class="line">    confirm = PasswordField(<span class="string">'Repeat Password'</span>)</div><div class="line">    accept_tos = BooleanField(<span class="string">'I accept the TOS'</span>, [validators.Required()])</div></pre></td></tr></table></figure><p>​</p></li><li><p>在视图中实例化form</p><ul><li>调用 <code>validate()</code> 函数来验证数据</li><li>通过 form.<name>.data 可以访问表单中单个值</name></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@app.route('/register', methods=['GET', 'POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># 实例化form对象，如果是通过 GET 方法提交的，则相应的是 request.args</span></div><div class="line">    form = RegistrationForm(request.form)</div><div class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span> <span class="keyword">and</span> form.validate():</div><div class="line">        <span class="comment"># 注册用户</span></div><div class="line">        flash(<span class="string">'Thanks for registering'</span>)</div><div class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">'login'</span>))</div><div class="line">    <span class="keyword">return</span> render_template(<span class="string">'register.html'</span>, form=form)</div></pre></td></tr></table></figure><p>​</p></li><li><p>模板中的form</p><ul><li>wtform已经帮我们做了很多表单生成的工作</li><li>视图函数向模板传递form对象</li><li>使用form.<name>生成对应的表单域</name></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&#123;% raw %&#125;</div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>User Management<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">&#123;% if message %&#125; &#123;&#123;message&#125;&#125; &#123;% endif %&#125;</div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">Username :&#123;&#123;form.username&#125;&#125;</div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">Password :&#123;&#123;form.password&#125;&#125;</div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">value</span>=<span class="string">"reset"</span> /&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div><div class="line">&#123;% endraw %&#125;</div></pre></td></tr></table></figure><p>​</p></li></ul><h1 id="使用Flask-Wtf"><a href="#使用Flask-Wtf" class="headerlink" title="使用Flask-Wtf"></a>使用Flask-Wtf</h1><p>表单安全提交，需要配置csrf  secret key</p><p>使用flash进行错误提示</p><h2 id="定义form对象"><a href="#定义form对象" class="headerlink" title="定义form对象"></a>定义form对象</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> flask_wtf <span class="keyword">import</span> Form</div><div class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> StringField, PasswordField, DateTimeField, SubmitField</div><div class="line"><span class="keyword">from</span> wtforms.validators <span class="keyword">import</span> DataRequired, Length, Email, EqualTo, Regexp</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginForm</span><span class="params">(Form)</span>:</span></div><div class="line">    name = StringField(label=<span class="string">u'用户名'</span>, validators=[DataRequired(), Length(min=<span class="number">4</span>, max=<span class="number">20</span>)])</div><div class="line">    password = PasswordField(label=<span class="string">u'密码'</span>, validators=[DataRequired(), Length(min=<span class="number">4</span>, max=<span class="number">20</span>)])</div><div class="line">    submit = SubmitField(label=<span class="string">u'提交'</span>)</div><div class="line">    </div><div class="line">    </div><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">RegistrationForm</span><span class="params">(Form)</span>:</span></div><div class="line">    email = StringField(<span class="string">u'邮箱地址'</span>, validators=[DataRequired(),</div><div class="line">                                             Length(<span class="number">1</span>, <span class="number">64</span>),</div><div class="line">                                             Email()])</div><div class="line"></div><div class="line">    username = StringField(<span class="string">u'用户名'</span>, validators=[DataRequired(),</div><div class="line">                                                   Length(<span class="number">1</span>, <span class="number">64</span>),</div><div class="line">                                                   Regexp(<span class="string">'^[A-Za-z][A-Za-z0-9_.]*$'</span>, <span class="number">0</span>,</div><div class="line">                                                          <span class="string">u'用户名必须由字母数、字数、下划线或 . 组成'</span>)])</div><div class="line"></div><div class="line">    password = PasswordField(<span class="string">u'密码'</span>, validators=[DataRequired(),</div><div class="line">                                                     EqualTo(<span class="string">'password2'</span>, message=<span class="string">u'密码必须一至'</span>)])</div><div class="line"></div><div class="line">    password2 = PasswordField(<span class="string">u'确认密码'</span>, validators=[DataRequired()])</div><div class="line"></div><div class="line">    submit = SubmitField(<span class="string">u'马上注册'</span>)</div></pre></td></tr></table></figure><h2 id="在模板中引用"><a href="#在模板中引用" class="headerlink" title="在模板中引用"></a>在模板中引用</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;% raw %&#125;</div><div class="line"><span class="tag">&lt;<span class="name">form</span>  <span class="attr">action</span>=<span class="string">"/add"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">        &#123;&#123; form.hidden_tag() &#125;&#125;</div><div class="line">        &#123;&#123; form.name.label &#125;&#125;</div><div class="line">        &#123;&#123; form.name(class='text') &#125;&#125;</div><div class="line">        &#123;&#123; form.password.label &#125;&#125;</div><div class="line">        &#123;&#123; form.password() &#125;&#125;</div><div class="line">        &#123;&#123; form.submit() &#125;&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">&#123;% endraw %&#125;</div></pre></td></tr></table></figure><ul><li>Field type</li></ul><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170926/3K0dj7Jm00.png?imageslim" alt="mark"></p><ul><li>Validator</li></ul><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170926/g3g21Fb92I.png?imageslim" alt="mark"></p><h2 id="使用Bootstrap-wtf宏渲染表单"><a href="#使用Bootstrap-wtf宏渲染表单" class="headerlink" title="使用Bootstrap wtf宏渲染表单"></a>使用Bootstrap wtf宏渲染表单</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;% raw %&#125;</div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/login"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">    &#123;&#123; wtf.quick_form(form) &#125;&#125;</div><div class="line"> <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">&#123;% endraw %&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;表单元素&quot;&gt;&lt;a href=&quot;#表单元素&quot; class=&quot;headerlink&quot; title=&quot;表单元素&quot;&gt;&lt;/a&gt;表单元素&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;什么是表单&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o8i01ajlj.bkt.clouddn.com/blog/170920/7e6E8FeLgj.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="flask" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/flask/"/>
    
    
      <category term="Flask" scheme="http://shuaiyy.cn/tags/Flask/"/>
    
      <category term="Web" scheme="http://shuaiyy.cn/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Flask 开发环境搭建</title>
    <link href="http://shuaiyy.cn/2017/09/20/%E6%8A%80%E6%9C%AF/flask%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://shuaiyy.cn/2017/09/20/技术/flask开发环境搭建/</id>
    <published>2017-09-19T16:00:00.000Z</published>
    <updated>2017-10-07T13:54:56.042Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Flask-开发环境搭建"><a href="#Flask-开发环境搭建" class="headerlink" title="Flask 开发环境搭建"></a>Flask 开发环境搭建</h2><h3 id="安装python-pip-和虚拟环境"><a href="#安装python-pip-和虚拟环境" class="headerlink" title="安装python pip 和虚拟环境"></a>安装python pip 和虚拟环境</h3><p>virtualenv</p><p>虚拟机 </p><ul><li>docker</li></ul><h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><h4 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h4><p>  插件 <a href="https://github.com/VundleVim/Vundle.vim" target="_blank" rel="external">vundle</a>  vim包管理工具</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Flask-开发环境搭建&quot;&gt;&lt;a href=&quot;#Flask-开发环境搭建&quot; class=&quot;headerlink&quot; title=&quot;Flask 开发环境搭建&quot;&gt;&lt;/a&gt;Flask 开发环境搭建&lt;/h2&gt;&lt;h3 id=&quot;安装python-pip-和虚拟环境&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="技术" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="flask" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/flask/"/>
    
    
      <category term="Flask" scheme="http://shuaiyy.cn/tags/Flask/"/>
    
      <category term="Web" scheme="http://shuaiyy.cn/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Flask模块化 蓝图</title>
    <link href="http://shuaiyy.cn/2017/09/19/%E6%8A%80%E6%9C%AF/Flask%E8%93%9D%E5%9B%BE/"/>
    <id>http://shuaiyy.cn/2017/09/19/技术/Flask蓝图/</id>
    <published>2017-09-18T16:00:00.000Z</published>
    <updated>2017-10-07T13:54:28.954Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flask模块化-–-蓝图"><a href="#Flask模块化-–-蓝图" class="headerlink" title="Flask模块化 – 蓝图"></a>Flask模块化 – 蓝图</h1><h2 id="概念简介"><a href="#概念简介" class="headerlink" title="概念简介"></a>概念简介</h2><blockquote><p>在Django项目中，一个网站可以按模块划分，分别实现几个子APP，然后在settings里注册APP，并在urls里为不同的APP分配不同的url路由。</p><p>Flask也有相似的设计模式，被称为蓝图</p></blockquote><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170922/bB3Gl20Dh0.png?imageslim" alt="mark"></p><a id="more"></a><ul><li><p>新建一个py文件，存放一个模块的全部视图函数</p><p>​</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># user.py</span></div><div class="line"><span class="keyword">from</span> models <span class="keyword">import</span> User</div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint</div><div class="line"></div><div class="line">user = Blueprint(<span class="string">'user'</span>, __name__)</div><div class="line"></div><div class="line"><span class="meta">@user.route('/&lt;r_id&gt;')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_user_by_id</span><span class="params">(r_id)</span>:</span></div><div class="line">    u = User.objects(user_id=r_id).first()</div><div class="line">    <span class="keyword">print</span> u</div><div class="line">    <span class="keyword">return</span> <span class="string">"&#123;&#125;---&#123;&#125;"</span>.format(u.user_name, u.user_id) <span class="keyword">if</span> u <span class="keyword">else</span> <span class="string">"Not Exist!"</span></div></pre></td></tr></table></figure><p>model文件<code>app = Flask(__name__)</code>，可以避免循环引用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> flask_mongoengine <span class="keyword">import</span> MongoEngine</div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</div><div class="line">app = Flask(__name__)</div><div class="line">app.config[<span class="string">'MONGODB_SETTINGS'</span>] = &#123;<span class="string">'db'</span>: <span class="string">'test'</span>&#125;</div><div class="line">db = MongoEngine(app)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(db.Document)</span>:</span></div><div class="line">    user_id = db.StringField()</div><div class="line">    user_name = db.StringField()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">"id: &#123;&#125;---name:&#123;&#125;"</span>.format(self.user_id, self.user_name)</div></pre></td></tr></table></figure><p>​</p></li><li><p>在主文件中注册蓝图，并指定路由</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">from user import user</div><div class="line">app.register_blueprint(user, url_prefix=&apos;/user&apos;)</div></pre></td></tr></table></figure></li><li><p>然后访问url <code>localhost:port/user/1</code></p></li></ul><h2 id="项目模块划分"><a href="#项目模块划分" class="headerlink" title="项目模块划分"></a>项目模块划分</h2><blockquote><p>蓝图的概念类似django中的app，可以将一个项目按功能拆分组织</p><p>蓝图是Flask() app对象的一个子集</p></blockquote><ul><li><p>将相同逻辑的功能放在同一个模块里，并且可以为其分配路由</p><p>比如登录注册找回密码等功能放到auth模块，url为/auth/xxxx</p></li><li><p>假设一个Flask APP项目有登录模块和主模块。</p></li></ul><p><strong>项目结构</strong></p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170927/BF5k4h4aj4.png?imageslim" alt="mark"></p><h2 id="在模块中使用蓝图"><a href="#在模块中使用蓝图" class="headerlink" title="在模块中使用蓝图"></a>在模块中使用蓝图</h2><ul><li><p>定义一个蓝图</p><p>在 <code>auth/__init__.py</code>中定义,并导入本模块中其他的py文件，避免在其他地方导入产生循环引用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint</div><div class="line"></div><div class="line">auth = Blueprint(<span class="string">'auth'</span>, __name__)</div><div class="line"></div><div class="line"><span class="keyword">import</span> forms, views</div></pre></td></tr></table></figure></li><li><p>在视图中使用蓝图</p><ul><li>auth同app对象一样有route等装饰器</li><li>反向路由时可以使用<code>auth.login</code></li></ul><p><code>auth/views.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template, request, flash, redirect, url_for</div><div class="line"><span class="keyword">from</span> . <span class="keyword">import</span> auth</div><div class="line"><span class="keyword">from</span> .forms <span class="keyword">import</span> LoginForm, RegistrationForm</div><div class="line"><span class="keyword">from</span> ..models <span class="keyword">import</span> User</div><div class="line"><span class="keyword">from</span> .. <span class="keyword">import</span> db</div><div class="line"><span class="keyword">from</span> flask_login <span class="keyword">import</span> login_user, logout_user, current_user</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@auth.route('/login', methods=['GET', 'POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> render_template(<span class="string">'login.html'</span>,</div><div class="line">                           title=<span class="string">u'登录'</span>,</div><div class="line">                           form=form)</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@auth.route('/logout')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">'auth.login'</span>))</div><div class="line"></div><div class="line"><span class="meta">@auth.route('/register', methods=['GET', 'POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'ok'</span></div></pre></td></tr></table></figure><p>​</p></li></ul><h2 id="蓝图注册"><a href="#蓝图注册" class="headerlink" title="蓝图注册"></a>蓝图注册</h2><ul><li>在app初始化方法或工厂方法中注册蓝图</li><li>url_prefix指定模块的URL路由域</li><li>static_folder指定模块自己的static文件夹路径</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># /app/__init__.py  </span></div><div class="line"><span class="keyword">from</span> auth <span class="keyword">import</span> auth <span class="keyword">as</span> auth_blueprint</div><div class="line">  <span class="keyword">from</span> main <span class="keyword">import</span> main <span class="keyword">as</span> main_blueprint</div><div class="line"></div><div class="line">  app.register_blueprint(auth_blueprint, url_prefix=<span class="string">'/auth'</span>)</div><div class="line">  app.register_blueprint(main_blueprint, static_folder=<span class="string">'static'</span>)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Flask模块化-–-蓝图&quot;&gt;&lt;a href=&quot;#Flask模块化-–-蓝图&quot; class=&quot;headerlink&quot; title=&quot;Flask模块化 – 蓝图&quot;&gt;&lt;/a&gt;Flask模块化 – 蓝图&lt;/h1&gt;&lt;h2 id=&quot;概念简介&quot;&gt;&lt;a href=&quot;#概念简介&quot; class=&quot;headerlink&quot; title=&quot;概念简介&quot;&gt;&lt;/a&gt;概念简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在Django项目中，一个网站可以按模块划分，分别实现几个子APP，然后在settings里注册APP，并在urls里为不同的APP分配不同的url路由。&lt;/p&gt;
&lt;p&gt;Flask也有相似的设计模式，被称为蓝图&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://o8i01ajlj.bkt.clouddn.com/blog/170922/bB3Gl20Dh0.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="flask" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/flask/"/>
    
    
      <category term="Flask" scheme="http://shuaiyy.cn/tags/Flask/"/>
    
      <category term="Web" scheme="http://shuaiyy.cn/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>2016年玩过的游戏</title>
    <link href="http://shuaiyy.cn/2017/09/17/%E7%94%9F%E6%B4%BB-%E7%94%B5%E5%BD%B1%E9%9F%B3%E4%B9%90%E6%97%85%E8%A1%8C%E6%91%84%E5%BD%B1/2016-06-01-Game-of-2016/"/>
    <id>http://shuaiyy.cn/2017/09/17/生活-电影音乐旅行摄影/2016-06-01-Game-of-2016/</id>
    <published>2017-09-17T08:45:30.927Z</published>
    <updated>2017-09-18T02:16:38.191Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="生活" scheme="http://shuaiyy.cn/categories/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="游戏" scheme="http://shuaiyy.cn/categories/%E7%94%9F%E6%B4%BB/%E6%B8%B8%E6%88%8F/"/>
    
    
      <category term="Enjoy" scheme="http://shuaiyy.cn/tags/Enjoy/"/>
    
  </entry>
  
  <entry>
    <title>Flask实战 -- Todo List</title>
    <link href="http://shuaiyy.cn/2017/09/17/%E6%8A%80%E6%9C%AF/Flask%E5%AE%9E%E6%88%98%20--%20Todo%20List/"/>
    <id>http://shuaiyy.cn/2017/09/17/技术/Flask实战 -- Todo List/</id>
    <published>2017-09-16T16:00:00.000Z</published>
    <updated>2017-10-07T13:53:48.579Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flask实战-–-Todo-List"><a href="#Flask实战-–-Todo-List" class="headerlink" title="Flask实战 – Todo List"></a>Flask实战 – Todo List</h1><h2 id="Flask应用设计"><a href="#Flask应用设计" class="headerlink" title="Flask应用设计"></a>Flask应用设计</h2><h3 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h3><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170923/imklm63B3L.png?imageslim" alt="mark"></p><a id="more"></a><h3 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h3><ul><li>项目开发流程</li></ul><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170922/i358HCi82I.png?imageslim" alt="mark"></p><ul><li><p>后端开发流程</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170922/4F4EDB5B1b.png?imageslim" alt="mark"></p></li></ul><h3 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h3><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170922/67kG573g6C.png?imageslim" alt="mark"></p><p><strong>开发技术</strong></p><ul><li>前端：Bootstrap</li><li>后端：Flask</li><li>数据库：MongoDB</li></ul><p><strong>插件扩展</strong></p><ul><li>Flask-MongoEngine</li><li>Flask-Script</li><li>Flask-WTF</li></ul><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170922/jlm6IeH66K.png?imageslim" alt="mark"></p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170926/a0FeiBHcA3.png?imageslim" alt="mark"></p><h3 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h3><ul><li>mongo orm 对象</li><li>model_form 通过类自动生成对应的表单</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> app <span class="keyword">import</span> db</div><div class="line"><span class="keyword">import</span> datetime</div><div class="line"><span class="keyword">from</span> flask_mongoengine.wtf <span class="keyword">import</span> model_form</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todo</span><span class="params">(db.Document)</span>:</span></div><div class="line">    content = db.StringField(required=<span class="keyword">True</span>, max_length=<span class="number">30</span>)</div><div class="line">    time = db.DateTimeField(default=datetime.datetime.now)</div><div class="line">    status = db.IntField(default=<span class="number">0</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">"content:&#123;&#125; time:&#123;&#125; status:&#123;&#125;"</span>.format(self.content, self.time, self.status)</div><div class="line"></div><div class="line">TodoFrom = model_form(Todo)</div></pre></td></tr></table></figure><h2 id="前端模板"><a href="#前端模板" class="headerlink" title="前端模板"></a>前端模板</h2><ul><li><p>pycharm识别指定模板语法</p><p><strong>ctrl + alt + s</strong> 搜索template，在Python template下选择jinja2</p></li><li><p>pycharm模板文件自动引用</p><p><strong>ctrl + alt + s</strong>  搜索 project， 在project structure 里面的选项卡mark template director。</p><p>或右键templates文件夹，mark as ，template directory</p></li><li><p>基类模板</p><ul><li>静态文件引用，反向url</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&#123;% raw %&#125;</div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for('static',filename='bootstrap.min.css') &#125;&#125;"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for('static',filename='index.css') &#125;&#125;"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header clearfix"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"text-muted"</span>&gt;</span>Todo<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"jumbotron"</span>&gt;</span></div><div class="line">        &#123;% block content %&#125;</div><div class="line">        &#123;% endblock %&#125;</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">      <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&amp;copy; xxx.com 2017<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!-- /container --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div><div class="line">&#123;% endraw %&#125;</div></pre></td></tr></table></figure></li><li><p>index页面</p><ul><li>表单的csrf_token</li><li>表单的error信息，<code>form.errors.content</code></li><li><p>datetime时间对象格式化输出</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">&#123;% raw %&#125;</div><div class="line">&#123;% extends "base.html" %&#125;</div><div class="line">&#123;% block content %&#125;</div><div class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"input-group"</span> <span class="attr">action</span>=<span class="string">"/add"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">      &#123;&#123; form.hidden_tag() &#125;&#125;</div><div class="line">      &#123;&#123; form.content(class="form-control") &#125;&#125;</div><div class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-btn"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>Add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">  &#123;% for error in form.errors.content %&#125;</div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; error &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  &#123;% endfor %&#125;</div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Todo List<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">      &#123;% if todos %&#125;</div><div class="line">          <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table"</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">thead</span>&gt;</span></div><div class="line">                  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">                      <span class="tag">&lt;<span class="name">th</span>&gt;</span>content<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">                      <span class="tag">&lt;<span class="name">th</span>&gt;</span>status<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">                      <span class="tag">&lt;<span class="name">th</span>&gt;</span>time<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">                      <span class="tag">&lt;<span class="name">th</span>&gt;</span>operate<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">                  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">              <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></div><div class="line">                 &#123;% for todo in todos %&#125;</div><div class="line">                      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">                          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; todo.content &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">                          <span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">                              &#123;% if todo.status == 1 %&#125;</div><div class="line">                              已完成</div><div class="line">                              &#123;% else %&#125;</div><div class="line">                              未完成</div><div class="line">                              &#123;% endif %&#125;</div><div class="line">                          <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">                          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; todo.time.strftime('%H:%M %d-%m-%Y') &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">                          &#123;% if todo.status == 1 %&#125;</div><div class="line">                              <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/undone/&#123;&#123; todo.id &#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>Undone<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">                          &#123;% else %&#125;</div><div class="line">                              <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/done/&#123;&#123; todo.id &#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>Done<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">                          &#123;% endif %&#125;</div><div class="line">                          <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/delete/&#123;&#123; todo.id &#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"btn btn-danger"</span>&gt;</span>Delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"></div><div class="line">                      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">                 &#123;% endfor %&#125;</div><div class="line">              <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">  &#123;% else %&#125;</div><div class="line">          <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"text-info"</span>&gt;</span>No todos,please add<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">  &#123;% endif %&#125;</div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">&#123;% endblock %&#125;</div><div class="line">&#123;% endraw %&#125;</div></pre></td></tr></table></figure></li></ul></li><li><p>404页面</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;% raw %&#125;</div><div class="line">  &#123;% extends <span class="string">"base.html"</span> %&#125;</div><div class="line">  &#123;% block content %&#125;</div><div class="line"> &lt;h2 class="label-warning"&gt;Not Found&lt;/h2&gt;</div><div class="line">  &#123;% endblock %&#125;</div><div class="line">&#123;% endraw %&#125;</div></pre></td></tr></table></figure></li></ul><h2 id="app配置和初始化"><a href="#app配置和初始化" class="headerlink" title="app配置和初始化"></a>app配置和初始化</h2><ul><li><p>配置文件<code>config.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">SECRET_KEY = <span class="string">"asdadawefda"</span></div><div class="line">MONGODB_SETTINGS = &#123;<span class="string">'DB'</span>: <span class="string">'todo'</span>&#125;</div><div class="line">WTF_CSRF_ENABLED = <span class="keyword">False</span> <span class="comment"># 单元测试post表单时，时取消csrf验证，</span></div></pre></td></tr></table></figure><p>​</p></li><li><p>在app的<code>__init__.py</code>里定义app对象和创建数据库连接，使用配置文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</div><div class="line"><span class="keyword">from</span> flask.ext.mongoengine <span class="keyword">import</span> MongoEngine</div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line">app.config.from_object(<span class="string">'config'</span>)</div><div class="line">db = MongoEngine(app)</div><div class="line"></div><div class="line"> <span class="keyword">from</span> app <span class="keyword">import</span> views,models</div></pre></td></tr></table></figure></li><li><p>或者使用一个工厂方法注册所有APP的组件，避免全局变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># __init__.py</span></div><div class="line"><span class="keyword">from</span> os <span class="keyword">import</span> path</div><div class="line"><span class="keyword">from</span> flask_bootstrap <span class="keyword">import</span> Bootstrap</div><div class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</div><div class="line"><span class="keyword">from</span> flask_login <span class="keyword">import</span> LoginManager, current_user</div><div class="line"><span class="keyword">from</span> flask_pagedown <span class="keyword">import</span> PageDown</div><div class="line"><span class="keyword">from</span> flask_gravatar <span class="keyword">import</span> Gravatar</div><div class="line"><span class="keyword">from</span> flask_babel <span class="keyword">import</span> Babel, gettext <span class="keyword">as</span> _</div><div class="line"><span class="keyword">from</span> config <span class="keyword">import</span> config</div><div class="line"></div><div class="line">basedir = path.abspath(path.dirname(__file__))</div><div class="line"></div><div class="line">db = SQLAlchemy()</div><div class="line">babel = Babel()</div><div class="line">bootstrap = Bootstrap()</div><div class="line">pagedown = PageDown()</div><div class="line">login_manager = LoginManager()</div><div class="line">login_manager.session_protection = <span class="string">'strong'</span></div><div class="line">login_manager.login_view = <span class="string">'auth.login'</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_app</span><span class="params">(config_name=<span class="string">'default'</span>)</span>:</span></div><div class="line">    app = Flask(__name__)</div><div class="line">    app.config.from_object(config[config_name])</div><div class="line"></div><div class="line"></div><div class="line">    db.init_app(app)</div><div class="line">    bootstrap.init_app(app)</div><div class="line">    login_manager.init_app(app)</div><div class="line">    pagedown.init_app(app)</div><div class="line"></div><div class="line">    babel.init_app(app)</div><div class="line">    Gravatar(app, size=<span class="number">64</span>)</div><div class="line"></div><div class="line">    <span class="keyword">from</span> auth <span class="keyword">import</span> auth <span class="keyword">as</span> auth_blueprint</div><div class="line">    <span class="keyword">from</span> main <span class="keyword">import</span> main <span class="keyword">as</span> main_blueprint</div><div class="line"></div><div class="line">    app.register_blueprint(auth_blueprint, url_prefix=<span class="string">'/auth'</span>)</div><div class="line">    app.register_blueprint(main_blueprint, static_folder=<span class="string">'static'</span>)</div><div class="line"></div><div class="line"><span class="meta">    @app.template_test('current_link')</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_current_link</span><span class="params">(link)</span>:</span></div><div class="line">        <span class="keyword">return</span> link == request.path</div><div class="line"></div><div class="line"><span class="meta">    @babel.localeselector</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_locale</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">return</span> current_user.locale</div><div class="line"></div><div class="line">    <span class="keyword">return</span> app</div></pre></td></tr></table></figure><p>​</p></li></ul><h2 id="实现查询、保存、更新、删除功能"><a href="#实现查询、保存、更新、删除功能" class="headerlink" title="实现查询、保存、更新、删除功能"></a>实现查询、保存、更新、删除功能</h2><ul><li>视图views.py</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> app <span class="keyword">import</span> app</div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template,request</div><div class="line"><span class="keyword">from</span> models <span class="keyword">import</span> Todo, TodoForm</div><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 查询</span></div><div class="line"><span class="meta">@app.route('/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></div><div class="line">    form = TodoForm()</div><div class="line">    todos = Todo.objects.order_by(<span class="string">'-time'</span>)</div><div class="line">    <span class="keyword">return</span> render_template(<span class="string">"index.html"</span>,todos=todos,form=form)</div><div class="line"></div><div class="line"><span class="comment"># 增加</span></div><div class="line"><span class="meta">@app.route('/add', methods=['POST',])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">()</span>:</span></div><div class="line">    form = TodoForm(request.form)</div><div class="line">    <span class="keyword">if</span> form.validate():</div><div class="line">        content = form.content.data</div><div class="line">        todo = Todo(content=content,time=datetime.now())</div><div class="line">        todo.save()</div><div class="line">    todos = Todo.objects.order_by(<span class="string">'-time'</span>)</div><div class="line">    <span class="keyword">return</span> render_template(<span class="string">"index.html"</span>,todos=todos,form=form)</div><div class="line"></div><div class="line"> <span class="comment"># 修改</span></div><div class="line"><span class="meta">@app.route('/done/&lt;string:todo_id&gt;')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">done</span><span class="params">(todo_id)</span>:</span></div><div class="line">    form = TodoForm()</div><div class="line">    todo = Todo.objects.get_or_404(id=todo_id)</div><div class="line">    todo.update(status=<span class="number">1</span>)</div><div class="line">    todos = Todo.objects.order_by(<span class="string">'-time'</span>)</div><div class="line">    <span class="keyword">return</span> render_template(<span class="string">"index.html"</span>,todos=todos,form=form)</div><div class="line"></div><div class="line">  <span class="comment"># 删除</span></div><div class="line"><span class="meta">@app.route('/delete/&lt;string:todo_id&gt;')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(todo_id)</span>:</span></div><div class="line">    form = TodoForm()</div><div class="line">    todo = Todo.objects.get_or_404(id=todo_id)</div><div class="line">    todo.delete()</div><div class="line">    todos = Todo.objects.order_by(<span class="string">'-time'</span>)</div><div class="line">    <span class="keyword">return</span> render_template(<span class="string">"index.html"</span>,todos=todos,form=form)</div><div class="line"></div><div class="line"><span class="comment"># 404页面</span></div><div class="line"><span class="meta">@app.errorhandler(404)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">not_found</span><span class="params">(error)</span>:</span></div><div class="line">    <span class="keyword">return</span> render_template(<span class="string">'404.html'</span>)</div></pre></td></tr></table></figure><h2 id="改进用户体验"><a href="#改进用户体验" class="headerlink" title="改进用户体验"></a>改进用户体验</h2><ul><li><p>时间降序排列list</p><p><code>todos = Todo.objects.order_by(&#39;-time&#39;)</code></p></li><li><p>格式化时间</p><p>在模板中<code>todo.time.strftime(&#39;%H:%M %d-%m-%Y&#39;)</code></p></li><li><p>404页面</p><p>在视图中使用装饰器<code>@app.errorhandler(404)</code></p></li></ul><h2 id="应用测试"><a href="#应用测试" class="headerlink" title="应用测试"></a>应用测试</h2><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170923/8fiL87BfEh.png?imageslim" alt="mark"></p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170923/1989h47dgF.png?imageslim" alt="mark"></p><h3 id="编写测试用例"><a href="#编写测试用例" class="headerlink" title="编写测试用例"></a>编写测试用例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> unittest</div><div class="line"><span class="keyword">from</span> app <span class="keyword">import</span> app</div><div class="line"><span class="keyword">from</span> app.models <span class="keyword">import</span> Todo</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoTestCase</span><span class="params">(unittest.TestCase)</span>:</span></div><div class="line">    <span class="comment"># 开始测试前执行</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(self)</span>:</span></div><div class="line">        self.app = app.test_client()</div><div class="line">   </div><div class="line">   <span class="comment"># 测试结束后执行</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tearDown</span><span class="params">(self)</span>:</span></div><div class="line">        todos = Todo.objects.all()</div><div class="line">        <span class="keyword">for</span> todo <span class="keyword">in</span> todos:</div><div class="line">            todo.delete()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_index</span><span class="params">(self)</span>:</span></div><div class="line">        rv = self.app.get(<span class="string">'/'</span>)</div><div class="line">        <span class="keyword">assert</span> <span class="string">"Todo"</span> <span class="keyword">in</span> rv.data</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_todo</span><span class="params">(self)</span>:</span></div><div class="line">        self.app.post(<span class="string">'/add'</span>, data = dict(content=<span class="string">"testtodo"</span>))</div><div class="line">        todo = Todo.objects.get_or_404(content=<span class="string">"testtodo"</span>)</div><div class="line">        <span class="keyword">assert</span> todo <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span></div></pre></td></tr></table></figure><ul><li>开始测试前setUp方法先执行</li><li>测试结束后tearDown方法执行</li><li>测试方法以<code>test_</code>开头命名</li><li>测试POST时关闭csrf验证</li><li>执行测试用例 <code>python -m unittest discover</code></li></ul><h3 id="测试覆盖率"><a href="#测试覆盖率" class="headerlink" title="测试覆盖率"></a>测试覆盖率</h3><ul><li>安装coverage <code>pip install coverage</code></li><li>使用命令<code>coverage report</code></li><li>windows下可以右键测试文件，选择run with coverage</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Flask实战-–-Todo-List&quot;&gt;&lt;a href=&quot;#Flask实战-–-Todo-List&quot; class=&quot;headerlink&quot; title=&quot;Flask实战 – Todo List&quot;&gt;&lt;/a&gt;Flask实战 – Todo List&lt;/h1&gt;&lt;h2 id=&quot;Flask应用设计&quot;&gt;&lt;a href=&quot;#Flask应用设计&quot; class=&quot;headerlink&quot; title=&quot;Flask应用设计&quot;&gt;&lt;/a&gt;Flask应用设计&lt;/h2&gt;&lt;h3 id=&quot;功能介绍&quot;&gt;&lt;a href=&quot;#功能介绍&quot; class=&quot;headerlink&quot; title=&quot;功能介绍&quot;&gt;&lt;/a&gt;功能介绍&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://o8i01ajlj.bkt.clouddn.com/blog/170923/imklm63B3L.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="flask" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/flask/"/>
    
    
      <category term="Flask" scheme="http://shuaiyy.cn/tags/Flask/"/>
    
      <category term="Web" scheme="http://shuaiyy.cn/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Flask数据库的修改和迁移</title>
    <link href="http://shuaiyy.cn/2017/09/15/%E6%8A%80%E6%9C%AF/Flask%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BF%AE%E6%94%B9%E5%92%8C%E8%BF%81%E7%A7%BB/"/>
    <id>http://shuaiyy.cn/2017/09/15/技术/Flask数据库的修改和迁移/</id>
    <published>2017-09-14T16:00:00.000Z</published>
    <updated>2017-10-07T13:53:01.904Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flask数据库的修改和迁移"><a href="#Flask数据库的修改和迁移" class="headerlink" title="Flask数据库的修改和迁移"></a>Flask数据库的修改和迁移</h1><blockquote><p>类似django中的<code>manage migrate</code>命令，flask也有类似的插件</p></blockquote><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170922/2C6lkcjha8.png?imageslim" alt="mark"></p><ul><li><p>使用flask插件<code>pip install flask-migrate</code></p></li><li><p>在manage中绑定数据库命令即可</p></li></ul><a id="more"></a>  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># manage.py</span></div><div class="line"><span class="keyword">from</span> model <span class="keyword">import</span> db</div><div class="line"><span class="keyword">from</span> model <span class="keyword">import</span> app</div><div class="line"><span class="keyword">from</span> flask.ext.script <span class="keyword">import</span> Manager</div><div class="line"><span class="keyword">from</span> flask.ext.migrate <span class="keyword">import</span> Migrate, MigrateCommand, upgrade</div><div class="line"></div><div class="line">migrate = Migrate(app,db)</div><div class="line">manager = Manager(app)</div><div class="line">manager.add_command(<span class="string">'db'</span>,MigrateCommand)</div><div class="line"></div><div class="line"><span class="meta">@manage.command</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">deploy</span><span class="params">()</span>:</span></div><div class="line">    upgrade()</div><div class="line">    app.run()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">manager.run()</div></pre></td></tr></table></figure><p>  ​</p><ul><li><p>初始化数据库 <code>python manage.py db init</code></p></li><li><p>检测数据库变化 <code>python manage.py db migrate</code></p></li><li><p>更新数据库表 <code>python manage.py db upgrade</code></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Flask数据库的修改和迁移&quot;&gt;&lt;a href=&quot;#Flask数据库的修改和迁移&quot; class=&quot;headerlink&quot; title=&quot;Flask数据库的修改和迁移&quot;&gt;&lt;/a&gt;Flask数据库的修改和迁移&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;类似django中的&lt;code&gt;manage migrate&lt;/code&gt;命令，flask也有类似的插件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://o8i01ajlj.bkt.clouddn.com/blog/170922/2C6lkcjha8.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;使用flask插件&lt;code&gt;pip install flask-migrate&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在manage中绑定数据库命令即可&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="flask" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/flask/"/>
    
    
      <category term="Flask" scheme="http://shuaiyy.cn/tags/Flask/"/>
    
      <category term="Web" scheme="http://shuaiyy.cn/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Flask Markdown支持</title>
    <link href="http://shuaiyy.cn/2017/09/14/%E6%8A%80%E6%9C%AF/Markdown%20in%20Flask/"/>
    <id>http://shuaiyy.cn/2017/09/14/技术/Markdown in Flask/</id>
    <published>2017-09-13T16:00:00.000Z</published>
    <updated>2017-10-07T13:50:40.008Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Markdown-in-Flask"><a href="#Markdown-in-Flask" class="headerlink" title="Markdown in Flask"></a>Markdown in Flask</h1><p>pip安装markdown，flask-pagedown,可以在编辑内容时实时预览markdown</p><ul><li>需要在form对象中设置相应的field</li><li>需要在前端页面引入pagedown 的js</li><li>pagedown Field对应的开关参数only_input或only_preview</li></ul><a id="more"></a><h2 id="在form中设置Field"><a href="#在form中设置Field" class="headerlink" title="在form中设置Field"></a>在form中设置Field</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># forms.py</span></div><div class="line"><span class="keyword">from</span> flask.ext.pagedown.fields <span class="keyword">import</span> PageDownField</div><div class="line"><span class="keyword">from</span> flask.ext.wtf <span class="keyword">import</span> Form</div><div class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> StringField, SubmitField</div><div class="line"><span class="keyword">from</span> wtforms.validators <span class="keyword">import</span> DataRequired</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostForm</span><span class="params">(Form)</span>:</span></div><div class="line">    title = StringField(label=_(<span class="string">u"标题"</span>), validators=[DataRequired()])</div><div class="line">    body = PageDownField(label=_(<span class="string">u"正文"</span>), validators=[DataRequired()])</div><div class="line">    submit = SubmitField(_(<span class="string">u"发表"</span>))</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommentForm</span><span class="params">(Form)</span>:</span></div><div class="line">    body = PageDownField(label=_(<span class="string">u'评论'</span>), validators=[DataRequired()])</div><div class="line">    submit = SubmitField(_(<span class="string">u'发表'</span>))</div></pre></td></tr></table></figure><h2 id="在模板中使用"><a href="#在模板中使用" class="headerlink" title="在模板中使用"></a>在模板中使用</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&#123;% raw %&#125;</div><div class="line">&#123;% extends 'base.html' %&#125;</div><div class="line">&#123;% import "bootstrap/wtf.html" as wtf %&#125;</div><div class="line"></div><div class="line">&#123;% block scripts %&#125;</div><div class="line">    &#123;&#123; super() &#125;&#125;</div><div class="line">    &#123;&#123; pagedown.include_pagedown() &#125;&#125;</div><div class="line">&#123;% endblock %&#125;</div><div class="line"></div><div class="line">&#123;% block page_body %&#125;</div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></div><div class="line">            &#123;&#123; form.hidden_tag() &#125;&#125;</div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">                &#123;&#123; form.title(class="form-control", placeholder=_("请输入文章标题")  ) &#125;&#125;</div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">                &#123;&#123; form.body(only_input=True,rows=10,class="form-control") &#125;&#125;</div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">                &#123;&#123; form.body(only_preview=True) &#125;&#125;</div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">                &#123;&#123; form.submit(class="btn btn-primary") &#125;&#125;</div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">&#123;% endblock %&#125;</div><div class="line">&#123;% endraw %&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Markdown-in-Flask&quot;&gt;&lt;a href=&quot;#Markdown-in-Flask&quot; class=&quot;headerlink&quot; title=&quot;Markdown in Flask&quot;&gt;&lt;/a&gt;Markdown in Flask&lt;/h1&gt;&lt;p&gt;pip安装markdown，flask-pagedown,可以在编辑内容时实时预览markdown&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要在form对象中设置相应的field&lt;/li&gt;
&lt;li&gt;需要在前端页面引入pagedown 的js&lt;/li&gt;
&lt;li&gt;pagedown Field对应的开关参数only_input或only_preview&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="flask" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/flask/"/>
    
    
      <category term="Flask" scheme="http://shuaiyy.cn/tags/Flask/"/>
    
      <category term="Web" scheme="http://shuaiyy.cn/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Gitbook生成PDF电子书</title>
    <link href="http://shuaiyy.cn/2017/09/14/%E6%8A%80%E6%9C%AF/Gitbook%E7%94%9F%E6%88%90PDF%E7%94%B5%E5%AD%90%E4%B9%A6/"/>
    <id>http://shuaiyy.cn/2017/09/14/技术/Gitbook生成PDF电子书/</id>
    <published>2017-09-13T16:00:00.000Z</published>
    <updated>2017-10-07T13:52:20.696Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Gitbook生成PDF电子书"><a href="#Gitbook生成PDF电子书" class="headerlink" title="Gitbook生成PDF电子书"></a>Gitbook生成PDF电子书</h1><blockquote><p>看到几个不错的开源书籍，发布在gitbook上，然而gitbook很卡，网页体验不好。。。</p></blockquote><p>哇塞，在gitbook官网<a href="https://www.gitbook.com/explore?lang=zh" target="_blank" rel="external">找书</a>，部分有下载按钮，应该是作者编译提供的。</p><p>好吧，这次就不自己折腾了。</p><a id="more"></a><ul><li><h4 id="problem-solving-with-algorithms-and-data-structure-using-python-中文版"><a href="#problem-solving-with-algorithms-and-data-structure-using-python-中文版" class="headerlink" title="problem-solving-with-algorithms-and-data-structure-using-python 中文版"></a><a href="https://facert.gitbooks.io/python-data-structure-cn/" target="_blank" rel="external">problem-solving-with-algorithms-and-data-structure-using-python 中文版</a></h4></li><li><h4 id="编程之法：面试和算法心得"><a href="#编程之法：面试和算法心得" class="headerlink" title="编程之法：面试和算法心得 "></a><a href="https://www.gitbook.com/book/wizardforcel/the-art-of-programming-by-july/details" target="_blank" rel="external">编程之法：面试和算法心得 </a></h4></li><li><h4 id="程序员的自我修养"><a href="#程序员的自我修养" class="headerlink" title="程序员的自我修养 "></a><a href="https://www.gitbook.com/book/leohxj/a-programmer-prepares/details" target="_blank" rel="external">程序员的自我修养 </a></h4></li><li><h4 id="LeetCode题解"><a href="#LeetCode题解" class="headerlink" title="LeetCode题解 "></a><a href="https://www.gitbook.com/book/siddontang/leetcode-solution/details" target="_blank" rel="external">LeetCode题解 </a></h4></li></ul><p>参考<a href="http://blog.csdn.net/zl1zl2zl3/article/details/71123902" target="_blank" rel="external">教程</a></p><ul><li>安装nodejs</li><li>安装gitbook-cli</li><li>安装gitbook</li><li>下载phantomjs</li><li>下载安装calibre2</li><li>配置环境变量</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Gitbook生成PDF电子书&quot;&gt;&lt;a href=&quot;#Gitbook生成PDF电子书&quot; class=&quot;headerlink&quot; title=&quot;Gitbook生成PDF电子书&quot;&gt;&lt;/a&gt;Gitbook生成PDF电子书&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;看到几个不错的开源书籍，发布在gitbook上，然而gitbook很卡，网页体验不好。。。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;哇塞，在gitbook官网&lt;a href=&quot;https://www.gitbook.com/explore?lang=zh&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;找书&lt;/a&gt;，部分有下载按钮，应该是作者编译提供的。&lt;/p&gt;
&lt;p&gt;好吧，这次就不自己折腾了。&lt;/p&gt;
    
    </summary>
    
      <category term="折腾" scheme="http://shuaiyy.cn/categories/%E6%8A%98%E8%85%BE/"/>
    
      <category term="电子书" scheme="http://shuaiyy.cn/categories/%E6%8A%98%E8%85%BE/%E7%94%B5%E5%AD%90%E4%B9%A6/"/>
    
    
      <category term="git" scheme="http://shuaiyy.cn/tags/git/"/>
    
      <category term="gitbook" scheme="http://shuaiyy.cn/tags/gitbook/"/>
    
  </entry>
  
  <entry>
    <title>Flask-Gravatar用户头像</title>
    <link href="http://shuaiyy.cn/2017/09/13/%E6%8A%80%E6%9C%AF/Flask-Gravatar/"/>
    <id>http://shuaiyy.cn/2017/09/13/技术/Flask-Gravatar/</id>
    <published>2017-09-12T16:00:00.000Z</published>
    <updated>2017-10-07T13:49:12.875Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flask-Gravatar"><a href="#Flask-Gravatar" class="headerlink" title="Flask-Gravatar"></a>Flask-Gravatar</h1><blockquote><p>关于Gravatar：</p><p>我们在很多博客或者网站留言，评论的时候会看到有的人头像很酷很个性化，但是这个博客和网站本身并没有提供设置头像的功能，感觉有点神奇，那么是怎么做到的呢？其实这是使用了Gravatar。</p><p>Gravatar的概念首先是在国外的独立WordPress博客中兴起的，当你到任何一个支持Gravatar的网站留言时，这个网站都会根据你所提供的Email地址为你显示出匹配的头像。当然，这个头像，是需要你事先到Gravatar的网站注册并上传的，否则，在这个网站上，就只会显示成一个默认的头像。</p></blockquote><p>flask-gravatar扩展插件，官方文档<a href="http://pythonhosted.org/Flask-Gravatar/" target="_blank" rel="external">here</a></p><a id="more"></a><p><code>pip install Flask-Gravatar</code></p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># app/__init__.py 或者flask app的工厂方法</span></div><div class="line"><span class="keyword">from</span> flask_gravatar <span class="keyword">import</span> Gravatar</div><div class="line">gravatar = Gravatar(app,</div><div class="line">                    size=<span class="number">100</span>,</div><div class="line">                    rating=<span class="string">'g'</span>,</div><div class="line">                    default=<span class="string">'retro'</span>,</div><div class="line">                    force_default=<span class="keyword">False</span>,</div><div class="line">                    force_lower=<span class="keyword">False</span>,</div><div class="line">                    use_ssl=<span class="keyword">False</span>,</div><div class="line">                    base_url=<span class="keyword">None</span>)</div></pre></td></tr></table></figure><h2 id="在模板中使用"><a href="#在模板中使用" class="headerlink" title="在模板中使用"></a>在模板中使用</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;% raw %&#125;</div><div class="line"> <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"media-object img-circle"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; comment.author.email | gravatar &#125;&#125;"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 可以加入参数 --&gt;</span></div><div class="line">&#123;&#123; 'zzz.sochi@gmail.com' | gravatar(size=200, rating='x') &#125;&#125;</div><div class="line">&#123;% endraw %&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Flask-Gravatar&quot;&gt;&lt;a href=&quot;#Flask-Gravatar&quot; class=&quot;headerlink&quot; title=&quot;Flask-Gravatar&quot;&gt;&lt;/a&gt;Flask-Gravatar&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;关于Gravatar：&lt;/p&gt;
&lt;p&gt;我们在很多博客或者网站留言，评论的时候会看到有的人头像很酷很个性化，但是这个博客和网站本身并没有提供设置头像的功能，感觉有点神奇，那么是怎么做到的呢？其实这是使用了Gravatar。&lt;/p&gt;
&lt;p&gt;Gravatar的概念首先是在国外的独立WordPress博客中兴起的，当你到任何一个支持Gravatar的网站留言时，这个网站都会根据你所提供的Email地址为你显示出匹配的头像。当然，这个头像，是需要你事先到Gravatar的网站注册并上传的，否则，在这个网站上，就只会显示成一个默认的头像。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;flask-gravatar扩展插件，官方文档&lt;a href=&quot;http://pythonhosted.org/Flask-Gravatar/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="flask" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/flask/"/>
    
    
      <category term="Flask" scheme="http://shuaiyy.cn/tags/Flask/"/>
    
      <category term="Web" scheme="http://shuaiyy.cn/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Flask 国际化语言支持</title>
    <link href="http://shuaiyy.cn/2017/09/12/%E6%8A%80%E6%9C%AF/Flask%20%E5%9B%BD%E9%99%85%E5%8C%96%E8%AF%AD%E8%A8%80%E6%94%AF%E6%8C%81/"/>
    <id>http://shuaiyy.cn/2017/09/12/技术/Flask 国际化语言支持/</id>
    <published>2017-09-11T16:00:00.000Z</published>
    <updated>2017-10-07T13:48:11.330Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flask-国际化语言支持"><a href="#Flask-国际化语言支持" class="headerlink" title="Flask 国际化语言支持"></a>Flask 国际化语言支持</h1><blockquote><p>flask-babel扩展</p></blockquote><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170927/5m5BAabgBL.png?imageslim" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Flask-国际化语言支持&quot;&gt;&lt;a href=&quot;#Flask-国际化语言支持&quot; class=&quot;headerlink&quot; title=&quot;Flask 国际化语言支持&quot;&gt;&lt;/a&gt;Flask 国际化语言支持&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;flask-babel扩展
      
    
    </summary>
    
      <category term="技术" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="flask" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/flask/"/>
    
    
      <category term="Flask" scheme="http://shuaiyy.cn/tags/Flask/"/>
    
      <category term="Web" scheme="http://shuaiyy.cn/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Flask 分页</title>
    <link href="http://shuaiyy.cn/2017/09/11/%E6%8A%80%E6%9C%AF/flask%20%E5%88%86%E9%A1%B5/"/>
    <id>http://shuaiyy.cn/2017/09/11/技术/flask 分页/</id>
    <published>2017-09-10T16:00:00.000Z</published>
    <updated>2017-10-07T13:47:32.783Z</updated>
    
    <content type="html"><![CDATA[<h1 id="flask-分页"><a href="#flask-分页" class="headerlink" title="flask 分页"></a>flask 分页</h1><h2 id="数据伪装"><a href="#数据伪装" class="headerlink" title="数据伪装"></a>数据伪装</h2><blockquote><p>使用 forgery_py, 安装 pip install forgerypy</p></blockquote><p>生成大量符合条件的随机数据,用于开发和测试，此处是用于分页的数据</p><p>生成大量随机的符合条件的数据</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170927/fh241kKeAb.png?imageslim" alt="mark"></p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> forgery_py <span class="keyword">import</span> basic, lorem_ipsum, name, internet, date</div><div class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</div><div class="line"></div><div class="line">Post(title=lorem_ipsum.title(),</div><div class="line">                    body=lorem_ipsum.paragraphs(),</div><div class="line">                    created=date.date(),</div><div class="line">                    author=func_author())</div><div class="line"></div><div class="line">User(name=internet.user_name(),</div><div class="line">                    email=internet.email_address(),</div><div class="line">                    password=basic.text(<span class="number">6</span>, at_least=<span class="number">6</span>, spaces=<span class="keyword">False</span>),</div><div class="line">                    role=guests)</div></pre></td></tr></table></figure><h2 id="分页的视图逻辑"><a href="#分页的视图逻辑" class="headerlink" title="分页的视图逻辑"></a>分页的视图逻辑</h2><ul><li><p>要有page_index参数，即当前是第几页</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@main.route('/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># posts=Post.query.all()</span></div><div class="line"></div><div class="line">    page_index = request.args.get(<span class="string">'page'</span>, <span class="number">1</span>, type=int)</div><div class="line">    query = Post.query.order_by(Post.created.desc())</div><div class="line">    pagination = query.paginate(page_index, per_page=<span class="number">20</span>, error_out=<span class="keyword">False</span>)</div><div class="line">    posts = pagination.items</div><div class="line"></div><div class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>,</div><div class="line">                           title=_(<span class="string">u'欢迎来到Ray的博客'</span>),</div><div class="line">                           posts=posts,</div><div class="line">                           pagination=pagination)</div></pre></td></tr></table></figure></li></ul><h2 id="模板中使用分页"><a href="#模板中使用分页" class="headerlink" title="模板中使用分页"></a>模板中使用分页</h2><ul><li><p>使用Bootstrap提供的pagination</p><p>默认的页面参数是<code>?page=n</code></p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170927/4DgL0D3Ldd.png?imageslim" alt="mark"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&#123;% raw %&#125;</div><div class="line">&#123;% extends 'base.html' %&#125;</div><div class="line">&#123;% from "bootstrap/pagination.html" import render_pagination %&#125;</div><div class="line"></div><div class="line">&#123;% block page_body %&#125;</div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for('main.edit') &#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>发表新文章<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- 展示items --&gt;</span></div><div class="line">        &#123;% for post in posts %&#125;</div><div class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for('main.post', id = post.id) &#125;&#125;"</span>&gt;</span>&#123;&#123; post.title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">                &#123;&#123; post.body_html|safe &#125;&#125;</div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        &#123;% endfor %&#125;</div><div class="line">   <span class="comment">&lt;!-- 分页栏 --&gt;</span></div><div class="line">        &#123;% if pagination %&#125;</div><div class="line">            &#123;&#123; render_pagination(pagination) &#125;&#125;</div><div class="line">        &#123;% endif %&#125;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">&#123;% endblock %&#125;</div><div class="line">&#123;% endraw%&#125;</div></pre></td></tr></table></figure><p>​</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;flask-分页&quot;&gt;&lt;a href=&quot;#flask-分页&quot; class=&quot;headerlink&quot; title=&quot;flask 分页&quot;&gt;&lt;/a&gt;flask 分页&lt;/h1&gt;&lt;h2 id=&quot;数据伪装&quot;&gt;&lt;a href=&quot;#数据伪装&quot; class=&quot;headerlink&quot; title=&quot;数据伪装&quot;&gt;&lt;/a&gt;数据伪装&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;使用 forgery_py, 安装 pip install forgerypy&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;生成大量符合条件的随机数据,用于开发和测试，此处是用于分页的数据&lt;/p&gt;
&lt;p&gt;生成大量随机的符合条件的数据&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o8i01ajlj.bkt.clouddn.com/blog/170927/fh241kKeAb.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="flask" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/flask/"/>
    
    
      <category term="Flask" scheme="http://shuaiyy.cn/tags/Flask/"/>
    
      <category term="Web" scheme="http://shuaiyy.cn/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Flask 应用测试</title>
    <link href="http://shuaiyy.cn/2017/09/10/%E6%8A%80%E6%9C%AF/Flask%20%E4%BB%A3%E7%A0%81%E6%B5%8B%E8%AF%95/"/>
    <id>http://shuaiyy.cn/2017/09/10/技术/Flask 代码测试/</id>
    <published>2017-09-09T16:00:00.000Z</published>
    <updated>2017-10-07T13:46:23.897Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flask-应用测试"><a href="#Flask-应用测试" class="headerlink" title="Flask 应用测试"></a>Flask 应用测试</h1><h2 id="测试内容"><a href="#测试内容" class="headerlink" title="测试内容"></a>测试内容</h2><ul><li>模型测试</li><li>逻辑测试</li><li>view测试</li></ul><h2 id="unittest"><a href="#unittest" class="headerlink" title="unittest"></a>unittest</h2><ul><li>测试文件以test_开头命名</li><li>每个测试文件都要实现一个测试用例</li><li>测试用例内的方法命名也是test_开头命名</li><li>测试用例有setUp和tearDown方法</li></ul><a id="more"></a><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a><strong>目录结构</strong></h3><p>– <code>tests</code></p><p>—-<code>__init__.py</code></p><p>—-<code>test_models.py</code></p><h3 id="为测试单独提供config参数"><a href="#为测试单独提供config参数" class="headerlink" title="为测试单独提供config参数"></a><strong>为测试单独提供config参数</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># config.py</span></div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line">basedir = os.path.abspath(os.path.dirname(__file__))</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Config</span>:</span></div><div class="line">    SECRET_KEY = os.environ.get(<span class="string">'SECRET_KEY'</span>) <span class="keyword">or</span> <span class="string">'\x03d\xf4\x95J\x15\xa4B\xfb\xc0\xaf \xd1A[j$&#125;\x18\x16a\xe7\xd0\xec'</span></div><div class="line">    SSL_DISABLE = <span class="keyword">False</span></div><div class="line">    SQLALCHEMY_COMMIT_ON_TEARDOWN = <span class="keyword">True</span></div><div class="line">    SQLALCHEMY_RECORD_QUERIES = <span class="keyword">True</span></div><div class="line">    BABEL_DEFAULT_LOCALE = <span class="string">'zh'</span></div><div class="line"></div><div class="line"><span class="meta">    @staticmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init_app</span><span class="params">(app)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DevelopmentConfig</span><span class="params">(Config)</span>:</span></div><div class="line">    DEBUG = <span class="keyword">True</span></div><div class="line"></div><div class="line">    SQLALCHEMY_DATABASE_URI = os.environ.get(<span class="string">'DEV_DATABASE_URL'</span>) <span class="keyword">or</span> \</div><div class="line">                              <span class="string">'sqlite:///'</span> + os.path.join(basedir, <span class="string">'data-dev.sqlite'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestingConfig</span><span class="params">(Config)</span>:</span></div><div class="line">    TESTING = <span class="keyword">True</span></div><div class="line">    SERVER_NAME = <span class="string">'localhost:5000'</span></div><div class="line">    SQLALCHEMY_DATABASE_URI = os.environ.get(<span class="string">'TEST_DATABASE_URL'</span>) <span class="keyword">or</span> \</div><div class="line">                              <span class="string">'sqlite:///'</span> + os.path.join(basedir, <span class="string">'data-test.sqlite'</span>)</div><div class="line">    WTF_CSRF_ENABLED = <span class="keyword">False</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Production</span><span class="params">(Config)</span>:</span></div><div class="line">    DEBUG=<span class="keyword">True</span></div><div class="line">    SQLALCHEMY_DATABASE_URI = os.environ.get(<span class="string">'DEV_DATABASE_URL'</span>) <span class="keyword">or</span> \</div><div class="line">                              <span class="string">'postgresql://ray:?@localhost/blog-db'</span></div><div class="line"></div><div class="line"></div><div class="line">config = &#123;</div><div class="line">    <span class="string">'development'</span>: DevelopmentConfig,</div><div class="line">    <span class="string">'testing'</span>: TestingConfig,</div><div class="line">    <span class="string">'production'</span>: Production,</div><div class="line">    <span class="string">'default'</span>: DevelopmentConfig</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>在flask app的工厂方法中使用参数来选择不同的配置</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># app/__init__.py</span></div><div class="line"><span class="keyword">from</span> config <span class="keyword">import</span> config</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_app</span><span class="params">(config_name=<span class="string">'default'</span>)</span>:</span></div><div class="line">    app = Flask(__name__)</div><div class="line">    app.config.from_object(config[config_name])</div></pre></td></tr></table></figure><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><ul><li><p>Flask提供了测试客户端</p></li><li><p>测试models对象增删查改</p><p>开始测试方法前连接数据库，清空，重建表</p><p>测试结束后关闭数据库连接</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># test_models.py</span></div><div class="line"><span class="keyword">import</span> unittest</div><div class="line"><span class="keyword">from</span> app <span class="keyword">import</span> create_app, db</div><div class="line"><span class="keyword">from</span> app.models <span class="keyword">import</span> User, Role</div><div class="line"><span class="keyword">from</span> forgery_py <span class="keyword">import</span> internet, basic</div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> url_for</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelTest</span><span class="params">(unittest.TestCase)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(self)</span>:</span></div><div class="line">        self.app = create_app(<span class="string">'testing'</span>)</div><div class="line">        self.app_ctx = self.app.app_context()</div><div class="line">        self.app_ctx.push()</div><div class="line"></div><div class="line">        self.client = self.app.test_client()</div><div class="line">        db.drop_all()</div><div class="line">        db.create_all()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tearDown</span><span class="params">(self)</span>:</span></div><div class="line">        self.app_ctx.pop()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_user_role_set</span><span class="params">(self)</span>:</span></div><div class="line">        user = User(name=internet.user_name(),</div><div class="line">                    email=internet.email_address(),</div><div class="line">                    password=basic.text())</div><div class="line"></div><div class="line">        db.session.add(user)</div><div class="line">        db.session.commit()</div><div class="line"></div><div class="line">        self.assertEqual(user.role.name, <span class="string">'Guests'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_index_page</span><span class="params">(self)</span>:</span></div><div class="line">        rep = self.client.get(url_for(<span class="string">'main.index'</span>))</div><div class="line">        self.assertEqual(rep.status_code, <span class="number">200</span>)</div></pre></td></tr></table></figure><h2 id="nose"><a href="#nose" class="headerlink" title="nose"></a>nose</h2><blockquote><p> <strong>nose extends unittest to make testing easier.</strong></p></blockquote><h2 id="web-ui-测试"><a href="#web-ui-测试" class="headerlink" title="web ui 测试"></a>web ui 测试</h2><blockquote><p>安装selenium，chrom driver chrome， Firefox</p></blockquote><ul><li><p>在views里实现一个关闭flask进程的功能，当测试结束后，访问该url后flask退出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> current_app</div><div class="line"></div><div class="line"><span class="meta">@main.route('/shoutdown')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">shutdown</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> current_app.testing:</div><div class="line">        abort(<span class="number">404</span>)</div><div class="line">    shoutdown = request.environ.get(<span class="string">'werkzeug.server.shutdown'</span>)</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> shoutdown:</div><div class="line">        abort(<span class="number">500</span>)</div><div class="line"></div><div class="line">    shoutdown()</div><div class="line">    <span class="keyword">return</span> <span class="string">u'正在关闭服务端进程...'</span></div></pre></td></tr></table></figure></li><li><p>将关于同一个页面的selenium操作封装到一个对象里，以方便复用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginPage</span><span class="params">(object)</span>:</span></div><div class="line">    client = <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, c)</span>:</span></div><div class="line">        self.client = c</div><div class="line"></div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">title</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.client.title</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_user_name</span><span class="params">(self, name)</span>:</span></div><div class="line">        user_input = self.client.find_element_by_name(<span class="string">'username'</span>)</div><div class="line">        user_input.send_keys(name)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_pwd</span><span class="params">(self, pwd)</span>:</span></div><div class="line">        pwd_input = self.client.find_element_by_name(<span class="string">'password'</span>)</div><div class="line">        pwd_input.send_keys(pwd)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">submit</span><span class="params">(self)</span>:</span></div><div class="line">        submit = self.client.find_element_by_name(<span class="string">'submit'</span>)</div><div class="line">        submit.click()</div></pre></td></tr></table></figure></li><li><p>测试登录的脚本</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># test_selenium.py</span></div><div class="line"></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"><span class="keyword">import</span> unittest</div><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</div><div class="line"><span class="keyword">from</span> app <span class="keyword">import</span> create_app, db</div><div class="line"><span class="keyword">from</span> app.models <span class="keyword">import</span> Role, User</div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">from</span> forgery_py <span class="keyword">import</span> internet, basic</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SeleniumTest</span><span class="params">(unittest.TestCase)</span>:</span></div><div class="line">    client = <span class="keyword">None</span></div><div class="line">    app_ctx = <span class="keyword">None</span></div><div class="line"></div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUpClass</span><span class="params">(cls)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            cls.client = webdriver.Firefox()</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            <span class="keyword">pass</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> cls.client:</div><div class="line">            cls.app = create_app(<span class="string">'testing'</span>)</div><div class="line">            cls.app_ctx = cls.app.app_context()</div><div class="line">            cls.app_ctx.push()</div><div class="line"></div><div class="line">            db.drop_all()</div><div class="line">            db.create_all()</div><div class="line">            Role.seed()</div><div class="line">            threading.Thread(target=cls.app.run).start()</div><div class="line"></div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tearDownClass</span><span class="params">(cls)</span>:</span></div><div class="line">        <span class="comment"># 在服务端关闭flask进程</span></div><div class="line">        cls.client.get(<span class="string">'http://localhost:5000/shutdown'</span>)</div><div class="line">        cls.client.close()</div><div class="line"></div><div class="line">        db.session.remove()</div><div class="line">        cls.app_ctx.pop()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.client <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            self.skipTest(<span class="string">u'略过测试'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tearDown</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_user_login</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">from</span> login_page <span class="keyword">import</span> LoginPage</div><div class="line">        new_user = User(name=internet.user_name(),</div><div class="line">                        email=internet.email_address(),</div><div class="line">                        password=basic.text())</div><div class="line">        db.session.add(new_user)</div><div class="line">        db.session.commit()</div><div class="line"></div><div class="line">        page = LoginPage(self.client)</div><div class="line">        self.client.get(<span class="string">'http://localhost:5000/auth/login'</span>)</div><div class="line">        self.assertTrue(<span class="string">u'登录'</span> <span class="keyword">in</span> page.title)</div><div class="line"></div><div class="line">        page.set_user_name(new_user.name)</div><div class="line">        page.set_pwd(new_user.password)</div><div class="line">        page.submit()</div><div class="line"></div><div class="line">        <span class="comment"># 返回注册结果</span></div><div class="line"></div><div class="line">        self.assertTrue(re.search(<span class="string">u'欢迎来到Ray的博客'</span>, self.client.page_source))</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Flask-应用测试&quot;&gt;&lt;a href=&quot;#Flask-应用测试&quot; class=&quot;headerlink&quot; title=&quot;Flask 应用测试&quot;&gt;&lt;/a&gt;Flask 应用测试&lt;/h1&gt;&lt;h2 id=&quot;测试内容&quot;&gt;&lt;a href=&quot;#测试内容&quot; class=&quot;headerlink&quot; title=&quot;测试内容&quot;&gt;&lt;/a&gt;测试内容&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;模型测试&lt;/li&gt;
&lt;li&gt;逻辑测试&lt;/li&gt;
&lt;li&gt;view测试&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;unittest&quot;&gt;&lt;a href=&quot;#unittest&quot; class=&quot;headerlink&quot; title=&quot;unittest&quot;&gt;&lt;/a&gt;unittest&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;测试文件以test_开头命名&lt;/li&gt;
&lt;li&gt;每个测试文件都要实现一个测试用例&lt;/li&gt;
&lt;li&gt;测试用例内的方法命名也是test_开头命名&lt;/li&gt;
&lt;li&gt;测试用例有setUp和tearDown方法&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="flask" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/flask/"/>
    
    
      <category term="Flask" scheme="http://shuaiyy.cn/tags/Flask/"/>
    
      <category term="Web" scheme="http://shuaiyy.cn/tags/Web/"/>
    
      <category term="测试" scheme="http://shuaiyy.cn/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Flask Web应用部署和运维</title>
    <link href="http://shuaiyy.cn/2017/09/09/%E6%8A%80%E6%9C%AF/Flask%20Web%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2%E5%92%8C%E8%BF%90%E7%BB%B4/"/>
    <id>http://shuaiyy.cn/2017/09/09/技术/Flask Web应用部署和运维/</id>
    <published>2017-09-08T16:00:00.000Z</published>
    <updated>2017-10-07T13:45:16.308Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flask-Web应用部署和运维"><a href="#Flask-Web应用部署和运维" class="headerlink" title="Flask Web应用部署和运维"></a>Flask Web应用部署和运维</h1><h2 id="web应用发布"><a href="#web应用发布" class="headerlink" title="web应用发布"></a>web应用发布</h2><h3 id="服务器要求"><a href="#服务器要求" class="headerlink" title="服务器要求"></a>服务器要求</h3><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170921/0GiagKiael.png?imageslim" alt="mark"></p><h3 id="云服务器"><a href="#云服务器" class="headerlink" title="云服务器"></a>云服务器</h3><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170921/DILgBIJdGA.png?imageslim" alt="mark"></p><ul><li>ssh登录到远程服务器</li><li>配置web服务器运行环境</li></ul><a id="more"></a><h3 id="上传数据"><a href="#上传数据" class="headerlink" title="上传数据"></a>上传数据</h3><ul><li>通过ssh的sftp协议</li><li>通过ssh的lrzsz命令</li></ul><h3 id="配置web应用"><a href="#配置web应用" class="headerlink" title="配置web应用"></a>配置web应用</h3><ul><li>绑定公网ip，host= 0.0.0.0，允许公网访问</li><li>配置日志</li><li>配置缓存</li></ul><h2 id="WSGI"><a href="#WSGI" class="headerlink" title="WSGI"></a>WSGI</h2><ul><li><p>WSGI简介</p><p>WSGI具有灵活性和扩展性</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170923/c329idDI13.png?imageslim" alt="mark"></p></li><li><p>WSGI应用</p><p>WSGI应用是一个接受两个参数的可调用对象</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170923/ied6I7h0lm.png?imageslim" alt="mark"></p></li><li><p>WSGI服务器</p><p>为每个HTTP请求调用WSGI应用。</p></li></ul><h2 id="部署方案设计"><a href="#部署方案设计" class="headerlink" title="部署方案设计"></a>部署方案设计</h2><h3 id="服务器系统的选择"><a href="#服务器系统的选择" class="headerlink" title="服务器系统的选择"></a>服务器系统的选择</h3><p>Linux服务器，CentOS或Ubuntu</p><h3 id="常用的WSGI服务器"><a href="#常用的WSGI服务器" class="headerlink" title="常用的WSGI服务器"></a>常用的WSGI服务器</h3><ul><li>Gunicorn</li><li>uWSGI</li><li>CheryPy</li><li>Tornado</li><li>Gevent(基于协程，资源占用更少？)</li><li>mod_wsgi(Apache)</li></ul><h3 id="Web服务器"><a href="#Web服务器" class="headerlink" title="Web服务器"></a>Web服务器</h3><ul><li><p>Nginx</p></li><li><p>lighttpd</p></li><li><p>Apache</p><p>Nginx是面向性能设计的HTTP服务器，相比Apache，Lighttpd占用内存少，稳定性更高。</p></li></ul><h3 id="部署方案"><a href="#部署方案" class="headerlink" title="部署方案"></a>部署方案</h3><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170923/AK0fE2D23I.png?imageslim" alt="mark"></p><ul><li>Nginx web服务器</li><li>Gunicorn WSGI服务器</li><li>Virtualenv 管理Python运行环境</li><li>Supervisor进程监控管理</li></ul><h3 id="部署工作"><a href="#部署工作" class="headerlink" title="部署工作"></a>部署工作</h3><ul><li><p>可以选择将flask app设置为linux系统服务</p><p>ubuntu注册系统服务的配置为<code>/etc/init/my_flask.conf</code></p><p>启动服务<code>sudo service my_flask start</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> /etc/init/my_flask.conf</span></div><div class="line">description "My flask app service"</div><div class="line"></div><div class="line">start on runlevel [2345]</div><div class="line">stop on runlevel [!2345]</div><div class="line"></div><div class="line"></div><div class="line">respawn</div><div class="line">setuid root</div><div class="line">setgid www-data</div><div class="line"></div><div class="line">env PATH=/usr/share/www/venv/bin</div><div class="line">chdir /usr/share/www/</div><div class="line"><span class="meta">#</span><span class="bash"> wsgi.py是flask app的入口执行文件，application是flask app对象实例</span></div><div class="line">exec gunicorn -w 4 -b 127.0.0.1:8000 wsgi:application</div></pre></td></tr></table></figure><p>​</p></li><li><p>可以使用supervisor监控flask app进程</p></li></ul><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170928/imBgJlGcHa.png?imageslim" alt="mark"></p><h2 id="部署工具"><a href="#部署工具" class="headerlink" title="部署工具"></a>部署工具</h2><ul><li><p>virtualenv，串讲独立的python运行环境，pip install</p><ul><li>解决版本稳题</li><li>依赖问题</li><li>权限问题</li></ul><p><strong>使用方法</strong></p><ul><li>创建虚拟环境 <code>virtualenv flask_env</code></li><li>激活 <code>source flask_env/bin/activate</code></li><li>退出 <code>deactivate</code></li></ul></li><li><p>Supervisor 进程管理工具， apt-get install supervisor</p><ul><li>应用进程控制</li><li>多应用进程管理</li><li>应用中断后快速重启</li></ul><p><strong>使用方法</strong></p><p>主配置文件位于<code>/etc/supervisor/supervisord.conf</code>,其中有一行参数<code>[include] files = /etc/supervisor/conf.d/*.conf</code>表示我们自定义的进程管理配置文件的应存放位置</p><ul><li><p>添加程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> //etc/supervisor/conf.d/app.conf</span></div><div class="line">[program:app]</div><div class="line">command python /home/ubuntu/new/app.py</div></pre></td></tr></table></figure><p>​</p></li><li><p>使用supervisorctl进行控制</p><ul><li>reload</li><li>stop</li><li>help</li></ul></li></ul></li></ul><h2 id="Flask应用部署"><a href="#Flask应用部署" class="headerlink" title="Flask应用部署"></a>Flask应用部署</h2><p><a href="http://blog.csdn.net/qq_32198277/article/details/52432890" target="_blank" rel="external">Nginx Gunicorn部署flask应用</a></p><ul><li><p>配置Python虚拟环境</p><p><code>pip install -r requirement.txt</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> requirement.txt</span></div><div class="line">flask</div><div class="line">flask-wtf</div><div class="line">flask-script</div><div class="line">flask_mongoengine</div><div class="line">gunicorn</div></pre></td></tr></table></figure><p>​</p></li><li><p>安装配置Nginx</p><ul><li><p>apt-get安装</p></li><li><p>配置文件<code>/etc/nginx/nginx.conf</code>，里面有指定错误日志记录位置，一般在var</p></li><li><p><code>/etc/nginx/sites-available</code>是可用的配置文件，在此处创建配置</p><p>nginx监听80端口，处理静态文件,转发所有请求到9000端口，9000端口由Gunicorn监听</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170923/KGFL5gEll7.png?imageslim" alt="mark"></p></li><li><p><code>/etc/nginx/sites-enabled</code>是生效的配置文件，我们从available里链接文件过来</p></li><li><p>gunicorn转发<code>gunicorn -b 0.0.0.0:9000 my_app:app</code></p><p>监听9000端口，my_app.py是flask 应用的入口文件，后面接<code>:app</code></p></li></ul></li></ul><ul><li><p>配置supervisor</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170923/K4L8Ljcbk9.png?imageslim" alt="mark"></p></li></ul><h2 id="轻量级运维方案设计与实现"><a href="#轻量级运维方案设计与实现" class="headerlink" title="轻量级运维方案设计与实现"></a>轻量级运维方案设计与实现</h2><h3 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170924/DHb12BcDDc.png?imageslim" alt="mark"></p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>自动化</li><li>快速发布</li><li>快速恢复</li></ul><h3 id="Fabric"><a href="#Fabric" class="headerlink" title="Fabric"></a>Fabric</h3><p><code>pip install fabric</code></p><p><strong>用法示例</strong></p><ul><li>编写fab脚本</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># fabfile.py</span></div><div class="line"><span class="keyword">from</span> fabric <span class="keyword">import</span> *</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"hello!"</span></div></pre></td></tr></table></figure><ul><li><p>执行fab命令</p><p><code>fab hello</code></p></li></ul><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><p>通过SSH进行应用部署以及系统任务管理的命令行工具。</p><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><ul><li>本地或远程执行shell命令</li><li>上传和下载文件</li><li>提示用户输入</li><li>中断操作</li></ul><h3 id="轻量级运维方案"><a href="#轻量级运维方案" class="headerlink" title="轻量级运维方案"></a>轻量级运维方案</h3><h4 id="Pycharm中使用Github"><a href="#Pycharm中使用Github" class="headerlink" title="Pycharm中使用Github"></a>Pycharm中使用Github</h4><ul><li><p>配置账户</p><p>首先settings，version control配置github账户。电脑本地要安装git</p></li><li><p>建立远程仓库并提交代码</p><p>菜单栏 VCS， import  into version control， share on github </p></li><li><p>commit</p><p>选中项目文件夹，右键选择git</p><p> 或者快捷键 <code>ctrl + k</code></p></li><li><p>push</p><p><code>ctrl + shift + k</code></p></li><li><p>从github仓库克隆项目、</p><p>VCS ，Check out from version control， github。</p><p>pycharm会登录你的github并拉去有仓库git地址，选择你要克隆的项目。</p></li></ul><h4 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h4><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170924/BIj487CbjE.png?imageslim" alt="mark"></p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><ol><li><p>上传项目代码到git服务器</p></li><li><p>在远程服务器上git clone项目代码</p></li><li><p>部署应用，创建虚拟环境，安装项目依赖，配置数据库及flask参数</p><p>mongodb数据库安装，参考官网<a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/" target="_blank" rel="external">指导</a></p><p>Nginx配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line"></div><div class="line">     listen 80;</div><div class="line"></div><div class="line">     location /static &#123;</div><div class="line">         alias /home/ubuntu/new/todo/app/static;</div><div class="line">   &#125;</div><div class="line">     location / &#123;</div><div class="line">          proxy_pass http://127.0.0.1:7000;</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>​</p></li><li><p>使用supervisor监控管理应用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[program:todo]</div><div class="line">command = /home/ubuntu/flask_env/bin/gunicorn -b 0.0.0.0:7000 -w 4 run:app</div><div class="line">directory = /home/ubuntu/new/todo</div></pre></td></tr></table></figure><p>​</p></li><li><p>使用fabric实现自动更新部署脚本</p><p>登录服务器后，自动运行shell命令，实现项目更新部署</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> fabric.api <span class="keyword">import</span> *</div><div class="line"></div><div class="line"><span class="comment"># linux server的登录信息</span></div><div class="line">env.hosts = [<span class="string">'192.168.1.237'</span>]</div><div class="line">env.user = <span class="string">'ubuntu'</span></div><div class="line">env.password = <span class="string">'ubuntu'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">deploy</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">with</span> cd(<span class="string">'/home/ubuntu/new/todo'</span>):</div><div class="line">        run(<span class="string">'git pull'</span>)</div><div class="line">        sudo(<span class="string">'supervisorctl restart todo'</span>)</div><div class="line">        sudo(<span class="string">'supervisorctl status'</span>)</div></pre></td></tr></table></figure><p><strong>本地执行</strong> ：<code>fab deploy</code></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Flask-Web应用部署和运维&quot;&gt;&lt;a href=&quot;#Flask-Web应用部署和运维&quot; class=&quot;headerlink&quot; title=&quot;Flask Web应用部署和运维&quot;&gt;&lt;/a&gt;Flask Web应用部署和运维&lt;/h1&gt;&lt;h2 id=&quot;web应用发布&quot;&gt;&lt;a href=&quot;#web应用发布&quot; class=&quot;headerlink&quot; title=&quot;web应用发布&quot;&gt;&lt;/a&gt;web应用发布&lt;/h2&gt;&lt;h3 id=&quot;服务器要求&quot;&gt;&lt;a href=&quot;#服务器要求&quot; class=&quot;headerlink&quot; title=&quot;服务器要求&quot;&gt;&lt;/a&gt;服务器要求&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://o8i01ajlj.bkt.clouddn.com/blog/170921/0GiagKiael.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;云服务器&quot;&gt;&lt;a href=&quot;#云服务器&quot; class=&quot;headerlink&quot; title=&quot;云服务器&quot;&gt;&lt;/a&gt;云服务器&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://o8i01ajlj.bkt.clouddn.com/blog/170921/DILgBIJdGA.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ssh登录到远程服务器&lt;/li&gt;
&lt;li&gt;配置web服务器运行环境&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="flask" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/flask/"/>
    
    
      <category term="Flask" scheme="http://shuaiyy.cn/tags/Flask/"/>
    
      <category term="Web" scheme="http://shuaiyy.cn/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Flask Bootstrap</title>
    <link href="http://shuaiyy.cn/2017/09/08/%E6%8A%80%E6%9C%AF/Flask%20Bootstrap/"/>
    <id>http://shuaiyy.cn/2017/09/08/技术/Flask Bootstrap/</id>
    <published>2017-09-07T16:00:00.000Z</published>
    <updated>2017-10-07T13:44:30.205Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flask-Bootstrap"><a href="#Flask-Bootstrap" class="headerlink" title="Flask Bootstrap"></a>Flask Bootstrap</h1><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170926/5gILBg7g3I.png?imageslim" alt="mark"></p><p>安装<code>pip install flask-bootstrap</code></p><p>flask-nav生成导航栏</p><h2 id="在app中注册Bootstrap"><a href="#在app中注册Bootstrap" class="headerlink" title="在app中注册Bootstrap"></a>在app中注册Bootstrap</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> flask_bootstrap <span class="keyword">import</span> Bootstrap</div><div class="line">Bootstrap(app)</div></pre></td></tr></table></figure><a id="more"></a><p>Flask-Bootstrap为我们提供了一些模板和宏</p><h2 id="在模板中引入"><a href="#在模板中引入" class="headerlink" title="在模板中引入"></a>在模板中引入</h2><ul><li><p>直接在原来的base模板文件中继承<code>bootstrap/base.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&#123;% raw %&#125;</div><div class="line"></div><div class="line">&#123;% extends 'bootstrap/base.html' %&#125;</div><div class="line">&#123;% block head %&#125;</div><div class="line">    &#123;&#123; super() &#125;&#125;</div><div class="line">&#123;#    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for('static',filename='bootstrap.min.css') &#125;&#125;"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>/&gt;</span>#&#125;</div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for('static',filename='index.css') &#125;&#125;"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>/&gt;</span></div><div class="line">&#123;% endblock %&#125;</div><div class="line">&#123;% block body %&#125;</div><div class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header clearfix"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"text-muted"</span>&gt;</span>Todo<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"jumbotron"</span>&gt;</span></div><div class="line">        &#123;% block content %&#125;</div><div class="line">        &#123;% endblock %&#125;</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">     &#123;% block footer %&#125;</div><div class="line">         <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&amp;copy; yangshuai 2017<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></div><div class="line">     &#123;% endblock %&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!-- /container --&gt;</span></div><div class="line">&#123;% endblock %&#125;</div><div class="line">&#123;% endraw %&#125;</div></pre></td></tr></table></figure></li></ul><h2 id="Flask-Nav生成导航栏"><a href="#Flask-Nav生成导航栏" class="headerlink" title="Flask-Nav生成导航栏"></a>Flask-Nav生成导航栏</h2><ul><li>注册Nav对象</li><li>注册navbar元素</li><li>在模板需要的地方引用 <code>nav.top.render()</code> top是nav对象的id</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> flask_nav <span class="keyword">import</span> Nav</div><div class="line"><span class="keyword">from</span> flask_nav.elements <span class="keyword">import</span> *</div><div class="line"></div><div class="line">nav = Nav(app)</div><div class="line">nav.register_element(<span class="string">'top'</span>, Navbar(<span class="string">u'记事本'</span>,</div><div class="line">                                   View(<span class="string">u'主页'</span>, <span class="string">'index'</span>),</div><div class="line">                                   View(<span class="string">u'关于'</span>, <span class="string">'index'</span>),</div><div class="line">                                   View(<span class="string">u'项目'</span>, <span class="string">'index'</span>)))</div></pre></td></tr></table></figure><h2 id="Bootstrap-CDN"><a href="#Bootstrap-CDN" class="headerlink" title="Bootstrap CDN"></a>Bootstrap CDN</h2><p>选择Bootstrap的样式，引入css文件</p><p><strong><a href="https://www.bootstrapcdn.com/bootswatch/" target="_blank" rel="external">www.bootstrapcdn.com</a></strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;% raw %&#125;</div><div class="line">&#123;% block styles %&#125;</div><div class="line">    &#123;&#123; super() &#125;&#125;</div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"https://maxcdn.bootstrapcdn.com/bootswatch/3.3.7/darkly/bootstrap.min.css"</span></span></div><div class="line"><span class="tag">          <span class="attr">rel</span>=<span class="string">"stylesheet"</span></span></div><div class="line"><span class="tag">          <span class="attr">integrity</span>=<span class="string">"sha384-S7YMK1xjUjSpEnF4P8hPUcgjXYLZKK3fQW1j5ObLSl787II9p8RO9XUGehRmKsxd"</span></span></div><div class="line"><span class="tag">          <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span></div><div class="line">&#123;% endblock %&#125;</div><div class="line">&#123;% endraw %&#125;</div></pre></td></tr></table></figure><h2 id="使用Bootstrap-wtf宏渲染表单"><a href="#使用Bootstrap-wtf宏渲染表单" class="headerlink" title="使用Bootstrap wtf宏渲染表单"></a>使用Bootstrap wtf宏渲染表单</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;% raw %&#125;</div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/login"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">    &#123;&#123; wtf.quick_form(form) &#125;&#125;</div><div class="line"> <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">&#123;% endraw %&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Flask-Bootstrap&quot;&gt;&lt;a href=&quot;#Flask-Bootstrap&quot; class=&quot;headerlink&quot; title=&quot;Flask Bootstrap&quot;&gt;&lt;/a&gt;Flask Bootstrap&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://o8i01ajlj.bkt.clouddn.com/blog/170926/5gILBg7g3I.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;p&gt;安装&lt;code&gt;pip install flask-bootstrap&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;flask-nav生成导航栏&lt;/p&gt;
&lt;h2 id=&quot;在app中注册Bootstrap&quot;&gt;&lt;a href=&quot;#在app中注册Bootstrap&quot; class=&quot;headerlink&quot; title=&quot;在app中注册Bootstrap&quot;&gt;&lt;/a&gt;在app中注册Bootstrap&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; flask_bootstrap &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Bootstrap&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Bootstrap(app)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="flask" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/flask/"/>
    
    
      <category term="Flask" scheme="http://shuaiyy.cn/tags/Flask/"/>
    
      <category term="Web" scheme="http://shuaiyy.cn/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>python Web框架</title>
    <link href="http://shuaiyy.cn/2017/09/07/%E6%8A%80%E6%9C%AF/Python%20Web%E6%A1%86%E6%9E%B6%E7%AE%80%E4%BB%8B/"/>
    <id>http://shuaiyy.cn/2017/09/07/技术/Python Web框架简介/</id>
    <published>2017-09-06T16:00:00.000Z</published>
    <updated>2017-10-07T13:43:34.224Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-Web框架简介"><a href="#Python-Web框架简介" class="headerlink" title="Python Web框架简介"></a>Python Web框架简介</h1><h2 id="Web开发框架"><a href="#Web开发框架" class="headerlink" title="Web开发框架"></a>Web开发框架</h2><h3 id="Web框架简介"><a href="#Web框架简介" class="headerlink" title="Web框架简介"></a>Web框架简介</h3><h4 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h4><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170920/i68LC03BDG.png?imageslim" alt="mark"></p><a id="more"></a><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170920/5l2iffiACc.png?imageslim" alt="mark"></p><h4 id="Web框架"><a href="#Web框架" class="headerlink" title="Web框架"></a>Web框架</h4><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170920/fghFleh7GC.png?imageslim" alt="mark"></p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170920/DiA9d2d66k.png?imageslim" alt="mark"></p><h4 id="Web框架中的概念"><a href="#Web框架中的概念" class="headerlink" title="Web框架中的概念"></a>Web框架中的概念</h4><ul><li>MVC (Model，View，Controller)</li><li>ORM（Object-Relational Mapping）</li><li>URL Route</li><li>Template</li></ul><h2 id="常用Web框架种类"><a href="#常用Web框架种类" class="headerlink" title="常用Web框架种类"></a>常用Web框架种类</h2><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170920/A02H6aj165.png?imageslim" alt="mark"></p><h4 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h4><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170920/DgCLHk3jjK.png?imageslim" alt="mark"></p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170920/fE8LJ379Al.png?imageslim" alt="mark"></p><h4 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h4><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170920/ae8L3hJffD.png?imageslim" alt="mark"></p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170920/Kg6Jkkl3iA.png?imageslim" alt="mark"></p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170920/1A8m5JmiL5.png?imageslim" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Python-Web框架简介&quot;&gt;&lt;a href=&quot;#Python-Web框架简介&quot; class=&quot;headerlink&quot; title=&quot;Python Web框架简介&quot;&gt;&lt;/a&gt;Python Web框架简介&lt;/h1&gt;&lt;h2 id=&quot;Web开发框架&quot;&gt;&lt;a href=&quot;#Web开发框架&quot; class=&quot;headerlink&quot; title=&quot;Web开发框架&quot;&gt;&lt;/a&gt;Web开发框架&lt;/h2&gt;&lt;h3 id=&quot;Web框架简介&quot;&gt;&lt;a href=&quot;#Web框架简介&quot; class=&quot;headerlink&quot; title=&quot;Web框架简介&quot;&gt;&lt;/a&gt;Web框架简介&lt;/h3&gt;&lt;h4 id=&quot;框架&quot;&gt;&lt;a href=&quot;#框架&quot; class=&quot;headerlink&quot; title=&quot;框架&quot;&gt;&lt;/a&gt;框架&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://o8i01ajlj.bkt.clouddn.com/blog/170920/i68LC03BDG.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="flask" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/flask/"/>
    
    
      <category term="Flask" scheme="http://shuaiyy.cn/tags/Flask/"/>
    
      <category term="Web" scheme="http://shuaiyy.cn/tags/Web/"/>
    
      <category term="框架" scheme="http://shuaiyy.cn/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>python CGI编程</title>
    <link href="http://shuaiyy.cn/2017/09/06/%E6%8A%80%E6%9C%AF/python%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84CGI%E7%A8%8B%E5%BA%8F/"/>
    <id>http://shuaiyy.cn/2017/09/06/技术/python实现简单的CGI程序/</id>
    <published>2017-09-05T16:00:00.000Z</published>
    <updated>2017-10-07T13:42:01.901Z</updated>
    
    <content type="html"><![CDATA[<p>python CGI编程简介</p><h1 id="CGI介绍"><a href="#CGI介绍" class="headerlink" title="CGI介绍"></a>CGI介绍</h1><p>cgi允许web服务器执行外部脚本或程序，并将执行结果通过web服务器发送给浏览器。</p><p>对一个 CGI 程序，做的工作其实只有：从<strong>环境变量(environment variables)</strong>和<strong>标准输入(standard input)</strong>中读取数据、处理数据、向<strong>标准输出(standard output)</strong>输出数据。</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/17-9-19/22899824.jpg" alt=""></p><a id="more"></a><p><img src="http://o8i01ajlj.bkt.clouddn.com/17-9-19/24200775.jpg" alt=""></p><p><img src="http://o8i01ajlj.bkt.clouddn.com/17-9-19/52157869.jpg" alt=""></p><h1 id="GET和POST"><a href="#GET和POST" class="headerlink" title="GET和POST"></a>GET和POST</h1><p><img src="http://o8i01ajlj.bkt.clouddn.com/17-9-19/19715942.jpg" alt=""></p><p><img src="http://o8i01ajlj.bkt.clouddn.com/17-9-19/74390919.jpg" alt=""></p><h1 id="常见的web服务器"><a href="#常见的web服务器" class="headerlink" title="常见的web服务器"></a>常见的web服务器</h1><h2 id="Python内置的"><a href="#Python内置的" class="headerlink" title="Python内置的"></a>Python内置的</h2><p><img src="http://o8i01ajlj.bkt.clouddn.com/17-9-19/13061956.jpg" alt=""></p><h2 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h2><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><h1 id="CGI-hello-world"><a href="#CGI-hello-world" class="headerlink" title="CGI hello world"></a>CGI hello world</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! /usr/bin/env python</span></div><div class="line"><span class="comment"># cgi-bin/main.py</span></div><div class="line"><span class="keyword">import</span> cgi, cgitb</div><div class="line"></div><div class="line">form = cgi.FieldStorage()</div><div class="line">name = form.getvalue(<span class="string">'name'</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">"Content-type:text/html \n\n"</span></div><div class="line"><span class="keyword">print</span> <span class="string">"&lt;h1&gt;Hello %s&lt;/h1&gt;"</span> % name</div></pre></td></tr></table></figure><p><code>python -m &quot;CGIHTTPServer&quot; 8881</code>,启动服务器。</p><p>访问 <code>http://127.0.0.1:8881/cgi-bin/main.py?name=Susan</code>,就会得到“Hello Susan”的输出。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python CGI编程简介&lt;/p&gt;
&lt;h1 id=&quot;CGI介绍&quot;&gt;&lt;a href=&quot;#CGI介绍&quot; class=&quot;headerlink&quot; title=&quot;CGI介绍&quot;&gt;&lt;/a&gt;CGI介绍&lt;/h1&gt;&lt;p&gt;cgi允许web服务器执行外部脚本或程序，并将执行结果通过web服务器发送给浏览器。&lt;/p&gt;
&lt;p&gt;对一个 CGI 程序，做的工作其实只有：从&lt;strong&gt;环境变量(environment variables)&lt;/strong&gt;和&lt;strong&gt;标准输入(standard input)&lt;/strong&gt;中读取数据、处理数据、向&lt;strong&gt;标准输出(standard output)&lt;/strong&gt;输出数据。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o8i01ajlj.bkt.clouddn.com/17-9-19/22899824.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="flask" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/flask/"/>
    
    
      <category term="Flask" scheme="http://shuaiyy.cn/tags/Flask/"/>
    
      <category term="Web" scheme="http://shuaiyy.cn/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>python web 数据库连接</title>
    <link href="http://shuaiyy.cn/2017/09/05/%E6%8A%80%E6%9C%AF/Python%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5/"/>
    <id>http://shuaiyy.cn/2017/09/05/技术/Python数据库连接/</id>
    <published>2017-09-04T16:00:00.000Z</published>
    <updated>2017-10-07T13:58:38.300Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python数据库连接"><a href="#Python数据库连接" class="headerlink" title="Python数据库连接"></a>Python数据库连接</h1><h2 id="数据库基础"><a href="#数据库基础" class="headerlink" title="数据库基础"></a>数据库基础</h2><h3 id="数据库概念"><a href="#数据库概念" class="headerlink" title="数据库概念"></a>数据库概念</h3><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170920/bmDdB9HC7F.png?imageslim" alt="mark"></p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170920/Dj8eFefeaG.png?imageslim" alt="mark"></p><a id="more"></a><h3 id="数据库分类"><a href="#数据库分类" class="headerlink" title="数据库分类"></a>数据库分类</h3><p><strong>SQL和NoSQL</strong></p><ul><li>SQL<ul><li>SQLite 单文件，小型数据库</li><li>MySQL 开源，性能优异，使用广泛</li><li>PostgreSQL 开源，性能优异，使用广泛</li><li>Oracle</li><li>Microsoft SQL Server</li></ul></li><li>NoSQL<ul><li>MongoDB 性能好</li><li>neo4j  </li><li>elasticsearch  索引搜索功能强大</li><li>InfluxDB</li><li>BigTable</li><li>LevelDB</li></ul></li></ul><p><strong>单机 分布式</strong></p><ul><li>单机：Mysql和PostgreSQL常用于单机</li><li>分布式：Apache HIVE 和 cloudera IMPALA</li></ul><p><strong>文件型和内存性</strong></p><ul><li><p>文件型，数据放在磁盘，索引放在内存</p><p>MySQL、MongoDB</p></li><li><p>内存性：数据存放在内存，多用于缓存系统</p><p>Redis(支持复杂数据类型)、Memcached</p></li></ul><p><strong>批处理和交互式</strong></p><ul><li><p>批处理：将SQL分解成MR(map &amp;&amp; reduce)</p><p>Apache Hive</p></li><li><p>交互式：分级之后查询汇总</p><p>cloudera IMPALA、Apache Hbase、Amazon DynamoDB</p></li></ul><p><strong><em>AWS</em></strong></p><p>Amazon web services，亚马逊云服务，提供了免运维的数据库服务，支持MySQL、PostgreSQL、Oracle、SQL Server，注册后有个免费一年的套餐。</p><h3 id="安装数据库及管理工具"><a href="#安装数据库及管理工具" class="headerlink" title="安装数据库及管理工具"></a>安装数据库及管理工具</h3><ul><li>mysql server</li></ul><p><strong>管理工具</strong></p><ul><li>Navicat</li><li>RoboMongo</li><li>RedisDesktop</li><li>​</li></ul><h2 id="数据库查询语言SQL"><a href="#数据库查询语言SQL" class="headerlink" title="数据库查询语言SQL"></a>数据库查询语言SQL</h2><blockquote><p>不同数据库之间的SQL语句不完全相同</p></blockquote><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170920/9A7KfdiEmd.png?imageslim" alt="mark"></p><p>增删查改</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170920/6kHb0a3HCf.png?imageslim" alt="mark"></p><h2 id="python进行SQL操作"><a href="#python进行SQL操作" class="headerlink" title="python进行SQL操作"></a>python进行SQL操作</h2><h3 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h3><p><code>pip install mysql-python</code></p><ul><li>建立数据库连接</li><li>连接也可以使用URI，<code>mysql:\\user:passs@host:port/db_name</code></li><li>创建游标</li><li>通过游标执行SQl语句</li><li>执行插入、删除、修改后，需要提交到数据库以保持数据一致性</li><li>最后关闭数据库</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> MySQLdb</div><div class="line"></div><div class="line"><span class="comment"># connect to db</span></div><div class="line">conn = MySQLdb.connect(<span class="string">"db_host"</span>,<span class="string">"user"</span>,<span class="string">"passwd"</span>,<span class="string">"db_name"</span>)</div><div class="line"></div><div class="line"><span class="comment"># create cursor</span></div><div class="line">cur = conn.cursor()</div><div class="line"></div><div class="line"><span class="comment"># sql </span></div><div class="line">sql =<span class="string">"select * from student"</span></div><div class="line">insert_sql=<span class="string">"insert into student (name) values ('%s')"</span> %(<span class="string">'xxx'</span>)</div><div class="line"><span class="comment"># execute</span></div><div class="line"></div><div class="line">cur.execute(insert_sql)</div><div class="line">conn.commit() <span class="comment"># 执行插入、提交</span></div><div class="line"></div><div class="line"><span class="comment"># 执行查询，并遍历查询结果</span></div><div class="line"><span class="comment"># get the result</span></div><div class="line">cur.execute(sql)</div><div class="line">result=cur.fetchall()</div><div class="line"></div><div class="line"><span class="keyword">for</span> row <span class="keyword">in</span> result:</div><div class="line"><span class="keyword">print</span> row[<span class="number">0</span>]</div><div class="line"><span class="keyword">print</span> row[<span class="number">1</span>]</div><div class="line"><span class="comment"># 关闭数据库</span></div><div class="line">conn.close()</div></pre></td></tr></table></figure><h3 id="Mongodb-操作"><a href="#Mongodb-操作" class="headerlink" title="Mongodb 操作"></a>Mongodb 操作</h3><ul><li>使用pymongo</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pymongo</div><div class="line"></div><div class="line"><span class="comment"># 建立连接</span></div><div class="line">client = pymongo.MongoClient(host=<span class="string">'127.0.0.1'</span>, port=<span class="string">'27017'</span>)</div><div class="line"><span class="comment"># 选择数据库</span></div><div class="line">db = client[<span class="string">'test'</span>]</div><div class="line"><span class="comment"># 选着collection</span></div><div class="line">user_collection = db[<span class="string">'user'</span>]</div><div class="line"><span class="comment"># 向collection插入一条文档</span></div><div class="line">user_collection.insert(&#123;<span class="string">'id'</span>: <span class="string">'1'</span>, <span class="string">'name'</span>: <span class="string">'Lisa'</span>&#125;)</div><div class="line"><span class="comment"># 文档查找</span></div><div class="line">all_user = user_collection.find()</div></pre></td></tr></table></figure><h2 id="Flask中使用数据库"><a href="#Flask中使用数据库" class="headerlink" title="Flask中使用数据库"></a>Flask中使用数据库</h2><ul><li><p>首先创建表</p><p>字段：id, user, password,</p></li><li><p>使用单独的py文件定义全部sql操作。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># db.py</span></div><div class="line"><span class="keyword">import</span> MySQLdb</div><div class="line"></div><div class="line">conn = MySQLdb.connect(<span class="string">"localhost"</span>,<span class="string">"root"</span>,<span class="string">""</span>,<span class="string">"test"</span>)</div><div class="line">cur = conn.cursor()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(username,password)</span>:</span></div><div class="line">sql = <span class="string">"insert into user (username,password) values ('%s','%s')"</span> %(username,password)</div><div class="line">cur.execute(sql)</div><div class="line">conn.commit()</div><div class="line">conn.close()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">isExisted</span><span class="params">(username,password)</span>:</span></div><div class="line">sql=<span class="string">"select * from user where username ='%s' and password ='%s'"</span> %(username,password)</div><div class="line">cur.execute(sql)</div><div class="line">result = cur.fetchall()</div><div class="line"> <span class="keyword">return</span> <span class="keyword">True</span> <span class="keyword">if</span> result <span class="keyword">else</span> <span class="keyword">False</span></div></pre></td></tr></table></figure><ul><li><p>视图函数中使用SQL操作</p><p>注册用户时，新建用户插入数据库表中</p><p>用户登陆时，检查登陆信息是否正确</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> db <span class="keyword">import</span> *</div><div class="line"><span class="meta">@app.route("/register",methods=['GET','POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">()</span>:</span></div><div class="line">myForm=LoginForm(request.form)</div><div class="line"><span class="keyword">if</span> request.method==<span class="string">'POST'</span>:</div><div class="line">insert(myForm.username.data,myForm.password.data)</div><div class="line"><span class="keyword">return</span> redirect(<span class="string">"http://www.jikexueyuan.com"</span>)</div><div class="line"><span class="keyword">return</span> render_template(<span class="string">'index.html'</span>,form=myForm)</div><div class="line"></div><div class="line">  </div><div class="line"><span class="meta">@app.route("/login",methods=['GET','POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></div><div class="line">myForm=LoginForm(request.form)</div><div class="line"><span class="keyword">if</span> request.method ==<span class="string">'POST'</span>:</div><div class="line"><span class="keyword">if</span> (isExisted(myForm.username.data,myForm.password.data)):</div><div class="line"><span class="keyword">return</span> redirect(<span class="string">"http://www.jikexueyuan.com"</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line"><span class="keyword">return</span> <span class="string">"Login Failed"</span></div><div class="line"><span class="keyword">return</span> render_template(<span class="string">'index.html'</span>,form=myForm)</div></pre></td></tr></table></figure></li></ul><h2 id="ORM-对象关系映射"><a href="#ORM-对象关系映射" class="headerlink" title="ORM 对象关系映射"></a>ORM 对象关系映射</h2><h3 id="ORM概念"><a href="#ORM概念" class="headerlink" title="ORM概念"></a>ORM概念</h3><p>数据库和对象之间的桥梁</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170920/5CC1ABeL64.png?imageslim" alt="mark"></p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170920/97JkblFdL5.png?imageslim" alt="mark"></p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170925/IEhKcAC0m0.png?imageslim" alt="mark"></p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170920/9lD7CFe02L.png?imageslim" alt="mark"></p><h3 id="SQLAlchemy"><a href="#SQLAlchemy" class="headerlink" title="SQLAlchemy"></a>SQLAlchemy</h3><ul><li>著名的Python ORM框架</li></ul><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170925/llfCi8kkA6.png?imageslim" alt="mark"></p><ul><li>建立连接和创建表</li><li>创建有外键关联的表对象</li><li>插入和查询数据</li><li>高级查询 与或逻辑，多表查询，多级查询</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding:utf-8</span></div><div class="line"><span class="keyword">import</span> sqlalchemy</div><div class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</div><div class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</div><div class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String, DateTime, TEXT</div><div class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</div><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"></div><div class="line"><span class="comment"># 创建数据库连接引擎, echo显示执行的sql</span></div><div class="line">engine = create_engine(<span class="string">'sqlite:///test.db'</span>, echo=<span class="keyword">False</span>)</div><div class="line"><span class="comment"># 创建数据库会话，用于事务提交</span></div><div class="line">Session = sessionmaker(bind=engine)</div><div class="line">session = Session()</div><div class="line"></div><div class="line"><span class="comment"># 声明基类</span></div><div class="line">Base = declarative_base()</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(Base)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'users'</span></div><div class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</div><div class="line">    passwd = Column(Integer)</div><div class="line">    name = Column(String, default=<span class="string">'Noname'</span>)</div><div class="line">    full_name = Column(String(<span class="number">50</span>))</div><div class="line">    create_time = Column(DateTime, default= datetime.now)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></div><div class="line">       <span class="keyword">return</span> str(self.id) + <span class="string">"  &lt;User(name='%s', fullname='%s')&gt;"</span> % (</div><div class="line">                            self.name, self.full_name)</div><div class="line"></div><div class="line"><span class="comment"># 包含外键的对象</span></div><div class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> ForeignKey</div><div class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> relationship, backref</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Address</span><span class="params">(Base)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'addresses'</span></div><div class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</div><div class="line">    email_address = Column(String, nullable=<span class="keyword">False</span>)</div><div class="line">    user_id = Column(Integer, ForeignKey(<span class="string">'users.id'</span>))</div><div class="line">    user = relationship(<span class="string">"User"</span>, backref=backref(<span class="string">'addresses'</span>, order_by=id))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">"&lt;Address(email_address='%s')&gt;"</span> % self.email_address</div><div class="line"></div><div class="line"><span class="comment"># 创建数据库表</span></div><div class="line">Base.metadata.create_all(engine)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    u = User(name=<span class="string">'sqwe'</span>, full_name=<span class="string">'aassd'</span>, passwd=<span class="number">1</span>)</div><div class="line">    <span class="comment"># 保存一条数据并提交</span></div><div class="line">    session.add(User(name=<span class="string">'sqwe'</span>, full_name=<span class="string">'aassd'</span>, passwd=<span class="number">1</span>))</div><div class="line">    session.commit()</div><div class="line">    <span class="comment"># 保存多条数据并提交</span></div><div class="line">    session.add_all([</div><div class="line">        User(name=<span class="string">'wendy1'</span>, full_name=<span class="string">'aassd1'</span>, passwd=<span class="number">1</span>),</div><div class="line">        User(name=<span class="string">'jack'</span>, full_name=<span class="string">'aassd2'</span>, passwd=<span class="number">1</span>),</div><div class="line">        User(name=<span class="string">'wendy3'</span>, full_name=<span class="string">'aassd3'</span>, passwd=<span class="number">1</span>),</div><div class="line">        User(name=<span class="string">'jack4'</span>, full_name=<span class="string">'aassd4'</span>, passwd=<span class="number">1</span>),</div><div class="line">                     ])</div><div class="line">    session.commit()</div><div class="line"></div><div class="line">    <span class="comment"># 查询操作，SELECT * FROM users WHERE name="ed" LIMIT 1;</span></div><div class="line">    <span class="keyword">print</span> session.query(User).filter_by(name=<span class="string">'sqwe2'</span>).first()</div><div class="line"></div><div class="line">    <span class="comment"># 所有的User对象的list</span></div><div class="line">    print(session.query(User).all())</div><div class="line">    <span class="comment"># 按id排序，降序</span></div><div class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> session.query(User).order_by(-User.id):</div><div class="line">        print(row)</div><div class="line">    <span class="comment"># 精确查找，完全匹配给定值</span></div><div class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> session.query(User).filter(User.name.in_([<span class="string">'sqwe'</span>, <span class="string">'wendy'</span>, <span class="string">'jack'</span>])):</div><div class="line">        print(row)</div><div class="line">    <span class="comment"># 模糊查找，子串匹配即可</span></div><div class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> session.query(User).filter(~User.name.in_([<span class="string">'sqwe2'</span>, <span class="string">'wendy'</span>, <span class="string">'jack'</span>])):</div><div class="line">        print(row)</div><div class="line">    <span class="comment"># count计数</span></div><div class="line">    print(session.query(User).filter(User.name == <span class="string">'sqwe'</span>).count())</div><div class="line"></div><div class="line">    <span class="comment"># 高级查询条件，与或逻辑</span></div><div class="line">    <span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> and_, or_</div><div class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> session.query(User).filter(and_(User.name == <span class="string">'ed'</span>, User.fullname == <span class="string">'Ed Jones'</span>)):</div><div class="line">        print(row)</div><div class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> session.query(User).filter(or_(User.name == <span class="string">'ed'</span>, User.name == <span class="string">'wendy'</span>)):</div><div class="line">        print(row)</div><div class="line"></div><div class="line"></div><div class="line">    jack = User(name=<span class="string">'jack'</span>, full_name=<span class="string">'Jack Bean'</span>, passwd=<span class="string">'gjffdd'</span>)</div><div class="line">    <span class="comment"># 一对多的关系，一个用户可以有多个地址</span></div><div class="line">    jack.addresses = [</div><div class="line">                    Address(email_address=<span class="string">'jack@google.com'</span>),</div><div class="line">                    Address(email_address=<span class="string">'j25@yahoo.com'</span>)]</div><div class="line">    session.add(jack)</div><div class="line">    session.commit()</div><div class="line">    <span class="comment"># 多表条件查询</span></div><div class="line">    <span class="keyword">for</span> u, a <span class="keyword">in</span> session.query(User, Address).\</div><div class="line">                        filter(User.id==Address.user_id).\</div><div class="line">                        filter(Address.email_address==<span class="string">'jack@google.com'</span>).\</div><div class="line">                        all():</div><div class="line">        <span class="keyword">print</span> u, a</div></pre></td></tr></table></figure><h3 id="Flask-SQLAlchemy"><a href="#Flask-SQLAlchemy" class="headerlink" title="Flask-SQLAlchemy"></a>Flask-SQLAlchemy</h3><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170926/G0aciA01Aa.png" alt="mark"></p><p><strong>ORM相关操作</strong></p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170926/7K927BJcgf.png?imageslim" alt="mark"></p><h3 id="ORM使用示例"><a href="#ORM使用示例" class="headerlink" title="ORM使用示例"></a>ORM使用示例</h3><ul><li><p>使用ORM实现用户注册、登陆</p></li><li><p>db.create_all()命令可以生成所有的表</p></li><li><p>先创建一个SQLAlchemy对象</p></li><li><p>继承db.Model创建Model对象，实现对应的SQL操作</p></li><li><p>model对象要定义与数据库表的列名一致的属性</p></li><li><p>数据库的表可以用<code>__tablename__</code>定义</p><p>model.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># model.py</span></div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</div><div class="line"><span class="keyword">from</span> flask.ext.sqlalchemy <span class="keyword">import</span> SQLAlchemy</div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line">app.config[<span class="string">'SQLALCHEMY_DATABASE_URI'</span>] = <span class="string">'mysql://root@localhost/test'</span></div><div class="line">db = SQLAlchemy(app)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(db.Model)</span>:</span></div><div class="line">id = db.Column(db.Integer,primary_key=<span class="keyword">True</span>)</div><div class="line">username = db.Column(db.String(<span class="number">32</span>),unique=<span class="keyword">True</span>)</div><div class="line">password = db.Column(db.String(<span class="number">32</span>))</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,username,password)</span>:</span></div><div class="line">self.username = username</div><div class="line">self.password = password</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self)</span>:</span></div><div class="line"><span class="keyword">try</span>:</div><div class="line">db.session.add(self)</div><div class="line">db.session.commit()</div><div class="line"><span class="keyword">return</span> self.id</div><div class="line"><span class="keyword">except</span> Exception,e:</div><div class="line">db.session.rollback()</div><div class="line"><span class="keyword">return</span> e</div><div class="line"><span class="keyword">finally</span>:</div><div class="line"><span class="keyword">return</span> <span class="number">0</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">isExisted</span><span class="params">(self)</span>:</span></div><div class="line">temUser=User.query.filter_by(username=self.username,password=self.password).first()</div><div class="line"><span class="keyword">if</span> temUser <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line"><span class="keyword">return</span> <span class="number">0</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line"><span class="keyword">return</span> <span class="number">1</span></div></pre></td></tr></table></figure></li><li><p>在view中实例化Model对象，并调用其SQL操作方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> model <span class="keyword">import</span> User</div><div class="line"></div><div class="line"><span class="meta">@app.route("/register",methods=['GET','POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">()</span>:</span></div><div class="line">myForm=LoginForm(request.form)</div><div class="line"><span class="keyword">if</span> request.method==<span class="string">'POST'</span>:</div><div class="line">u=User(myForm.username.data,myForm.password.data)</div><div class="line">u.add()</div><div class="line"><span class="keyword">return</span> redirect(<span class="string">"http://www.jikexueyuan.com"</span>)</div><div class="line"><span class="keyword">return</span> render_template(<span class="string">'index.html'</span>,form=myForm)</div><div class="line">  </div><div class="line"><span class="meta">@app.route("/login",methods=['GET','POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></div><div class="line">myForm=LoginForm(request.form)</div><div class="line"><span class="keyword">if</span> request.method ==<span class="string">'POST'</span>:</div><div class="line">u=User(myForm.username.data,myForm.password.data)</div><div class="line"><span class="keyword">if</span> (u.isExisted()):</div><div class="line"><span class="keyword">return</span> redirect(<span class="string">"http://www.jikexueyuan.com"</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line"><span class="keyword">return</span> <span class="string">"Login Failed"</span></div><div class="line"><span class="keyword">return</span> render_template(<span class="string">'index.html'</span>,form=myForm)</div></pre></td></tr></table></figure></li><li><p>多表关联，主表中设置外键，foreignkey指向从表。从表中设置relationship指向主表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">db = SQLAlchemy(app)</div><div class="line"></div><div class="line"><span class="comment"># 主表</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(db.Model)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'users'</span></div><div class="line">    id = db.Column(db.Integer,primary_key=<span class="keyword">True</span>)</div><div class="line">username = db.Column(db.String(<span class="number">32</span>),unique=<span class="keyword">True</span>)</div><div class="line">password = db.Column(db.String(<span class="number">32</span>))</div><div class="line">    address_id = db.Column(db.Integer, db.ForeignKey(<span class="string">'address.id'</span>))</div><div class="line">    </div><div class="line"><span class="comment"># 从表</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Address</span><span class="params">(db.model)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'address'</span></div><div class="line">    id = db.Column(db.Integer,primary_key=<span class="keyword">True</span>)</div><div class="line">address = db.Column(db.String(<span class="number">32</span>),unique=<span class="keyword">True</span>)</div><div class="line">    users = db.relationship(<span class="string">'User'</span>, backref=<span class="string">'adress_x'</span>)</div><div class="line">    <span class="comment"># 相当于为User增加了一个属性address_x</span></div><div class="line">   </div><div class="line"><span class="comment"># 使用 </span></div><div class="line">User(id=<span class="number">1</span>, name=<span class="string">'xx'</span>, address_x=Address())</div></pre></td></tr></table></figure><p>​</p></li></ul><h2 id="实现一个留言板"><a href="#实现一个留言板" class="headerlink" title="实现一个留言板"></a>实现一个留言板</h2><ul><li><p>SQLAlchemy Model对象有query方法，实现了一系列SQL查询操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Entry</span><span class="params">(db.Model)</span>:</span></div><div class="line">id = db.Column(db.Integer,primary_key=<span class="keyword">True</span>)</div><div class="line">content = db.Column(db.Text)</div><div class="line">sender = db.Column(db.String(<span class="number">32</span>))</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,content,sender)</span>:</span></div><div class="line">self.content = content</div><div class="line">self.sender = sender</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self)</span>:</span></div><div class="line"><span class="keyword">try</span>:</div><div class="line">db.session.add(self)</div><div class="line">db.session.commit()</div><div class="line"><span class="keyword">return</span> self.id</div><div class="line"><span class="keyword">except</span> Exception,e:</div><div class="line">db.session.rollback()</div><div class="line"><span class="keyword">return</span> e</div><div class="line"><span class="keyword">finally</span>:</div><div class="line"><span class="keyword">return</span> <span class="number">0</span></div></pre></td></tr></table></figure></li><li><p><code>Entry.query.filter_by().all()</code>可以从数据库获取全部Entry对象的记录</p></li><li><p>每个表单都用wtform实现一个类</p></li><li><p>POST提交数据，GET展示数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PublishForm</span><span class="params">(Form)</span>:</span></div><div class="line">content = TextField(<span class="string">"content"</span>,[validators.Required()])</div><div class="line">sender = TextField(<span class="string">"sender"</span>,[validators.Required()])</div><div class="line"></div><div class="line"><span class="meta">@app.route("/show",methods=['GET','POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></div><div class="line">myEntryForm = PublishForm(request.form)</div><div class="line">l = Entry.query.filter_by().all()</div><div class="line"><span class="keyword">if</span> request.method ==<span class="string">'POST'</span>:</div><div class="line">e = Entry(myEntryForm.content.data,myEntryForm.sender.data)</div><div class="line">e.add()</div><div class="line"><span class="keyword">return</span> render_template(<span class="string">"show.html"</span>,entries=l,form=myEntryForm)</div><div class="line"><span class="keyword">return</span> render_template(<span class="string">"show.html"</span>,entries=l,form=myEntryForm)</div></pre></td></tr></table></figure></li></ul><h2 id="Flask应用的外部脚本"><a href="#Flask应用的外部脚本" class="headerlink" title="Flask应用的外部脚本"></a>Flask应用的外部脚本</h2><ul><li><p>flask-script</p><p><code>pip install flask-script</code>  ，类似Django中的manage命令</p><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170921/ajeImh6JDk.png?imageslim" alt="mark"></p></li><li><p>一个manage.py示例</p><ul><li>不带参数的函数用<code>manager.command</code>装饰器</li><li>带参数的函数<code>manager.option</code></li><li>使用livereload启动app，可以在开发时，修改代码，页面自动刷新。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> adder <span class="keyword">import</span> app <span class="comment"># flask app</span></div><div class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</div><div class="line"></div><div class="line">manager = Manager(app)</div><div class="line"></div><div class="line"><span class="meta">@manager.command</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'hello world!'</span></div><div class="line"></div><div class="line"><span class="meta">@manager.option('-n', '--name', dest='name', default='my friend')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'hello &#123;&#125;!'</span>.format(name)</div><div class="line">    </div><div class="line"><span class="meta">@manager.command</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">from</span> livereload <span class="keyword">import</span> Server</div><div class="line">    live_server = Server(app.wsgi_app)</div><div class="line">    live_server.watch(<span class="string">'**/*.*'</span>)</div><div class="line">    live_server.serve(open_url=<span class="keyword">True</span>)</div><div class="line">    </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    manager.run()</div></pre></td></tr></table></figure><p>执行 <code>python manage hello -n Alice</code>就会运行hello函数。</p><p>我们可以通过外部脚本与flask应用交互。</p></li></ul><h3 id="SQLlite3操作"><a href="#SQLlite3操作" class="headerlink" title="SQLlite3操作"></a>SQLlite3操作</h3><ul><li><p>model对象中定义SQL存储查询等操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sqlite3</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_conn</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> sqlite3.Connection(<span class="string">'test.db'</span>)</div><div class="line">  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, id, name)</span>:</span></div><div class="line">        self.id = id</div><div class="line">        self.name = name</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self)</span>:</span></div><div class="line">        conn = get_conn()</div><div class="line">        cursor = conn.cursor()</div><div class="line">        sql = <span class="string">'insert into user VALUES (?, ?)'</span></div><div class="line">        cursor.execute(sql, (self.id, self.name))</div><div class="line">        conn.commit()</div><div class="line">        cursor.close()</div><div class="line">        conn.close()</div><div class="line"></div><div class="line"><span class="meta">    @staticmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">query</span><span class="params">()</span>:</span></div><div class="line">        sql = <span class="string">'select * from user'</span></div><div class="line">        conn = get_conn()</div><div class="line">        cursor = conn.cursor()</div><div class="line">        cursor.execute(sql)</div><div class="line">        rows = cursor.fetchall()</div><div class="line">        users = [User(row[<span class="number">0</span>], row[<span class="number">1</span>]) <span class="keyword">for</span> row <span class="keyword">in</span> rows]</div><div class="line">        cursor.close()</div><div class="line">        conn.close()</div><div class="line">        <span class="keyword">return</span> users</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'id:&#123;&#125; ----- name:&#123;&#125;'</span>.format(self.id, self.name)</div></pre></td></tr></table></figure><p>​</p></li><li><p>在manage中可以执行SQL</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@manager.command</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_db</span><span class="params">()</span>:</span></div><div class="line">    conn = sqlite3.Connection(<span class="string">'test.db'</span>)</div><div class="line">    cursor = conn.cursor()</div><div class="line">    sql = <span class="string">'create table user(id INT, NAME VARCHAR )'</span></div><div class="line">    cursor.execute(sql)</div><div class="line">    conn.commit()</div><div class="line">    cursor.close()</div><div class="line">    conn.close()</div><div class="line"></div><div class="line"><span class="meta">@manager.command</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">all_user</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> User.query():</div><div class="line">        <span class="keyword">print</span> x</div><div class="line">    </div><div class="line"><span class="meta">@manager.option('-i', dest='id')</span></div><div class="line"><span class="meta">@manager.option('-n', dest='name', default='sss')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_user</span><span class="params">(id, name)</span>:</span></div><div class="line">    User(id, name).save()</div></pre></td></tr></table></figure></li></ul><h3 id="Mysql操作"><a href="#Mysql操作" class="headerlink" title="Mysql操作"></a>Mysql操作</h3><ul><li><p>model对象中定义SQL存储查询等操作</p><ul><li>Mysqldb建立连接时无法使用URI格式，接收关键字参数</li><li>user passwd db host port</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> MySQLdb</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_conn</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> MySQLdb.Connection(user=<span class="string">'root'</span>, passwd=<span class="string">'123456'</span>, db=<span class="string">'test'</span> )</div><div class="line"><span class="comment"># ''mysql://root:123456@localhost:3306/test''</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, id, name)</span>:</span></div><div class="line">        self.id = id</div><div class="line">        self.name = name</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self)</span>:</span></div><div class="line">        conn = get_conn()</div><div class="line">        cursor = conn.cursor()</div><div class="line">        sql = <span class="string">'insert into user(user_id, user_name) VALUES (%s, %s)'</span></div><div class="line">        cursor.execute(sql, (self.id, self.name))</div><div class="line">        conn.commit()</div><div class="line">        cursor.close()</div><div class="line">        conn.close()</div><div class="line"></div><div class="line"><span class="meta">    @staticmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">query</span><span class="params">()</span>:</span></div><div class="line">        sql = <span class="string">'select * from user'</span></div><div class="line">        conn = get_conn()</div><div class="line">        cursor = conn.cursor()</div><div class="line">        cursor.execute(sql)</div><div class="line">        rows = cursor.fetchall()</div><div class="line">        users = [User(row[<span class="number">0</span>], row[<span class="number">1</span>]) <span class="keyword">for</span> row <span class="keyword">in</span> rows]</div><div class="line">        cursor.close()</div><div class="line">        conn.close()</div><div class="line">        <span class="keyword">return</span> users</div></pre></td></tr></table></figure></li><li><p>在manage中可以执行SQL</p><p>调用对象sql方法即可</p></li></ul><h3 id="Mysql-ORM使用"><a href="#Mysql-ORM使用" class="headerlink" title="Mysql ORM使用"></a>Mysql ORM使用</h3><ul><li>使用 flask_sqlalchemy的Model对象定义Model</li><li>代码简洁，且无需自己实现SQL操作</li><li>会有一定的资源消耗</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># your app</span></div><div class="line">app = Flask(__name__)</div><div class="line">app.config[<span class="string">'SQLALCHEMY_DATABASE_URI'</span>] = <span class="string">'mysql://root:123456@localhost:3306/test'</span></div><div class="line">db = SQLAlchemy(app)</div></pre></td></tr></table></figure><h4 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h4><ul><li>app.config中配置数据库URI</li><li><code>app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = &#39;mysql://root:123456@localhost:3306/test&#39;</code></li></ul><h4 id="创建db对象"><a href="#创建db对象" class="headerlink" title="创建db对象"></a>创建db对象</h4><ul><li><code>db = SQLAlchemy(app)</code></li></ul><ul><li>创建完APP后，就应该创建对应的db对象，然后在models.py中引用db</li></ul><h4 id="定义Model"><a href="#定义Model" class="headerlink" title="定义Model"></a>定义Model</h4><ul><li>model的column属性名必须和数据表中字段一致</li><li>变量名一致</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># model.py</span></div><div class="line"><span class="keyword">from</span> adder <span class="keyword">import</span> db</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(db.Model)</span>:</span></div><div class="line">    user_id = db.Column(db.Integer, primary_key=<span class="keyword">True</span>)</div><div class="line">    user_name = db.Column(db.String)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, id, name)</span>:</span></div><div class="line">        self.user_id = id</div><div class="line">        self.user_name = name</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'id:&#123;&#125; ----- name:&#123;&#125;'</span>.format(self.id, self.name)</div></pre></td></tr></table></figure><h4 id="Model相关操作"><a href="#Model相关操作" class="headerlink" title="Model相关操作"></a>Model相关操作</h4><ul><li><p>对于数据库的SQL操作都是使用的db对象</p></li><li><p>一个数据库的warning</p><p><code>FSADeprecationWarning: SQLALCHEMY_TRACK_MODIFICATIONS adds significant overhead and will be disabled by default in the future.</code>解决办法，</p><p><code>app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;]=True</code></p></li><li><p>一个Mysql数据库的bug</p><p>Warning: Incorrect string value: ‘\xD6\xD0\xB9\xFA\xB1\xEA…’ for column ‘VARIABLE_VA<br>LUE’ at row 480</p><p>​</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># manage.py</span></div><div class="line"><span class="keyword">from</span> models <span class="keyword">import</span> User</div><div class="line"><span class="keyword">from</span> adder <span class="keyword">import</span> app, db</div><div class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</div><div class="line">manager = Manager(app)</div><div class="line"></div><div class="line"><span class="meta">@manager.command</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">all_user</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> User.query.all():</div><div class="line">        <span class="keyword">print</span> x</div><div class="line"></div><div class="line"><span class="meta">@manager.option('-i', dest='id')</span></div><div class="line"><span class="meta">@manager.option('-n', dest='name', default='sss')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_user</span><span class="params">(id, name)</span>:</span></div><div class="line">    u = User(int(id), str(name))</div><div class="line">    db.session.add(u)</div><div class="line">    db.session.commit()</div></pre></td></tr></table></figure><h3 id="Mobgodb-ORM使用"><a href="#Mobgodb-ORM使用" class="headerlink" title="Mobgodb ORM使用"></a>Mobgodb ORM使用</h3><p>Mongodb是文档型的，Document，准确的讲应该是Document-Relational Mapping.</p><p>flask_mongoengine</p><ul><li>事务要求高的系统不适合Mongodb</li><li>使用flask_Mongengine扩展来实现ORM</li></ul><ul><li>app.config中配置数据库URI</li><li><code>app.config[&#39;MONGODB_SETTINGS&#39;] = {&#39;db&#39;: &#39;test&#39;}</code></li></ul><h4 id="数据库配置-1"><a href="#数据库配置-1" class="headerlink" title="数据库配置"></a>数据库配置</h4><p>三种方式可选</p><ul><li><p><code>app.config[&#39;MONGODB_SETTINGS&#39;] = { &#39;db&#39;: &#39;project1&#39;, &#39;username&#39;:&#39;webapp&#39;,   &#39;password&#39;:&#39;pwd123&#39;}</code></p></li><li><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">app.config[<span class="string">'MONGODB_SETTINGS'</span>] = &#123;</div><div class="line">    <span class="string">'db'</span>: <span class="string">'project1'</span>,</div><div class="line">    <span class="string">'host'</span>: <span class="string">'mongodb://localhost/database_name'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">app.config[<span class="string">'MONGODB_DB'</span>] = <span class="string">'project1'</span></div><div class="line">app.config[<span class="string">'MONGODB_HOST'</span>] = <span class="string">'192.168.1.35'</span></div><div class="line">app.config[<span class="string">'MONGODB_PORT'</span>] = <span class="number">12345</span></div><div class="line">app.config[<span class="string">'MONGODB_USERNAME'</span>] = <span class="string">'webapp'</span></div><div class="line">app.config[<span class="string">'MONGODB_PASSWORD'</span>] = <span class="string">'pwd123'</span></div></pre></td></tr></table></figure></li></ul><h4 id="创建db对象-1"><a href="#创建db对象-1" class="headerlink" title="创建db对象"></a>创建db对象</h4><ul><li><p><code>db = MongoEngine(app)</code></p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">from flask_mongoengine import MongoEngine</div><div class="line">app.config[&apos;MONGODB_SETTINGS&apos;] = &#123;&apos;db&apos;: &apos;test&apos;&#125;</div><div class="line">db = MongoEngine(app)</div></pre></td></tr></table></figure></li><li><p>创建完APP后，就应该创建对应的db对象，然后在models.py中引用db</p></li></ul><h4 id="定义Document对象"><a href="#定义Document对象" class="headerlink" title="定义Document对象"></a>定义Document对象</h4><ul><li>document对象和mongodb中的数据结构要保持一致。</li><li>变量命名一致</li><li>不需要实现init</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># model.py</span></div><div class="line"><span class="keyword">from</span> adder <span class="keyword">import</span> db</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(db.Document)</span>:</span></div><div class="line">    meta = &#123;</div><div class="line">        <span class="string">'collection'</span>: <span class="string">'todo'</span>,</div><div class="line">        <span class="string">'ordering'</span>: [<span class="string">'-create_at'</span>],</div><div class="line">        <span class="string">'strict'</span>: <span class="keyword">False</span>,</div><div class="line">    &#125;</div><div class="line">    user_id = db.StringField()</div><div class="line">    user_name = db.StringField()</div><div class="line">    create_at = db.DateTimeField(default=datetime.now)</div><div class="line">    is_completed = db.BooleanField(default=<span class="keyword">False</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">"id: &#123;&#125;---name:&#123;&#125;"</span>.format(self.user_id, self.user_name)</div></pre></td></tr></table></figure><h4 id="Model相关操作-1"><a href="#Model相关操作-1" class="headerlink" title="Model相关操作"></a>Model相关操作</h4><ul><li><p>对于数据库的SQL操作都是使用的db对象</p></li><li><p>保存用document对象的save方法</p></li><li><p>查询所有用XXX.objects.all()</p><p>​</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># manage.py</span></div><div class="line"><span class="keyword">from</span> models <span class="keyword">import</span> User</div><div class="line"><span class="keyword">from</span> adder <span class="keyword">import</span> app, db</div><div class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</div><div class="line">manager = Manager(app)</div><div class="line"></div><div class="line"><span class="meta">@manager.command</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">all_user</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> User.objects.all():</div><div class="line">        <span class="keyword">print</span> x</div><div class="line"></div><div class="line"><span class="meta">@manager.option('-i', dest='id')</span></div><div class="line"><span class="meta">@manager.option('-n', dest='name', default='sss')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_user</span><span class="params">(id, name)</span>:</span></div><div class="line">    u = User(str(id), str(name))</div><div class="line">    u.save()</div></pre></td></tr></table></figure><ul><li><p>条件查询</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">task = <span class="string">'cooking'</span></div><div class="line">todo = Todo.objects(task=task).first()</div></pre></td></tr></table></figure></li><li><p>排序 用<code>Todo.objects().order_by(&#39;create_at&#39;)</code></p></li><li><p>更新、删除数据时，先找到，在更新</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">todo = Todo.objects(task=<span class="string">'1'</span>).first()  <span class="comment"># 先查找</span></div><div class="line"><span class="keyword">if</span> todo:</div><div class="line">    todo.update(is_completed=<span class="keyword">True</span>)   <span class="comment"># 再更新</span></div><div class="line"> todo.delete()</div></pre></td></tr></table></figure></li><li><p>还可以实现分页</p></li></ul><h2 id="事件驱动-触发器"><a href="#事件驱动-触发器" class="headerlink" title="事件驱动 触发器"></a>事件驱动 触发器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Post</span><span class="params">(db.Model)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'posts'</span></div><div class="line">    id = db.Column(db.Integer, primary_key=<span class="keyword">True</span>)</div><div class="line">    title = db.Column(db.String)</div><div class="line">    body = db.Column(db.String)</div><div class="line">    body_html = db.Column(db.String)</div><div class="line">    created = db.Column(db.DateTime, index=<span class="keyword">True</span>, default=datetime.utcnow)</div><div class="line"></div><div class="line">    comments = db.relationship(<span class="string">'Comment'</span>, backref=<span class="string">'post'</span>)</div><div class="line">    author_id = db.Column(db.Integer, db.ForeignKey(<span class="string">'users.id'</span>))</div><div class="line"></div><div class="line"><span class="meta">    @staticmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_body_changed</span><span class="params">(target, value, oldvalue, initiator)</span>:</span></div><div class="line">        <span class="keyword">if</span> value <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> (value <span class="keyword">is</span> <span class="string">''</span>):</div><div class="line">            target.body_html = <span class="string">''</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            target.body_html = markdown(value)</div><div class="line"></div><div class="line"></div><div class="line">db.event.listen(Post.body, <span class="string">'set'</span>, Post.on_body_changed)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Python数据库连接&quot;&gt;&lt;a href=&quot;#Python数据库连接&quot; class=&quot;headerlink&quot; title=&quot;Python数据库连接&quot;&gt;&lt;/a&gt;Python数据库连接&lt;/h1&gt;&lt;h2 id=&quot;数据库基础&quot;&gt;&lt;a href=&quot;#数据库基础&quot; class=&quot;headerlink&quot; title=&quot;数据库基础&quot;&gt;&lt;/a&gt;数据库基础&lt;/h2&gt;&lt;h3 id=&quot;数据库概念&quot;&gt;&lt;a href=&quot;#数据库概念&quot; class=&quot;headerlink&quot; title=&quot;数据库概念&quot;&gt;&lt;/a&gt;数据库概念&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://o8i01ajlj.bkt.clouddn.com/blog/170920/bmDdB9HC7F.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o8i01ajlj.bkt.clouddn.com/blog/170920/Dj8eFefeaG.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="flask" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/flask/"/>
    
    
      <category term="Flask" scheme="http://shuaiyy.cn/tags/Flask/"/>
    
      <category term="Web" scheme="http://shuaiyy.cn/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>RESTful API</title>
    <link href="http://shuaiyy.cn/2017/09/04/%E6%8A%80%E6%9C%AF/RESTful%20API%20%E8%AE%BE%E8%AE%A1/"/>
    <id>http://shuaiyy.cn/2017/09/04/技术/RESTful API 设计/</id>
    <published>2017-09-03T16:00:00.000Z</published>
    <updated>2017-10-07T13:38:27.213Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RESTful-API-设计"><a href="#RESTful-API-设计" class="headerlink" title="RESTful API 设计"></a>RESTful API 设计</h1><h2 id="Chrome开发工具"><a href="#Chrome开发工具" class="headerlink" title="Chrome开发工具"></a>Chrome开发工具</h2><ul><li>F12 审查元素，查看network，resource，element</li><li>Console使用</li><li>postman插件</li></ul><h2 id="RESTful简介"><a href="#RESTful简介" class="headerlink" title="RESTful简介"></a>RESTful简介</h2><p>比如微博开发平台<a href="http://open.weibo.com/wiki/%E9%A6%96%E9%A1%B5" target="_blank" rel="external">API接口</a></p><blockquote><p>RESTful API 不会保存会话和cookie</p><p>验证身份可以服务器生成token，请求API时携带Token即为合法请求</p></blockquote><a id="more"></a><ul><li><p>表现层状态转化</p><p>表现层：html、纯文本、xml、或json格式的数据。资源呈现的具体形式即为表现层。</p></li><li><p>每一个URI代表一种资源；</p></li><li><p>客户端和服务器之间，传递这种资源的某种表现形式；</p></li><li><p>状态转移</p><p>客户端通过四个HTTP动词，对服务器端资源进行操作，实现”表现层状态转化”</p></li></ul><p><img src="http://o8i01ajlj.bkt.clouddn.com/blog/170922/4f64l53CkG.png?imageslim" alt="mark"></p><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><p><strong>REST架构的6大原则</strong></p><ol><li><p>Uniform Interface</p></li><li><p>Stateless</p></li><li><p>Cacheable</p></li><li><p>Client-Server</p></li><li><p>Layered System</p><p>分层</p></li><li><p>Code on Demond</p><p>不限制编程语言</p></li></ol><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><ul><li><p>restful api使用json或xml传递数据，为了方便生成json，定义一个jsonobject对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">JsonObject</span><span class="params">()</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.dic=&#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self,key,value)</span>:</span></div><div class="line">        self.dic[key]=value</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,key)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.dic[key]</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getJson</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> json.dumps(self.dic,ensure_ascii=<span class="keyword">False</span>)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getDic</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.dic</div></pre></td></tr></table></figure></li><li><p>使用flask-restful扩展</p><ul><li><p>定义API对象</p><p>reqparse.RequestParser对象，</p><p>add_argument绑定要解析哪些参数，提交的参数不满足条件，可以给出提示</p><p>auth.parse_args 解析请求参数</p><p><strong>可插拔视图机制</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> flask.ext.restful <span class="keyword">import</span> reqparse, Resource</div><div class="line"><span class="keyword">from</span> JsonObject <span class="keyword">import</span> JsonObject</div><div class="line"><span class="keyword">from</span> models <span class="keyword">import</span> User</div><div class="line">auth=reqparse.RequestParser()</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Authentication</span><span class="params">(Resource)</span>:</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></div><div class="line"><span class="keyword">pass</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self)</span>:</span></div><div class="line">auth.add_argument(<span class="string">'username'</span>,required=<span class="keyword">True</span>,help=<span class="string">"Username is Required"</span>)</div><div class="line">auth.add_argument(<span class="string">'password'</span>,required=<span class="keyword">True</span>,help=<span class="string">"Password is Required"</span>)</div><div class="line">args=auth.parse_args()</div><div class="line">username = args[<span class="string">'username'</span>]</div><div class="line">password = args[<span class="string">'password'</span>]</div><div class="line">u = User(username,password)</div><div class="line">jsobj = JsonObject()</div><div class="line"><span class="keyword">if</span> u.isExisted():</div><div class="line">jsobj.put(<span class="string">"code"</span>,<span class="number">1</span>)</div><div class="line">jsobj.put(<span class="string">"desc"</span>,<span class="string">"User Existed"</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">jsobj.put(<span class="string">"code"</span>,<span class="number">2</span>)</div><div class="line">jsobj.put(<span class="string">"desc"</span>,<span class="string">"User Not Existed"</span>)</div><div class="line"><span class="keyword">return</span> jsobj.getJson(),<span class="number">200</span></div></pre></td></tr></table></figure><p>​</p></li><li><p>在app主文件内注册API</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</div><div class="line"><span class="keyword">from</span> flask.ext.restful <span class="keyword">import</span> Api</div><div class="line"><span class="keyword">from</span> userAPI <span class="keyword">import</span> Authentication</div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line">api = Api(app)</div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line">reload(sys)</div><div class="line">sys.setdefaultencoding(<span class="string">'utf-8'</span>)</div><div class="line"></div><div class="line">api.add_resource(Authentication,<span class="string">'/auth'</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">app.run(port=<span class="number">8080</span>)</div></pre></td></tr></table></figure><p>​</p></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;RESTful-API-设计&quot;&gt;&lt;a href=&quot;#RESTful-API-设计&quot; class=&quot;headerlink&quot; title=&quot;RESTful API 设计&quot;&gt;&lt;/a&gt;RESTful API 设计&lt;/h1&gt;&lt;h2 id=&quot;Chrome开发工具&quot;&gt;&lt;a href=&quot;#Chrome开发工具&quot; class=&quot;headerlink&quot; title=&quot;Chrome开发工具&quot;&gt;&lt;/a&gt;Chrome开发工具&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;F12 审查元素，查看network，resource，element&lt;/li&gt;
&lt;li&gt;Console使用&lt;/li&gt;
&lt;li&gt;postman插件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;RESTful简介&quot;&gt;&lt;a href=&quot;#RESTful简介&quot; class=&quot;headerlink&quot; title=&quot;RESTful简介&quot;&gt;&lt;/a&gt;RESTful简介&lt;/h2&gt;&lt;p&gt;比如微博开发平台&lt;a href=&quot;http://open.weibo.com/wiki/%E9%A6%96%E9%A1%B5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;API接口&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;RESTful API 不会保存会话和cookie&lt;/p&gt;
&lt;p&gt;验证身份可以服务器生成token，请求API时携带Token即为合法请求&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="技术" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="flask" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/flask/"/>
    
    
      <category term="flask" scheme="http://shuaiyy.cn/tags/flask/"/>
    
      <category term="restful" scheme="http://shuaiyy.cn/tags/restful/"/>
    
  </entry>
  
  <entry>
    <title>scrapy中使用BloomFilter优化URL去重</title>
    <link href="http://shuaiyy.cn/2017/09/03/%E6%8A%80%E6%9C%AF/Scrapy%E4%BD%BF%E7%94%A8bloom%20filter%E4%BC%98%E5%8C%96URL%E5%8E%BB%E9%87%8D/"/>
    <id>http://shuaiyy.cn/2017/09/03/技术/Scrapy使用bloom filter优化URL去重/</id>
    <published>2017-09-02T16:00:00.000Z</published>
    <updated>2017-10-07T13:36:38.895Z</updated>
    
    <content type="html"><![CDATA[<h1 id="scrapy使用BloomFilter优化URL去重"><a href="#scrapy使用BloomFilter优化URL去重" class="headerlink" title="scrapy使用BloomFilter优化URL去重"></a>scrapy使用BloomFilter优化URL去重</h1><blockquote><p> scrapy原有的url去重算法是sha1 Hash算法，去重队列存放在内存中。</p><p>当URL记录上亿时，内存开销会非常大，因此需要更加节省内存的算法来实现URL过滤。</p></blockquote><p><strong>参考文章</strong></p><ul><li><a href="http://blog.csdn.net/bone_ace/article/details/53099042" target="_blank" rel="external">scrapy_redis去重优化</a></li><li><a href="http://blog.csdn.net/bone_ace/article/details/53107018" target="_blank" rel="external">基于redis的BloomFilter实现</a></li><li><a href="https://github.com/LiuXingMing/Scrapy_Redis_Bloomfilter" target="_blank" rel="external">demo</a></li></ul><a id="more"></a><h2 id="源码解读"><a href="#源码解读" class="headerlink" title="源码解读"></a>源码解读</h2><ul><li><p>当scrapy的scheduler将url request任务入队时，首先要判断URL是否重复</p><p>在scrapy_redis/scheduler下有一个enqueue_request方法</p><p><code>if not request.dont_filter and self.df.request_seen(request)</code></p><p>如果设置了不过滤url，或者url任务已执行过，则不入队。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">enqueue_request</span><span class="params">(self, request)</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> request.dont_filter <span class="keyword">and</span> self.df.request_seen(request):</div><div class="line">        self.df.log(request, self.spider)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    <span class="keyword">if</span> self.stats:</div><div class="line">        self.stats.inc_value(<span class="string">'scheduler/enqueued/redis'</span>, spider=self.spider)</div><div class="line">    self.queue.push(request)</div><div class="line">    <span class="keyword">return</span> <span class="keyword">True</span></div></pre></td></tr></table></figure></li><li><p><code>self.df = load_object(self.dupefilter_cls)</code>  </p><p>df是dupefilter对象。</p></li><li><p><code>df.request_seen</code>是去重函数</p><p>使用的是redis的集合添加操作sadd，如果存在sadd会返回0</p><p>redis中存放的是request的指纹，<code>request_fingerprint(request)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">request_seen</span><span class="params">(self, request)</span>:</span></div><div class="line">    fp = self.request_fingerprint(request)</div><div class="line">    <span class="comment"># This returns the number of values added, zero if already exists.</span></div><div class="line">    added = self.server.sadd(self.key, fp)</div><div class="line">    <span class="keyword">return</span> added == <span class="number">0</span></div></pre></td></tr></table></figure></li><li><p>查看<code>request_fingerprint(request)</code>函数</p><p>fp是<code>hashlib.sha1</code>对象，也就是说存放在redis数据库中的是request的sha1摘要。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">request_fingerprint</span><span class="params">(request, include_headers=None)</span>:</span></div><div class="line">    <span class="keyword">if</span> include_headers:</div><div class="line">        include_headers = tuple(to_bytes(h.lower())</div><div class="line">                                 <span class="keyword">for</span> h <span class="keyword">in</span> sorted(include_headers))</div><div class="line">    cache = _fingerprint_cache.setdefault(request, &#123;&#125;)</div><div class="line">    <span class="keyword">if</span> include_headers <span class="keyword">not</span> <span class="keyword">in</span> cache:</div><div class="line">        fp = hashlib.sha1()</div><div class="line">        fp.update(to_bytes(request.method))</div><div class="line">        fp.update(to_bytes(canonicalize_url(request.url)))</div><div class="line">        fp.update(request.body <span class="keyword">or</span> <span class="string">b''</span>)</div><div class="line">        <span class="keyword">if</span> include_headers:</div><div class="line">            <span class="keyword">for</span> hdr <span class="keyword">in</span> include_headers:</div><div class="line">                <span class="keyword">if</span> hdr <span class="keyword">in</span> request.headers:</div><div class="line">                    fp.update(hdr)</div><div class="line">                    <span class="keyword">for</span> v <span class="keyword">in</span> request.headers.getlist(hdr):</div><div class="line">                        fp.update(v)</div><div class="line">        cache[include_headers] = fp.hexdigest()</div><div class="line">    <span class="keyword">return</span> cache[include_headers]</div></pre></td></tr></table></figure></li><li><p>如果要改进去重机制实现节省内存的话，则需要修改request_fingerprint算法生成更小的指纹，或者改进redis存储查找指纹的算法，节省空间，而不损失太多性能。</p></li><li><p>如果改变指纹算法函数的话，那么之前爬取过得任务指纹都无法使用了，sha1算法不可逆。而且找到sha1的替代也很难。</p></li><li><p>使用BloomFilter算法，改进指纹的存储和检索算法。只需改动df.request_seen</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">request_seen</span><span class="params">(self, request)</span>:</span></div><div class="line">    fp = request_fingerprint(request)</div><div class="line">    <span class="keyword">if</span> self.bf.isContains(fp):    <span class="comment"># 如果已经存在</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        self.bf.insert(fp)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div></pre></td></tr></table></figure><p>bf为BloomFilter对象，实现了插入和查找(判断是否存在)</p></li><li><p>BloomFilter算法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BloomFilter</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, host=<span class="string">'localhost'</span>, port=<span class="number">6379</span>, db=<span class="number">0</span>, blockNum=<span class="number">1</span>, key=<span class="string">'bloomfilter'</span>)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        :param host: the host of Redis</span></div><div class="line"><span class="string">        :param port: the port of Redis</span></div><div class="line"><span class="string">        :param db: witch db in Redis</span></div><div class="line"><span class="string">        :param blockNum: one blockNum for about 90,000,000; if you have more strings for filtering, increase it.</span></div><div class="line"><span class="string">        :param key: the key's name in Redis</span></div><div class="line"><span class="string">        """</span></div><div class="line">        self.server = redis.Redis(host=host, port=port, db=db)</div><div class="line">        self.bit_size = <span class="number">1</span> &lt;&lt; <span class="number">31</span>  <span class="comment"># Redis的String类型最大容量为512M，现使用256M</span></div><div class="line">        self.seeds = [<span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">61</span>]</div><div class="line">        self.key = key</div><div class="line">        self.blockNum = blockNum</div><div class="line">        self.hashfunc = []</div><div class="line">        <span class="keyword">for</span> seed <span class="keyword">in</span> self.seeds:</div><div class="line">            self.hashfunc.append(SimpleHash(self.bit_size, seed))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isContains</span><span class="params">(self, str_input)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> str_input:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        m5 = md5()</div><div class="line">        m5.update(str_input)</div><div class="line">        str_input = m5.hexdigest()</div><div class="line">        ret = <span class="keyword">True</span></div><div class="line">        name = self.key + str(int(str_input[<span class="number">0</span>:<span class="number">2</span>], <span class="number">16</span>) % self.blockNum)</div><div class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> self.hashfunc:</div><div class="line">            loc = f.hash(str_input)</div><div class="line">            ret = ret &amp; self.server.getbit(name, loc)</div><div class="line">        <span class="keyword">return</span> ret</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, str_input)</span>:</span></div><div class="line">        m5 = md5()</div><div class="line">        m5.update(str_input)</div><div class="line">        str_input = m5.hexdigest()</div><div class="line">        name = self.key + str(int(str_input[<span class="number">0</span>:<span class="number">2</span>], <span class="number">16</span>) % self.blockNum)</div><div class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> self.hashfunc:</div><div class="line">            loc = f.hash(str_input)</div><div class="line">            self.server.setbit(name, loc, <span class="number">1</span>)</div></pre></td></tr></table></figure><p>​</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;scrapy使用BloomFilter优化URL去重&quot;&gt;&lt;a href=&quot;#scrapy使用BloomFilter优化URL去重&quot; class=&quot;headerlink&quot; title=&quot;scrapy使用BloomFilter优化URL去重&quot;&gt;&lt;/a&gt;scrapy使用BloomFilter优化URL去重&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; scrapy原有的url去重算法是sha1 Hash算法，去重队列存放在内存中。&lt;/p&gt;
&lt;p&gt;当URL记录上亿时，内存开销会非常大，因此需要更加节省内存的算法来实现URL过滤。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;参考文章&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/bone_ace/article/details/53099042&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;scrapy_redis去重优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/bone_ace/article/details/53107018&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;基于redis的BloomFilter实现&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/LiuXingMing/Scrapy_Redis_Bloomfilter&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="scrapy" scheme="http://shuaiyy.cn/categories/%E6%8A%80%E6%9C%AF/scrapy/"/>
    
    
      <category term="Python" scheme="http://shuaiyy.cn/tags/Python/"/>
    
      <category term="爬虫" scheme="http://shuaiyy.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Scrapy" scheme="http://shuaiyy.cn/tags/Scrapy/"/>
    
  </entry>
  
</feed>
